# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_kalashnikovDB', [dirname(__file__)])
        except ImportError:
            import _kalashnikovDB
            return _kalashnikovDB
        if fp is not None:
            try:
                _mod = imp.load_module('_kalashnikovDB', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _kalashnikovDB = swig_import_helper()
    del swig_import_helper
else:
    import _kalashnikovDB
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



_kalashnikovDB.DEBUG_ALL_swigconstant(_kalashnikovDB)
DEBUG_ALL = _kalashnikovDB.DEBUG_ALL

_kalashnikovDB.LOW_swigconstant(_kalashnikovDB)
LOW = _kalashnikovDB.LOW

_kalashnikovDB.MIDDLE_swigconstant(_kalashnikovDB)
MIDDLE = _kalashnikovDB.MIDDLE

_kalashnikovDB.HIGH_swigconstant(_kalashnikovDB)
HIGH = _kalashnikovDB.HIGH

_kalashnikovDB.GLOBAL_swigconstant(_kalashnikovDB)
GLOBAL = _kalashnikovDB.GLOBAL

_kalashnikovDB.DB_MAN_swigconstant(_kalashnikovDB)
DB_MAN = _kalashnikovDB.DB_MAN

_kalashnikovDB.FILE_MAN_swigconstant(_kalashnikovDB)
FILE_MAN = _kalashnikovDB.FILE_MAN

_kalashnikovDB.MEMO_MAN_swigconstant(_kalashnikovDB)
MEMO_MAN = _kalashnikovDB.MEMO_MAN

_kalashnikovDB.INDICES_swigconstant(_kalashnikovDB)
INDICES = _kalashnikovDB.INDICES

_kalashnikovDB.TABLES_swigconstant(_kalashnikovDB)
TABLES = _kalashnikovDB.TABLES

_kalashnikovDB.REL_OP_swigconstant(_kalashnikovDB)
REL_OP = _kalashnikovDB.REL_OP

_kalashnikovDB.REL_EQ_swigconstant(_kalashnikovDB)
REL_EQ = _kalashnikovDB.REL_EQ

_kalashnikovDB.CONSTRAINTS_swigconstant(_kalashnikovDB)
CONSTRAINTS = _kalashnikovDB.CONSTRAINTS

_kalashnikovDB.FUNCTIONS_swigconstant(_kalashnikovDB)
FUNCTIONS = _kalashnikovDB.FUNCTIONS

_kalashnikovDB.SEQUENCES_swigconstant(_kalashnikovDB)
SEQUENCES = _kalashnikovDB.SEQUENCES

_kalashnikovDB.TRIGGERS_swigconstant(_kalashnikovDB)
TRIGGERS = _kalashnikovDB.TRIGGERS

_kalashnikovDB.REDO_swigconstant(_kalashnikovDB)
REDO = _kalashnikovDB.REDO

def Ak_dbg_messg(level, type, format):
    return _kalashnikovDB.Ak_dbg_messg(level, type, format)
Ak_dbg_messg = _kalashnikovDB.Ak_dbg_messg

_kalashnikovDB.MAX_VARCHAR_LENGTH_swigconstant(_kalashnikovDB)
MAX_VARCHAR_LENGTH = _kalashnikovDB.MAX_VARCHAR_LENGTH

_kalashnikovDB.MAX_ATTRIBUTES_swigconstant(_kalashnikovDB)
MAX_ATTRIBUTES = _kalashnikovDB.MAX_ATTRIBUTES

_kalashnikovDB.MAX_ATT_NAME_swigconstant(_kalashnikovDB)
MAX_ATT_NAME = _kalashnikovDB.MAX_ATT_NAME

_kalashnikovDB.MAX_CONSTRAINTS_swigconstant(_kalashnikovDB)
MAX_CONSTRAINTS = _kalashnikovDB.MAX_CONSTRAINTS

_kalashnikovDB.MAX_CONSTR_NAME_swigconstant(_kalashnikovDB)
MAX_CONSTR_NAME = _kalashnikovDB.MAX_CONSTR_NAME

_kalashnikovDB.MAX_CONSTR_CODE_swigconstant(_kalashnikovDB)
MAX_CONSTR_CODE = _kalashnikovDB.MAX_CONSTR_CODE

_kalashnikovDB.MAX_OBSERVABLE_OBSERVERS_swigconstant(_kalashnikovDB)
MAX_OBSERVABLE_OBSERVERS = _kalashnikovDB.MAX_OBSERVABLE_OBSERVERS

_kalashnikovDB.MAX_ACTIVE_TRANSACTIONS_COUNT_swigconstant(_kalashnikovDB)
MAX_ACTIVE_TRANSACTIONS_COUNT = _kalashnikovDB.MAX_ACTIVE_TRANSACTIONS_COUNT

_kalashnikovDB.DATA_BLOCK_SIZE_swigconstant(_kalashnikovDB)
DATA_BLOCK_SIZE = _kalashnikovDB.DATA_BLOCK_SIZE

_kalashnikovDB.DATA_ENTRY_SIZE_swigconstant(_kalashnikovDB)
DATA_ENTRY_SIZE = _kalashnikovDB.DATA_ENTRY_SIZE

_kalashnikovDB.MAX_QUERY_LIB_MEMORY_swigconstant(_kalashnikovDB)
MAX_QUERY_LIB_MEMORY = _kalashnikovDB.MAX_QUERY_LIB_MEMORY

_kalashnikovDB.MAX_CACHE_MEMORY_swigconstant(_kalashnikovDB)
MAX_CACHE_MEMORY = _kalashnikovDB.MAX_CACHE_MEMORY

_kalashnikovDB.MAX_QUERY_DICT_MEMORY_swigconstant(_kalashnikovDB)
MAX_QUERY_DICT_MEMORY = _kalashnikovDB.MAX_QUERY_DICT_MEMORY

_kalashnikovDB.MAX_QUERY_RESULT_MEMORY_swigconstant(_kalashnikovDB)
MAX_QUERY_RESULT_MEMORY = _kalashnikovDB.MAX_QUERY_RESULT_MEMORY

_kalashnikovDB.MAX_TOKENS_swigconstant(_kalashnikovDB)
MAX_TOKENS = _kalashnikovDB.MAX_TOKENS

_kalashnikovDB.MAX_MAIN_BUCKETS_swigconstant(_kalashnikovDB)
MAX_MAIN_BUCKETS = _kalashnikovDB.MAX_MAIN_BUCKETS

_kalashnikovDB.MAIN_BUCKET_SIZE_swigconstant(_kalashnikovDB)
MAIN_BUCKET_SIZE = _kalashnikovDB.MAIN_BUCKET_SIZE

_kalashnikovDB.HASH_BUCKET_SIZE_swigconstant(_kalashnikovDB)
HASH_BUCKET_SIZE = _kalashnikovDB.HASH_BUCKET_SIZE

_kalashnikovDB.NUMBER_OF_KEYS_swigconstant(_kalashnikovDB)
NUMBER_OF_KEYS = _kalashnikovDB.NUMBER_OF_KEYS

_kalashnikovDB.EXIT_SUCCESS_swigconstant(_kalashnikovDB)
EXIT_SUCCESS = _kalashnikovDB.EXIT_SUCCESS

_kalashnikovDB.EXIT_ERROR_swigconstant(_kalashnikovDB)
EXIT_ERROR = _kalashnikovDB.EXIT_ERROR

_kalashnikovDB.BLOCK_TYPE_FREE_swigconstant(_kalashnikovDB)
BLOCK_TYPE_FREE = _kalashnikovDB.BLOCK_TYPE_FREE

_kalashnikovDB.BLOCK_TYPE_NORMAL_swigconstant(_kalashnikovDB)
BLOCK_TYPE_NORMAL = _kalashnikovDB.BLOCK_TYPE_NORMAL

_kalashnikovDB.BLOCK_TYPE_CHAINED_swigconstant(_kalashnikovDB)
BLOCK_TYPE_CHAINED = _kalashnikovDB.BLOCK_TYPE_CHAINED

_kalashnikovDB.NOT_CHAINED_swigconstant(_kalashnikovDB)
NOT_CHAINED = _kalashnikovDB.NOT_CHAINED

_kalashnikovDB.FREE_INT_swigconstant(_kalashnikovDB)
FREE_INT = _kalashnikovDB.FREE_INT

_kalashnikovDB.FREE_CHAR_swigconstant(_kalashnikovDB)
FREE_CHAR = _kalashnikovDB.FREE_CHAR

_kalashnikovDB.SEGMENT_TYPE_SYSTEM_TABLE_swigconstant(_kalashnikovDB)
SEGMENT_TYPE_SYSTEM_TABLE = _kalashnikovDB.SEGMENT_TYPE_SYSTEM_TABLE

_kalashnikovDB.SEGMENT_TYPE_TABLE_swigconstant(_kalashnikovDB)
SEGMENT_TYPE_TABLE = _kalashnikovDB.SEGMENT_TYPE_TABLE

_kalashnikovDB.SEGMENT_TYPE_INDEX_swigconstant(_kalashnikovDB)
SEGMENT_TYPE_INDEX = _kalashnikovDB.SEGMENT_TYPE_INDEX

_kalashnikovDB.SEGMENT_TYPE_TRANSACTION_swigconstant(_kalashnikovDB)
SEGMENT_TYPE_TRANSACTION = _kalashnikovDB.SEGMENT_TYPE_TRANSACTION

_kalashnikovDB.SEGMENT_TYPE_TEMP_swigconstant(_kalashnikovDB)
SEGMENT_TYPE_TEMP = _kalashnikovDB.SEGMENT_TYPE_TEMP

_kalashnikovDB.TYPE_INTERNAL_swigconstant(_kalashnikovDB)
TYPE_INTERNAL = _kalashnikovDB.TYPE_INTERNAL

_kalashnikovDB.TYPE_INT_swigconstant(_kalashnikovDB)
TYPE_INT = _kalashnikovDB.TYPE_INT

_kalashnikovDB.TYPE_FLOAT_swigconstant(_kalashnikovDB)
TYPE_FLOAT = _kalashnikovDB.TYPE_FLOAT

_kalashnikovDB.TYPE_NUMBER_swigconstant(_kalashnikovDB)
TYPE_NUMBER = _kalashnikovDB.TYPE_NUMBER

_kalashnikovDB.TYPE_VARCHAR_swigconstant(_kalashnikovDB)
TYPE_VARCHAR = _kalashnikovDB.TYPE_VARCHAR

_kalashnikovDB.TYPE_DATE_swigconstant(_kalashnikovDB)
TYPE_DATE = _kalashnikovDB.TYPE_DATE

_kalashnikovDB.TYPE_DATETIME_swigconstant(_kalashnikovDB)
TYPE_DATETIME = _kalashnikovDB.TYPE_DATETIME

_kalashnikovDB.TYPE_TIME_swigconstant(_kalashnikovDB)
TYPE_TIME = _kalashnikovDB.TYPE_TIME

_kalashnikovDB.TYPE_BLOB_swigconstant(_kalashnikovDB)
TYPE_BLOB = _kalashnikovDB.TYPE_BLOB

_kalashnikovDB.TYPE_BOOL_swigconstant(_kalashnikovDB)
TYPE_BOOL = _kalashnikovDB.TYPE_BOOL

_kalashnikovDB.TYPE_OPERAND_swigconstant(_kalashnikovDB)
TYPE_OPERAND = _kalashnikovDB.TYPE_OPERAND

_kalashnikovDB.TYPE_OPERATOR_swigconstant(_kalashnikovDB)
TYPE_OPERATOR = _kalashnikovDB.TYPE_OPERATOR

_kalashnikovDB.TYPE_ATTRIBS_swigconstant(_kalashnikovDB)
TYPE_ATTRIBS = _kalashnikovDB.TYPE_ATTRIBS

_kalashnikovDB.TYPE_CONDITION_swigconstant(_kalashnikovDB)
TYPE_CONDITION = _kalashnikovDB.TYPE_CONDITION

_kalashnikovDB.BLOCK_CLEAN_swigconstant(_kalashnikovDB)
BLOCK_CLEAN = _kalashnikovDB.BLOCK_CLEAN

_kalashnikovDB.BLOCK_DIRTY_swigconstant(_kalashnikovDB)
BLOCK_DIRTY = _kalashnikovDB.BLOCK_DIRTY

_kalashnikovDB.ATTR_DELIMITER_swigconstant(_kalashnikovDB)
ATTR_DELIMITER = _kalashnikovDB.ATTR_DELIMITER

_kalashnikovDB.ATTR_ESCAPE_swigconstant(_kalashnikovDB)
ATTR_ESCAPE = _kalashnikovDB.ATTR_ESCAPE

_kalashnikovDB.NULLL_swigconstant(_kalashnikovDB)
NULLL = _kalashnikovDB.NULLL

_kalashnikovDB.RO_SELECTION_swigconstant(_kalashnikovDB)
RO_SELECTION = _kalashnikovDB.RO_SELECTION

_kalashnikovDB.RO_PROJECTION_swigconstant(_kalashnikovDB)
RO_PROJECTION = _kalashnikovDB.RO_PROJECTION

_kalashnikovDB.RO_NAT_JOIN_swigconstant(_kalashnikovDB)
RO_NAT_JOIN = _kalashnikovDB.RO_NAT_JOIN

_kalashnikovDB.RO_RENAME_swigconstant(_kalashnikovDB)
RO_RENAME = _kalashnikovDB.RO_RENAME

_kalashnikovDB.RO_UNION_swigconstant(_kalashnikovDB)
RO_UNION = _kalashnikovDB.RO_UNION

_kalashnikovDB.RO_INTERSECT_swigconstant(_kalashnikovDB)
RO_INTERSECT = _kalashnikovDB.RO_INTERSECT

_kalashnikovDB.RO_EXCEPT_swigconstant(_kalashnikovDB)
RO_EXCEPT = _kalashnikovDB.RO_EXCEPT

_kalashnikovDB.RO_THETA_JOIN_swigconstant(_kalashnikovDB)
RO_THETA_JOIN = _kalashnikovDB.RO_THETA_JOIN

_kalashnikovDB.NEW_VALUE_swigconstant(_kalashnikovDB)
NEW_VALUE = _kalashnikovDB.NEW_VALUE

_kalashnikovDB.SEARCH_CONSTRAINT_swigconstant(_kalashnikovDB)
SEARCH_CONSTRAINT = _kalashnikovDB.SEARCH_CONSTRAINT

_kalashnikovDB.UPDATE_swigconstant(_kalashnikovDB)
UPDATE = _kalashnikovDB.UPDATE

_kalashnikovDB.DELETE_swigconstant(_kalashnikovDB)
DELETE = _kalashnikovDB.DELETE

_kalashnikovDB.INSERT_swigconstant(_kalashnikovDB)
INSERT = _kalashnikovDB.INSERT

_kalashnikovDB.SELECT_swigconstant(_kalashnikovDB)
SELECT = _kalashnikovDB.SELECT

_kalashnikovDB.FIND_swigconstant(_kalashnikovDB)
FIND = _kalashnikovDB.FIND

_kalashnikovDB.INFO_BUCKET_swigconstant(_kalashnikovDB)
INFO_BUCKET = _kalashnikovDB.INFO_BUCKET

_kalashnikovDB.MAIN_BUCKET_swigconstant(_kalashnikovDB)
MAIN_BUCKET = _kalashnikovDB.MAIN_BUCKET

_kalashnikovDB.HASH_BUCKET_swigconstant(_kalashnikovDB)
HASH_BUCKET = _kalashnikovDB.HASH_BUCKET

_kalashnikovDB.SHARED_LOCK_swigconstant(_kalashnikovDB)
SHARED_LOCK = _kalashnikovDB.SHARED_LOCK

_kalashnikovDB.EXCLUSIVE_LOCK_swigconstant(_kalashnikovDB)
EXCLUSIVE_LOCK = _kalashnikovDB.EXCLUSIVE_LOCK

_kalashnikovDB.WAIT_FOR_UNLOCK_swigconstant(_kalashnikovDB)
WAIT_FOR_UNLOCK = _kalashnikovDB.WAIT_FOR_UNLOCK

_kalashnikovDB.PASS_LOCK_QUEUE_swigconstant(_kalashnikovDB)
PASS_LOCK_QUEUE = _kalashnikovDB.PASS_LOCK_QUEUE

_kalashnikovDB.OK_swigconstant(_kalashnikovDB)
OK = _kalashnikovDB.OK

_kalashnikovDB.NOT_OK_swigconstant(_kalashnikovDB)
NOT_OK = _kalashnikovDB.NOT_OK

_kalashnikovDB.COMMIT_swigconstant(_kalashnikovDB)
COMMIT = _kalashnikovDB.COMMIT

_kalashnikovDB.ABORT_swigconstant(_kalashnikovDB)
ABORT = _kalashnikovDB.ABORT

_kalashnikovDB.NEW_ID_swigconstant(_kalashnikovDB)
NEW_ID = _kalashnikovDB.NEW_ID

_kalashnikovDB.MAX_BLOCKS_CURRENTLY_ACCESSED_swigconstant(_kalashnikovDB)
MAX_BLOCKS_CURRENTLY_ACCESSED = _kalashnikovDB.MAX_BLOCKS_CURRENTLY_ACCESSED

_kalashnikovDB.TEST_MODE_ON_swigconstant(_kalashnikovDB)
TEST_MODE_ON = _kalashnikovDB.TEST_MODE_ON

_kalashnikovDB.TEST_MODE_OFF_swigconstant(_kalashnikovDB)
TEST_MODE_OFF = _kalashnikovDB.TEST_MODE_OFF

_kalashnikovDB.SEPARATOR_swigconstant(_kalashnikovDB)
SEPARATOR = _kalashnikovDB.SEPARATOR

_kalashnikovDB.MAX_EXTENTS_IN_SEGMENT_swigconstant(_kalashnikovDB)
MAX_EXTENTS_IN_SEGMENT = _kalashnikovDB.MAX_EXTENTS_IN_SEGMENT

_kalashnikovDB.MAX_REDO_LOG_MEMORY_swigconstant(_kalashnikovDB)
MAX_REDO_LOG_MEMORY = _kalashnikovDB.MAX_REDO_LOG_MEMORY

_kalashnikovDB.MAX_REDO_LOG_ENTRIES_swigconstant(_kalashnikovDB)
MAX_REDO_LOG_ENTRIES = _kalashnikovDB.MAX_REDO_LOG_ENTRIES

def AK_chars_num_from_number(number, base):
    return _kalashnikovDB.AK_chars_num_from_number(number, base)
AK_chars_num_from_number = _kalashnikovDB.AK_chars_num_from_number

def AK_type_size(iDB_type, szVarchar):
    return _kalashnikovDB.AK_type_size(iDB_type, szVarchar)
AK_type_size = _kalashnikovDB.AK_type_size

def AK_strcmp(a, b):
    return _kalashnikovDB.AK_strcmp(a, b)
AK_strcmp = _kalashnikovDB.AK_strcmp

def Ak_Init_L3(L):
    return _kalashnikovDB.Ak_Init_L3(L)
Ak_Init_L3 = _kalashnikovDB.Ak_Init_L3

def Ak_First_L2(L):
    return _kalashnikovDB.Ak_First_L2(L)
Ak_First_L2 = _kalashnikovDB.Ak_First_L2

def Ak_End_L2(L):
    return _kalashnikovDB.Ak_End_L2(L)
Ak_End_L2 = _kalashnikovDB.Ak_End_L2

def Ak_Next_L2(current):
    return _kalashnikovDB.Ak_Next_L2(current)
Ak_Next_L2 = _kalashnikovDB.Ak_Next_L2

def Ak_Previous_L2(current, L):
    return _kalashnikovDB.Ak_Previous_L2(current, L)
Ak_Previous_L2 = _kalashnikovDB.Ak_Previous_L2

def Ak_IsEmpty_L2(L):
    return _kalashnikovDB.Ak_IsEmpty_L2(L)
Ak_IsEmpty_L2 = _kalashnikovDB.Ak_IsEmpty_L2

def Ak_InsertBefore_L2(type, data, size, current, L):
    return _kalashnikovDB.Ak_InsertBefore_L2(type, data, size, current, L)
Ak_InsertBefore_L2 = _kalashnikovDB.Ak_InsertBefore_L2

def Ak_InsertAfter_L2(type, data, size, current, L):
    return _kalashnikovDB.Ak_InsertAfter_L2(type, data, size, current, L)
Ak_InsertAfter_L2 = _kalashnikovDB.Ak_InsertAfter_L2

def Ak_InsertAtBegin_L3(type, data, size, L):
    return _kalashnikovDB.Ak_InsertAtBegin_L3(type, data, size, L)
Ak_InsertAtBegin_L3 = _kalashnikovDB.Ak_InsertAtBegin_L3

def Ak_InsertAtEnd_L3(type, data, size, L):
    return _kalashnikovDB.Ak_InsertAtEnd_L3(type, data, size, L)
Ak_InsertAtEnd_L3 = _kalashnikovDB.Ak_InsertAtEnd_L3

def Ak_Delete_L3(current, L):
    return _kalashnikovDB.Ak_Delete_L3(current, L)
Ak_Delete_L3 = _kalashnikovDB.Ak_Delete_L3

def Ak_DeleteAll_L3(L):
    return _kalashnikovDB.Ak_DeleteAll_L3(L)
Ak_DeleteAll_L3 = _kalashnikovDB.Ak_DeleteAll_L3

def Ak_Size_L2(L):
    return _kalashnikovDB.Ak_Size_L2(L)
Ak_Size_L2 = _kalashnikovDB.Ak_Size_L2

def Ak_Retrieve_L2(current, L):
    return _kalashnikovDB.Ak_Retrieve_L2(current, L)
Ak_Retrieve_L2 = _kalashnikovDB.Ak_Retrieve_L2

def Ak_GetNth_L2(pos, row):
    return _kalashnikovDB.Ak_GetNth_L2(pos, row)
Ak_GetNth_L2 = _kalashnikovDB.Ak_GetNth_L2

def AK_get_array_perms(arr):
    return _kalashnikovDB.AK_get_array_perms(arr)
AK_get_array_perms = _kalashnikovDB.AK_get_array_perms

def AK_search_vertex(id):
    return _kalashnikovDB.AK_search_vertex(id)
AK_search_vertex = _kalashnikovDB.AK_search_vertex

def AK_search_empty_link():
    return _kalashnikovDB.AK_search_empty_link()
AK_search_empty_link = _kalashnikovDB.AK_search_empty_link

def AK_add_vertex(id):
    return _kalashnikovDB.AK_add_vertex(id)
AK_add_vertex = _kalashnikovDB.AK_add_vertex

def AK_add_succesor(succesorId, succesorOf):
    return _kalashnikovDB.AK_add_succesor(succesorId, succesorOf)
AK_add_succesor = _kalashnikovDB.AK_add_succesor

def AK_search_empty_stack_link(stackRoot):
    return _kalashnikovDB.AK_search_empty_stack_link(stackRoot)
AK_search_empty_stack_link = _kalashnikovDB.AK_search_empty_stack_link

def AK_push_to_stack(id):
    return _kalashnikovDB.AK_push_to_stack(id)
AK_push_to_stack = _kalashnikovDB.AK_push_to_stack

def AK_pop_from_stack():
    return _kalashnikovDB.AK_pop_from_stack()
AK_pop_from_stack = _kalashnikovDB.AK_pop_from_stack

def AK_search_in_stack(id):
    return _kalashnikovDB.AK_search_in_stack(id)
AK_search_in_stack = _kalashnikovDB.AK_search_in_stack

def MIN(X, Y):
    return _kalashnikovDB.MIN(X, Y)
MIN = _kalashnikovDB.MIN

def AK_tarjan(id):
    return _kalashnikovDB.AK_tarjan(id)
AK_tarjan = _kalashnikovDB.AK_tarjan

def AK_tarjan_test():
    return _kalashnikovDB.AK_tarjan_test()
AK_tarjan_test = _kalashnikovDB.AK_tarjan_test

def AK_init_critical_section():
    return _kalashnikovDB.AK_init_critical_section()
AK_init_critical_section = _kalashnikovDB.AK_init_critical_section

def AK_destroy_critical_section(info):
    return _kalashnikovDB.AK_destroy_critical_section(info)
AK_destroy_critical_section = _kalashnikovDB.AK_destroy_critical_section

def AK_enter_critical_section(info):
    return _kalashnikovDB.AK_enter_critical_section(info)
AK_enter_critical_section = _kalashnikovDB.AK_enter_critical_section

def AK_leave_critical_section(info):
    return _kalashnikovDB.AK_leave_critical_section(info)
AK_leave_critical_section = _kalashnikovDB.AK_leave_critical_section

_kalashnikovDB.MAX_LOOP_ITERATIONS_swigconstant(_kalashnikovDB)
MAX_LOOP_ITERATIONS = _kalashnikovDB.MAX_LOOP_ITERATIONS
class list_node(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, list_node, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, list_node, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _kalashnikovDB.list_node_type_set
    __swig_getmethods__["type"] = _kalashnikovDB.list_node_type_get
    if _newclass:
        type = _swig_property(_kalashnikovDB.list_node_type_get, _kalashnikovDB.list_node_type_set)
    __swig_setmethods__["size"] = _kalashnikovDB.list_node_size_set
    __swig_getmethods__["size"] = _kalashnikovDB.list_node_size_get
    if _newclass:
        size = _swig_property(_kalashnikovDB.list_node_size_get, _kalashnikovDB.list_node_size_set)
    __swig_setmethods__["data"] = _kalashnikovDB.list_node_data_set
    __swig_getmethods__["data"] = _kalashnikovDB.list_node_data_get
    if _newclass:
        data = _swig_property(_kalashnikovDB.list_node_data_get, _kalashnikovDB.list_node_data_set)
    __swig_setmethods__["table"] = _kalashnikovDB.list_node_table_set
    __swig_getmethods__["table"] = _kalashnikovDB.list_node_table_get
    if _newclass:
        table = _swig_property(_kalashnikovDB.list_node_table_get, _kalashnikovDB.list_node_table_set)
    __swig_setmethods__["attribute_name"] = _kalashnikovDB.list_node_attribute_name_set
    __swig_getmethods__["attribute_name"] = _kalashnikovDB.list_node_attribute_name_get
    if _newclass:
        attribute_name = _swig_property(_kalashnikovDB.list_node_attribute_name_get, _kalashnikovDB.list_node_attribute_name_set)
    __swig_setmethods__["constraint"] = _kalashnikovDB.list_node_constraint_set
    __swig_getmethods__["constraint"] = _kalashnikovDB.list_node_constraint_get
    if _newclass:
        constraint = _swig_property(_kalashnikovDB.list_node_constraint_get, _kalashnikovDB.list_node_constraint_set)
    __swig_setmethods__["next"] = _kalashnikovDB.list_node_next_set
    __swig_getmethods__["next"] = _kalashnikovDB.list_node_next_get
    if _newclass:
        next = _swig_property(_kalashnikovDB.list_node_next_get, _kalashnikovDB.list_node_next_set)

    def __init__(self):
        this = _kalashnikovDB.new_list_node()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _kalashnikovDB.delete_list_node
    __del__ = lambda self: None
list_node_swigregister = _kalashnikovDB.list_node_swigregister
list_node_swigregister(list_node)
cvar = _kalashnikovDB.cvar


_kalashnikovDB.TBL_BOX_OFFSET_swigconstant(_kalashnikovDB)
TBL_BOX_OFFSET = _kalashnikovDB.TBL_BOX_OFFSET
class Vertex(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vertex, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vertex, name)
    __repr__ = _swig_repr
    __swig_setmethods__["vertexId"] = _kalashnikovDB.Vertex_vertexId_set
    __swig_getmethods__["vertexId"] = _kalashnikovDB.Vertex_vertexId_get
    if _newclass:
        vertexId = _swig_property(_kalashnikovDB.Vertex_vertexId_get, _kalashnikovDB.Vertex_vertexId_set)
    __swig_setmethods__["index"] = _kalashnikovDB.Vertex_index_set
    __swig_getmethods__["index"] = _kalashnikovDB.Vertex_index_get
    if _newclass:
        index = _swig_property(_kalashnikovDB.Vertex_index_get, _kalashnikovDB.Vertex_index_set)
    __swig_setmethods__["lowLink"] = _kalashnikovDB.Vertex_lowLink_set
    __swig_getmethods__["lowLink"] = _kalashnikovDB.Vertex_lowLink_get
    if _newclass:
        lowLink = _swig_property(_kalashnikovDB.Vertex_lowLink_get, _kalashnikovDB.Vertex_lowLink_set)
    __swig_setmethods__["nextSuccesor"] = _kalashnikovDB.Vertex_nextSuccesor_set
    __swig_getmethods__["nextSuccesor"] = _kalashnikovDB.Vertex_nextSuccesor_get
    if _newclass:
        nextSuccesor = _swig_property(_kalashnikovDB.Vertex_nextSuccesor_get, _kalashnikovDB.Vertex_nextSuccesor_set)
    __swig_setmethods__["nextVertex"] = _kalashnikovDB.Vertex_nextVertex_set
    __swig_getmethods__["nextVertex"] = _kalashnikovDB.Vertex_nextVertex_get
    if _newclass:
        nextVertex = _swig_property(_kalashnikovDB.Vertex_nextVertex_get, _kalashnikovDB.Vertex_nextVertex_set)

    def __init__(self):
        this = _kalashnikovDB.new_Vertex()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _kalashnikovDB.delete_Vertex
    __del__ = lambda self: None
Vertex_swigregister = _kalashnikovDB.Vertex_swigregister
Vertex_swigregister(Vertex)

class Succesor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Succesor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Succesor, name)
    __repr__ = _swig_repr
    __swig_setmethods__["link"] = _kalashnikovDB.Succesor_link_set
    __swig_getmethods__["link"] = _kalashnikovDB.Succesor_link_get
    if _newclass:
        link = _swig_property(_kalashnikovDB.Succesor_link_get, _kalashnikovDB.Succesor_link_set)
    __swig_setmethods__["nextSuccesor"] = _kalashnikovDB.Succesor_nextSuccesor_set
    __swig_getmethods__["nextSuccesor"] = _kalashnikovDB.Succesor_nextSuccesor_get
    if _newclass:
        nextSuccesor = _swig_property(_kalashnikovDB.Succesor_nextSuccesor_get, _kalashnikovDB.Succesor_nextSuccesor_set)

    def __init__(self):
        this = _kalashnikovDB.new_Succesor()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _kalashnikovDB.delete_Succesor
    __del__ = lambda self: None
Succesor_swigregister = _kalashnikovDB.Succesor_swigregister
Succesor_swigregister(Succesor)

class Stack(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Stack, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Stack, name)
    __repr__ = _swig_repr
    __swig_setmethods__["link"] = _kalashnikovDB.Stack_link_set
    __swig_getmethods__["link"] = _kalashnikovDB.Stack_link_get
    if _newclass:
        link = _swig_property(_kalashnikovDB.Stack_link_get, _kalashnikovDB.Stack_link_set)
    __swig_setmethods__["nextElement"] = _kalashnikovDB.Stack_nextElement_set
    __swig_getmethods__["nextElement"] = _kalashnikovDB.Stack_nextElement_get
    if _newclass:
        nextElement = _swig_property(_kalashnikovDB.Stack_nextElement_get, _kalashnikovDB.Stack_nextElement_set)

    def __init__(self):
        this = _kalashnikovDB.new_Stack()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _kalashnikovDB.delete_Stack
    __del__ = lambda self: None
Stack_swigregister = _kalashnikovDB.Stack_swigregister
Stack_swigregister(Stack)

class AK_synchronization_info(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AK_synchronization_info, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AK_synchronization_info, name)
    __repr__ = _swig_repr
    __swig_setmethods__["init"] = _kalashnikovDB.AK_synchronization_info_init_set
    __swig_getmethods__["init"] = _kalashnikovDB.AK_synchronization_info_init_get
    if _newclass:
        init = _swig_property(_kalashnikovDB.AK_synchronization_info_init_get, _kalashnikovDB.AK_synchronization_info_init_set)
    __swig_setmethods__["ready"] = _kalashnikovDB.AK_synchronization_info_ready_set
    __swig_getmethods__["ready"] = _kalashnikovDB.AK_synchronization_info_ready_get
    if _newclass:
        ready = _swig_property(_kalashnikovDB.AK_synchronization_info_ready_get, _kalashnikovDB.AK_synchronization_info_ready_set)

    def __init__(self):
        this = _kalashnikovDB.new_AK_synchronization_info()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _kalashnikovDB.delete_AK_synchronization_info
    __del__ = lambda self: None
AK_synchronization_info_swigregister = _kalashnikovDB.AK_synchronization_info_swigregister
AK_synchronization_info_swigregister(AK_synchronization_info)

class AK_header(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AK_header, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AK_header, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _kalashnikovDB.AK_header_type_set
    __swig_getmethods__["type"] = _kalashnikovDB.AK_header_type_get
    if _newclass:
        type = _swig_property(_kalashnikovDB.AK_header_type_get, _kalashnikovDB.AK_header_type_set)
    __swig_setmethods__["att_name"] = _kalashnikovDB.AK_header_att_name_set
    __swig_getmethods__["att_name"] = _kalashnikovDB.AK_header_att_name_get
    if _newclass:
        att_name = _swig_property(_kalashnikovDB.AK_header_att_name_get, _kalashnikovDB.AK_header_att_name_set)
    __swig_setmethods__["integrity"] = _kalashnikovDB.AK_header_integrity_set
    __swig_getmethods__["integrity"] = _kalashnikovDB.AK_header_integrity_get
    if _newclass:
        integrity = _swig_property(_kalashnikovDB.AK_header_integrity_get, _kalashnikovDB.AK_header_integrity_set)
    __swig_setmethods__["constr_name"] = _kalashnikovDB.AK_header_constr_name_set
    __swig_getmethods__["constr_name"] = _kalashnikovDB.AK_header_constr_name_get
    if _newclass:
        constr_name = _swig_property(_kalashnikovDB.AK_header_constr_name_get, _kalashnikovDB.AK_header_constr_name_set)
    __swig_setmethods__["constr_code"] = _kalashnikovDB.AK_header_constr_code_set
    __swig_getmethods__["constr_code"] = _kalashnikovDB.AK_header_constr_code_get
    if _newclass:
        constr_code = _swig_property(_kalashnikovDB.AK_header_constr_code_get, _kalashnikovDB.AK_header_constr_code_set)

    def __init__(self):
        this = _kalashnikovDB.new_AK_header()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _kalashnikovDB.delete_AK_header
    __del__ = lambda self: None
AK_header_swigregister = _kalashnikovDB.AK_header_swigregister
AK_header_swigregister(AK_header)

class AK_tuple_dict(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AK_tuple_dict, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AK_tuple_dict, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _kalashnikovDB.AK_tuple_dict_type_set
    __swig_getmethods__["type"] = _kalashnikovDB.AK_tuple_dict_type_get
    if _newclass:
        type = _swig_property(_kalashnikovDB.AK_tuple_dict_type_get, _kalashnikovDB.AK_tuple_dict_type_set)
    __swig_setmethods__["address"] = _kalashnikovDB.AK_tuple_dict_address_set
    __swig_getmethods__["address"] = _kalashnikovDB.AK_tuple_dict_address_get
    if _newclass:
        address = _swig_property(_kalashnikovDB.AK_tuple_dict_address_get, _kalashnikovDB.AK_tuple_dict_address_set)
    __swig_setmethods__["size"] = _kalashnikovDB.AK_tuple_dict_size_set
    __swig_getmethods__["size"] = _kalashnikovDB.AK_tuple_dict_size_get
    if _newclass:
        size = _swig_property(_kalashnikovDB.AK_tuple_dict_size_get, _kalashnikovDB.AK_tuple_dict_size_set)

    def __init__(self):
        this = _kalashnikovDB.new_AK_tuple_dict()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _kalashnikovDB.delete_AK_tuple_dict
    __del__ = lambda self: None
AK_tuple_dict_swigregister = _kalashnikovDB.AK_tuple_dict_swigregister
AK_tuple_dict_swigregister(AK_tuple_dict)

class AK_block(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AK_block, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AK_block, name)
    __repr__ = _swig_repr
    __swig_setmethods__["address"] = _kalashnikovDB.AK_block_address_set
    __swig_getmethods__["address"] = _kalashnikovDB.AK_block_address_get
    if _newclass:
        address = _swig_property(_kalashnikovDB.AK_block_address_get, _kalashnikovDB.AK_block_address_set)
    __swig_setmethods__["type"] = _kalashnikovDB.AK_block_type_set
    __swig_getmethods__["type"] = _kalashnikovDB.AK_block_type_get
    if _newclass:
        type = _swig_property(_kalashnikovDB.AK_block_type_get, _kalashnikovDB.AK_block_type_set)
    __swig_setmethods__["chained_with"] = _kalashnikovDB.AK_block_chained_with_set
    __swig_getmethods__["chained_with"] = _kalashnikovDB.AK_block_chained_with_get
    if _newclass:
        chained_with = _swig_property(_kalashnikovDB.AK_block_chained_with_get, _kalashnikovDB.AK_block_chained_with_set)
    __swig_setmethods__["AK_free_space"] = _kalashnikovDB.AK_block_AK_free_space_set
    __swig_getmethods__["AK_free_space"] = _kalashnikovDB.AK_block_AK_free_space_get
    if _newclass:
        AK_free_space = _swig_property(_kalashnikovDB.AK_block_AK_free_space_get, _kalashnikovDB.AK_block_AK_free_space_set)
    __swig_setmethods__["last_tuple_dict_id"] = _kalashnikovDB.AK_block_last_tuple_dict_id_set
    __swig_getmethods__["last_tuple_dict_id"] = _kalashnikovDB.AK_block_last_tuple_dict_id_get
    if _newclass:
        last_tuple_dict_id = _swig_property(_kalashnikovDB.AK_block_last_tuple_dict_id_get, _kalashnikovDB.AK_block_last_tuple_dict_id_set)
    __swig_setmethods__["header"] = _kalashnikovDB.AK_block_header_set
    __swig_getmethods__["header"] = _kalashnikovDB.AK_block_header_get
    if _newclass:
        header = _swig_property(_kalashnikovDB.AK_block_header_get, _kalashnikovDB.AK_block_header_set)
    __swig_setmethods__["tuple_dict"] = _kalashnikovDB.AK_block_tuple_dict_set
    __swig_getmethods__["tuple_dict"] = _kalashnikovDB.AK_block_tuple_dict_get
    if _newclass:
        tuple_dict = _swig_property(_kalashnikovDB.AK_block_tuple_dict_get, _kalashnikovDB.AK_block_tuple_dict_set)
    __swig_setmethods__["data"] = _kalashnikovDB.AK_block_data_set
    __swig_getmethods__["data"] = _kalashnikovDB.AK_block_data_get
    if _newclass:
        data = _swig_property(_kalashnikovDB.AK_block_data_get, _kalashnikovDB.AK_block_data_set)

    def __init__(self):
        this = _kalashnikovDB.new_AK_block()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _kalashnikovDB.delete_AK_block
    __del__ = lambda self: None
AK_block_swigregister = _kalashnikovDB.AK_block_swigregister
AK_block_swigregister(AK_block)

class table_addresses(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, table_addresses, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, table_addresses, name)
    __repr__ = _swig_repr
    __swig_setmethods__["address_from"] = _kalashnikovDB.table_addresses_address_from_set
    __swig_getmethods__["address_from"] = _kalashnikovDB.table_addresses_address_from_get
    if _newclass:
        address_from = _swig_property(_kalashnikovDB.table_addresses_address_from_get, _kalashnikovDB.table_addresses_address_from_set)
    __swig_setmethods__["address_to"] = _kalashnikovDB.table_addresses_address_to_set
    __swig_getmethods__["address_to"] = _kalashnikovDB.table_addresses_address_to_get
    if _newclass:
        address_to = _swig_property(_kalashnikovDB.table_addresses_address_to_get, _kalashnikovDB.table_addresses_address_to_set)

    def __init__(self):
        this = _kalashnikovDB.new_table_addresses()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _kalashnikovDB.delete_table_addresses
    __del__ = lambda self: None
table_addresses_swigregister = _kalashnikovDB.table_addresses_swigregister
table_addresses_swigregister(table_addresses)


_kalashnikovDB.DB_FILE_SIZE_EX_swigconstant(_kalashnikovDB)
DB_FILE_SIZE_EX = _kalashnikovDB.DB_FILE_SIZE_EX
class AK_blocktable(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AK_blocktable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AK_blocktable, name)
    __repr__ = _swig_repr
    __swig_setmethods__["allocationtable"] = _kalashnikovDB.AK_blocktable_allocationtable_set
    __swig_getmethods__["allocationtable"] = _kalashnikovDB.AK_blocktable_allocationtable_get
    if _newclass:
        allocationtable = _swig_property(_kalashnikovDB.AK_blocktable_allocationtable_get, _kalashnikovDB.AK_blocktable_allocationtable_set)
    __swig_setmethods__["bittable"] = _kalashnikovDB.AK_blocktable_bittable_set
    __swig_getmethods__["bittable"] = _kalashnikovDB.AK_blocktable_bittable_get
    if _newclass:
        bittable = _swig_property(_kalashnikovDB.AK_blocktable_bittable_get, _kalashnikovDB.AK_blocktable_bittable_set)
    __swig_setmethods__["last_allocated"] = _kalashnikovDB.AK_blocktable_last_allocated_set
    __swig_getmethods__["last_allocated"] = _kalashnikovDB.AK_blocktable_last_allocated_get
    if _newclass:
        last_allocated = _swig_property(_kalashnikovDB.AK_blocktable_last_allocated_get, _kalashnikovDB.AK_blocktable_last_allocated_set)
    __swig_setmethods__["last_initialized"] = _kalashnikovDB.AK_blocktable_last_initialized_set
    __swig_getmethods__["last_initialized"] = _kalashnikovDB.AK_blocktable_last_initialized_get
    if _newclass:
        last_initialized = _swig_property(_kalashnikovDB.AK_blocktable_last_initialized_get, _kalashnikovDB.AK_blocktable_last_initialized_set)
    __swig_setmethods__["prepared"] = _kalashnikovDB.AK_blocktable_prepared_set
    __swig_getmethods__["prepared"] = _kalashnikovDB.AK_blocktable_prepared_get
    if _newclass:
        prepared = _swig_property(_kalashnikovDB.AK_blocktable_prepared_get, _kalashnikovDB.AK_blocktable_prepared_set)
    __swig_setmethods__["ltime"] = _kalashnikovDB.AK_blocktable_ltime_set
    __swig_getmethods__["ltime"] = _kalashnikovDB.AK_blocktable_ltime_get
    if _newclass:
        ltime = _swig_property(_kalashnikovDB.AK_blocktable_ltime_get, _kalashnikovDB.AK_blocktable_ltime_set)

    def __init__(self):
        this = _kalashnikovDB.new_AK_blocktable()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _kalashnikovDB.delete_AK_blocktable
    __del__ = lambda self: None
AK_blocktable_swigregister = _kalashnikovDB.AK_blocktable_swigregister
AK_blocktable_swigregister(AK_blocktable)


_kalashnikovDB.CHAR_IN_LINE_swigconstant(_kalashnikovDB)
CHAR_IN_LINE = _kalashnikovDB.CHAR_IN_LINE

_kalashnikovDB.MAX_BLOCK_INIT_NUM_swigconstant(_kalashnikovDB)
MAX_BLOCK_INIT_NUM = _kalashnikovDB.MAX_BLOCK_INIT_NUM

_kalashnikovDB.allocationSEQUENCE_swigconstant(_kalashnikovDB)
allocationSEQUENCE = _kalashnikovDB.allocationSEQUENCE

_kalashnikovDB.allocationUPPER_swigconstant(_kalashnikovDB)
allocationUPPER = _kalashnikovDB.allocationUPPER

_kalashnikovDB.allocationLOWER_swigconstant(_kalashnikovDB)
allocationLOWER = _kalashnikovDB.allocationLOWER

_kalashnikovDB.allocationAROUND_swigconstant(_kalashnikovDB)
allocationAROUND = _kalashnikovDB.allocationAROUND

_kalashnikovDB.allocationNOMODE_swigconstant(_kalashnikovDB)
allocationNOMODE = _kalashnikovDB.allocationNOMODE
class AK_block_activity(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AK_block_activity, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AK_block_activity, name)
    __repr__ = _swig_repr
    __swig_setmethods__["locked_for_reading"] = _kalashnikovDB.AK_block_activity_locked_for_reading_set
    __swig_getmethods__["locked_for_reading"] = _kalashnikovDB.AK_block_activity_locked_for_reading_get
    if _newclass:
        locked_for_reading = _swig_property(_kalashnikovDB.AK_block_activity_locked_for_reading_get, _kalashnikovDB.AK_block_activity_locked_for_reading_set)
    __swig_setmethods__["locked_for_writing"] = _kalashnikovDB.AK_block_activity_locked_for_writing_set
    __swig_getmethods__["locked_for_writing"] = _kalashnikovDB.AK_block_activity_locked_for_writing_get
    if _newclass:
        locked_for_writing = _swig_property(_kalashnikovDB.AK_block_activity_locked_for_writing_get, _kalashnikovDB.AK_block_activity_locked_for_writing_set)
    __swig_setmethods__["block_lock"] = _kalashnikovDB.AK_block_activity_block_lock_set
    __swig_getmethods__["block_lock"] = _kalashnikovDB.AK_block_activity_block_lock_get
    if _newclass:
        block_lock = _swig_property(_kalashnikovDB.AK_block_activity_block_lock_get, _kalashnikovDB.AK_block_activity_block_lock_set)
    __swig_setmethods__["writing_done"] = _kalashnikovDB.AK_block_activity_writing_done_set
    __swig_getmethods__["writing_done"] = _kalashnikovDB.AK_block_activity_writing_done_get
    if _newclass:
        writing_done = _swig_property(_kalashnikovDB.AK_block_activity_writing_done_get, _kalashnikovDB.AK_block_activity_writing_done_set)
    __swig_setmethods__["reading_done"] = _kalashnikovDB.AK_block_activity_reading_done_set
    __swig_getmethods__["reading_done"] = _kalashnikovDB.AK_block_activity_reading_done_get
    if _newclass:
        reading_done = _swig_property(_kalashnikovDB.AK_block_activity_reading_done_get, _kalashnikovDB.AK_block_activity_reading_done_set)
    __swig_setmethods__["thread_holding_lock"] = _kalashnikovDB.AK_block_activity_thread_holding_lock_set
    __swig_getmethods__["thread_holding_lock"] = _kalashnikovDB.AK_block_activity_thread_holding_lock_get
    if _newclass:
        thread_holding_lock = _swig_property(_kalashnikovDB.AK_block_activity_thread_holding_lock_get, _kalashnikovDB.AK_block_activity_thread_holding_lock_set)

    def __init__(self):
        this = _kalashnikovDB.new_AK_block_activity()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _kalashnikovDB.delete_AK_block_activity
    __del__ = lambda self: None
AK_block_activity_swigregister = _kalashnikovDB.AK_block_activity_swigregister
AK_block_activity_swigregister(AK_block_activity)


def AK_print_block(block, num, gg, fpp):
    return _kalashnikovDB.AK_print_block(block, num, gg, fpp)
AK_print_block = _kalashnikovDB.AK_print_block

def AK_allocationbit_test():
    return _kalashnikovDB.AK_allocationbit_test()
AK_allocationbit_test = _kalashnikovDB.AK_allocationbit_test

def AK_allocationtable_test():
    return _kalashnikovDB.AK_allocationtable_test()
AK_allocationtable_test = _kalashnikovDB.AK_allocationtable_test

def AK_increase_extent(start_address, add_size, mode, border, target, header, gl):
    return _kalashnikovDB.AK_increase_extent(start_address, add_size, mode, border, target, header, gl)
AK_increase_extent = _kalashnikovDB.AK_increase_extent

def AK_get_extent(start_address, desired_size, mode, border, target, header, gl):
    return _kalashnikovDB.AK_get_extent(start_address, desired_size, mode, border, target, header, gl)
AK_get_extent = _kalashnikovDB.AK_get_extent

def AK_get_allocation_set(bitsetbs, fromWhere, gaplength, num, mode, target):
    return _kalashnikovDB.AK_get_allocation_set(bitsetbs, fromWhere, gaplength, num, mode, target)
AK_get_allocation_set = _kalashnikovDB.AK_get_allocation_set

def AK_copy_header(header, blocknum, num):
    return _kalashnikovDB.AK_copy_header(header, blocknum, num)
AK_copy_header = _kalashnikovDB.AK_copy_header

def AK_allocate_blocks(db, block, FromWhere, HowMany):
    return _kalashnikovDB.AK_allocate_blocks(db, block, FromWhere, HowMany)
AK_allocate_blocks = _kalashnikovDB.AK_allocate_blocks

def AK_init_block():
    return _kalashnikovDB.AK_init_block()
AK_init_block = _kalashnikovDB.AK_init_block

def AK_allocationtable_dump(zz):
    return _kalashnikovDB.AK_allocationtable_dump(zz)
AK_allocationtable_dump = _kalashnikovDB.AK_allocationtable_dump

def AK_blocktable_dump(zz):
    return _kalashnikovDB.AK_blocktable_dump(zz)
AK_blocktable_dump = _kalashnikovDB.AK_blocktable_dump

def AK_blocktable_flush():
    return _kalashnikovDB.AK_blocktable_flush()
AK_blocktable_flush = _kalashnikovDB.AK_blocktable_flush

def AK_thread_safe_block_access_test():
    return _kalashnikovDB.AK_thread_safe_block_access_test()
AK_thread_safe_block_access_test = _kalashnikovDB.AK_thread_safe_block_access_test

def AK_read_block_for_testing(address):
    return _kalashnikovDB.AK_read_block_for_testing(address)
AK_read_block_for_testing = _kalashnikovDB.AK_read_block_for_testing

def AK_write_block_for_testing(block):
    return _kalashnikovDB.AK_write_block_for_testing(block)
AK_write_block_for_testing = _kalashnikovDB.AK_write_block_for_testing

def AK_blocktable_get():
    return _kalashnikovDB.AK_blocktable_get()
AK_blocktable_get = _kalashnikovDB.AK_blocktable_get

def fsize(fp):
    return _kalashnikovDB.fsize(fp)
fsize = _kalashnikovDB.fsize

def AK_init_allocation_table():
    return _kalashnikovDB.AK_init_allocation_table()
AK_init_allocation_table = _kalashnikovDB.AK_init_allocation_table

def AK_init_db_file(size):
    return _kalashnikovDB.AK_init_db_file(size)
AK_init_db_file = _kalashnikovDB.AK_init_db_file

def AK_read_block(address):
    return _kalashnikovDB.AK_read_block(address)
AK_read_block = _kalashnikovDB.AK_read_block

def AK_write_block(block):
    return _kalashnikovDB.AK_write_block(block)
AK_write_block = _kalashnikovDB.AK_write_block

def AK_new_extent(start_address, old_size, extent_type, header):
    return _kalashnikovDB.AK_new_extent(start_address, old_size, extent_type, header)
AK_new_extent = _kalashnikovDB.AK_new_extent

def AK_new_segment(name, type, header):
    return _kalashnikovDB.AK_new_segment(name, type, header)
AK_new_segment = _kalashnikovDB.AK_new_segment

def AK_create_header(name, type, integrity, constr_name, contr_code):
    return _kalashnikovDB.AK_create_header(name, type, integrity, constr_name, contr_code)
AK_create_header = _kalashnikovDB.AK_create_header

def AK_insert_entry(block_address, type, entry_data, i):
    return _kalashnikovDB.AK_insert_entry(block_address, type, entry_data, i)
AK_insert_entry = _kalashnikovDB.AK_insert_entry

def AK_init_system_tables_catalog(relation, attribute, index, view, sequence, function, function_arguments, trigger, trigger_conditions, db, db_obj, user, group, user_group, user_right, group_right, constraint, constraintNull, constraintUnique, reference):
    return _kalashnikovDB.AK_init_system_tables_catalog(relation, attribute, index, view, sequence, function, function_arguments, trigger, trigger_conditions, db, db_obj, user, group, user_group, user_right, group_right, constraint, constraintNull, constraintUnique, reference)
AK_init_system_tables_catalog = _kalashnikovDB.AK_init_system_tables_catalog

def AK_memset_int(block, value, num):
    return _kalashnikovDB.AK_memset_int(block, value, num)
AK_memset_int = _kalashnikovDB.AK_memset_int

def AK_register_system_tables(relation, attribute, index, view, sequence, function, function_arguments, trigger, trigger_conditions, db, db_obj, user, group, user_group, user_right, group_right, constraint, constraintNull, constraintUnique, reference):
    return _kalashnikovDB.AK_register_system_tables(relation, attribute, index, view, sequence, function, function_arguments, trigger, trigger_conditions, db, db_obj, user, group, user_group, user_right, group_right, constraint, constraintNull, constraintUnique, reference)
AK_register_system_tables = _kalashnikovDB.AK_register_system_tables

def AK_init_system_catalog():
    return _kalashnikovDB.AK_init_system_catalog()
AK_init_system_catalog = _kalashnikovDB.AK_init_system_catalog

def AK_delete_block(address):
    return _kalashnikovDB.AK_delete_block(address)
AK_delete_block = _kalashnikovDB.AK_delete_block

def AK_delete_extent(begin, end):
    return _kalashnikovDB.AK_delete_extent(begin, end)
AK_delete_extent = _kalashnikovDB.AK_delete_extent

def AK_delete_segment(name, type):
    return _kalashnikovDB.AK_delete_segment(name, type)
AK_delete_segment = _kalashnikovDB.AK_delete_segment

def AK_init_disk_manager():
    return _kalashnikovDB.AK_init_disk_manager()
AK_init_disk_manager = _kalashnikovDB.AK_init_disk_manager

def AK_allocate_block_activity_modes():
    return _kalashnikovDB.AK_allocate_block_activity_modes()
AK_allocate_block_activity_modes = _kalashnikovDB.AK_allocate_block_activity_modes

def AK_get_segment_addresses(segmentName):
    return _kalashnikovDB.AK_get_segment_addresses(segmentName)
AK_get_segment_addresses = _kalashnikovDB.AK_get_segment_addresses

def AK_cache_block(num, mem_block):
    return _kalashnikovDB.AK_cache_block(num, mem_block)
AK_cache_block = _kalashnikovDB.AK_cache_block

def AK_cache_AK_malloc():
    return _kalashnikovDB.AK_cache_AK_malloc()
AK_cache_AK_malloc = _kalashnikovDB.AK_cache_AK_malloc

def AK_redo_log_AK_malloc():
    return _kalashnikovDB.AK_redo_log_AK_malloc()
AK_redo_log_AK_malloc = _kalashnikovDB.AK_redo_log_AK_malloc

def AK_find_available_result_block():
    return _kalashnikovDB.AK_find_available_result_block()
AK_find_available_result_block = _kalashnikovDB.AK_find_available_result_block

def AK_generate_result_id(str):
    return _kalashnikovDB.AK_generate_result_id(str)
AK_generate_result_id = _kalashnikovDB.AK_generate_result_id

def AK_cache_result(srcTable, temp_block, header):
    return _kalashnikovDB.AK_cache_result(srcTable, temp_block, header)
AK_cache_result = _kalashnikovDB.AK_cache_result

def AK_query_mem_AK_malloc():
    return _kalashnikovDB.AK_query_mem_AK_malloc()
AK_query_mem_AK_malloc = _kalashnikovDB.AK_query_mem_AK_malloc

def AK_memoman_init():
    return _kalashnikovDB.AK_memoman_init()
AK_memoman_init = _kalashnikovDB.AK_memoman_init

def AK_get_block(num):
    return _kalashnikovDB.AK_get_block(num)
AK_get_block = _kalashnikovDB.AK_get_block

def AK_mem_block_modify(mem_block, dirty):
    return _kalashnikovDB.AK_mem_block_modify(mem_block, dirty)
AK_mem_block_modify = _kalashnikovDB.AK_mem_block_modify

def AK_refresh_cache():
    return _kalashnikovDB.AK_refresh_cache()
AK_refresh_cache = _kalashnikovDB.AK_refresh_cache

def AK_get_index_segment_addresses(segmentName):
    return _kalashnikovDB.AK_get_index_segment_addresses(segmentName)
AK_get_index_segment_addresses = _kalashnikovDB.AK_get_index_segment_addresses

def AK_get_table_addresses(table):
    return _kalashnikovDB.AK_get_table_addresses(table)
AK_get_table_addresses = _kalashnikovDB.AK_get_table_addresses

def AK_get_index_addresses(index):
    return _kalashnikovDB.AK_get_index_addresses(index)
AK_get_index_addresses = _kalashnikovDB.AK_get_index_addresses

def AK_find_AK_free_space(addresses):
    return _kalashnikovDB.AK_find_AK_free_space(addresses)
AK_find_AK_free_space = _kalashnikovDB.AK_find_AK_free_space

def AK_init_new_extent(table_name, extent_type):
    return _kalashnikovDB.AK_init_new_extent(table_name, extent_type)
AK_init_new_extent = _kalashnikovDB.AK_init_new_extent

def AK_flush_cache():
    return _kalashnikovDB.AK_flush_cache()
AK_flush_cache = _kalashnikovDB.AK_flush_cache

def AK_memoman_test():
    return _kalashnikovDB.AK_memoman_test()
AK_memoman_test = _kalashnikovDB.AK_memoman_test

def AK_memoman_test2():
    return _kalashnikovDB.AK_memoman_test2()
AK_memoman_test2 = _kalashnikovDB.AK_memoman_test2
class AK_mem_block(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AK_mem_block, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AK_mem_block, name)
    __repr__ = _swig_repr
    __swig_setmethods__["block"] = _kalashnikovDB.AK_mem_block_block_set
    __swig_getmethods__["block"] = _kalashnikovDB.AK_mem_block_block_get
    if _newclass:
        block = _swig_property(_kalashnikovDB.AK_mem_block_block_get, _kalashnikovDB.AK_mem_block_block_set)
    __swig_setmethods__["dirty"] = _kalashnikovDB.AK_mem_block_dirty_set
    __swig_getmethods__["dirty"] = _kalashnikovDB.AK_mem_block_dirty_get
    if _newclass:
        dirty = _swig_property(_kalashnikovDB.AK_mem_block_dirty_get, _kalashnikovDB.AK_mem_block_dirty_set)
    __swig_setmethods__["timestamp_read"] = _kalashnikovDB.AK_mem_block_timestamp_read_set
    __swig_getmethods__["timestamp_read"] = _kalashnikovDB.AK_mem_block_timestamp_read_get
    if _newclass:
        timestamp_read = _swig_property(_kalashnikovDB.AK_mem_block_timestamp_read_get, _kalashnikovDB.AK_mem_block_timestamp_read_set)
    __swig_setmethods__["timestamp_last_change"] = _kalashnikovDB.AK_mem_block_timestamp_last_change_set
    __swig_getmethods__["timestamp_last_change"] = _kalashnikovDB.AK_mem_block_timestamp_last_change_get
    if _newclass:
        timestamp_last_change = _swig_property(_kalashnikovDB.AK_mem_block_timestamp_last_change_get, _kalashnikovDB.AK_mem_block_timestamp_last_change_set)

    def __init__(self):
        this = _kalashnikovDB.new_AK_mem_block()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _kalashnikovDB.delete_AK_mem_block
    __del__ = lambda self: None
AK_mem_block_swigregister = _kalashnikovDB.AK_mem_block_swigregister
AK_mem_block_swigregister(AK_mem_block)

class AK_db_cache(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AK_db_cache, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AK_db_cache, name)
    __repr__ = _swig_repr
    __swig_setmethods__["cache"] = _kalashnikovDB.AK_db_cache_cache_set
    __swig_getmethods__["cache"] = _kalashnikovDB.AK_db_cache_cache_get
    if _newclass:
        cache = _swig_property(_kalashnikovDB.AK_db_cache_cache_get, _kalashnikovDB.AK_db_cache_cache_set)
    __swig_setmethods__["next_replace"] = _kalashnikovDB.AK_db_cache_next_replace_set
    __swig_getmethods__["next_replace"] = _kalashnikovDB.AK_db_cache_next_replace_get
    if _newclass:
        next_replace = _swig_property(_kalashnikovDB.AK_db_cache_next_replace_get, _kalashnikovDB.AK_db_cache_next_replace_set)

    def __init__(self):
        this = _kalashnikovDB.new_AK_db_cache()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _kalashnikovDB.delete_AK_db_cache
    __del__ = lambda self: None
AK_db_cache_swigregister = _kalashnikovDB.AK_db_cache_swigregister
AK_db_cache_swigregister(AK_db_cache)

class AK_redo_log(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AK_redo_log, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AK_redo_log, name)
    __repr__ = _swig_repr
    __swig_setmethods__["table_name"] = _kalashnikovDB.AK_redo_log_table_name_set
    __swig_getmethods__["table_name"] = _kalashnikovDB.AK_redo_log_table_name_get
    if _newclass:
        table_name = _swig_property(_kalashnikovDB.AK_redo_log_table_name_get, _kalashnikovDB.AK_redo_log_table_name_set)
    __swig_setmethods__["command"] = _kalashnikovDB.AK_redo_log_command_set
    __swig_getmethods__["command"] = _kalashnikovDB.AK_redo_log_command_get
    if _newclass:
        command = _swig_property(_kalashnikovDB.AK_redo_log_command_get, _kalashnikovDB.AK_redo_log_command_set)
    __swig_setmethods__["attributes"] = _kalashnikovDB.AK_redo_log_attributes_set
    __swig_getmethods__["attributes"] = _kalashnikovDB.AK_redo_log_attributes_get
    if _newclass:
        attributes = _swig_property(_kalashnikovDB.AK_redo_log_attributes_get, _kalashnikovDB.AK_redo_log_attributes_set)
    __swig_setmethods__["number"] = _kalashnikovDB.AK_redo_log_number_set
    __swig_getmethods__["number"] = _kalashnikovDB.AK_redo_log_number_get
    if _newclass:
        number = _swig_property(_kalashnikovDB.AK_redo_log_number_get, _kalashnikovDB.AK_redo_log_number_set)

    def __init__(self):
        this = _kalashnikovDB.new_AK_redo_log()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _kalashnikovDB.delete_AK_redo_log
    __del__ = lambda self: None
AK_redo_log_swigregister = _kalashnikovDB.AK_redo_log_swigregister
AK_redo_log_swigregister(AK_redo_log)

class AK_query_mem_lib(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AK_query_mem_lib, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AK_query_mem_lib, name)
    __repr__ = _swig_repr
    __swig_setmethods__["parsed"] = _kalashnikovDB.AK_query_mem_lib_parsed_set
    __swig_getmethods__["parsed"] = _kalashnikovDB.AK_query_mem_lib_parsed_get
    if _newclass:
        parsed = _swig_property(_kalashnikovDB.AK_query_mem_lib_parsed_get, _kalashnikovDB.AK_query_mem_lib_parsed_set)
    __swig_setmethods__["next_replace"] = _kalashnikovDB.AK_query_mem_lib_next_replace_set
    __swig_getmethods__["next_replace"] = _kalashnikovDB.AK_query_mem_lib_next_replace_get
    if _newclass:
        next_replace = _swig_property(_kalashnikovDB.AK_query_mem_lib_next_replace_get, _kalashnikovDB.AK_query_mem_lib_next_replace_set)

    def __init__(self):
        this = _kalashnikovDB.new_AK_query_mem_lib()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _kalashnikovDB.delete_AK_query_mem_lib
    __del__ = lambda self: None
AK_query_mem_lib_swigregister = _kalashnikovDB.AK_query_mem_lib_swigregister
AK_query_mem_lib_swigregister(AK_query_mem_lib)

class AK_query_mem_dict(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AK_query_mem_dict, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AK_query_mem_dict, name)
    __repr__ = _swig_repr
    __swig_setmethods__["dictionary"] = _kalashnikovDB.AK_query_mem_dict_dictionary_set
    __swig_getmethods__["dictionary"] = _kalashnikovDB.AK_query_mem_dict_dictionary_get
    if _newclass:
        dictionary = _swig_property(_kalashnikovDB.AK_query_mem_dict_dictionary_get, _kalashnikovDB.AK_query_mem_dict_dictionary_set)
    __swig_setmethods__["next_replace"] = _kalashnikovDB.AK_query_mem_dict_next_replace_set
    __swig_getmethods__["next_replace"] = _kalashnikovDB.AK_query_mem_dict_next_replace_get
    if _newclass:
        next_replace = _swig_property(_kalashnikovDB.AK_query_mem_dict_next_replace_get, _kalashnikovDB.AK_query_mem_dict_next_replace_set)

    def __init__(self):
        this = _kalashnikovDB.new_AK_query_mem_dict()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _kalashnikovDB.delete_AK_query_mem_dict
    __del__ = lambda self: None
AK_query_mem_dict_swigregister = _kalashnikovDB.AK_query_mem_dict_swigregister
AK_query_mem_dict_swigregister(AK_query_mem_dict)

class AK_results(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AK_results, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AK_results, name)
    __repr__ = _swig_repr
    __swig_setmethods__["result_id"] = _kalashnikovDB.AK_results_result_id_set
    __swig_getmethods__["result_id"] = _kalashnikovDB.AK_results_result_id_get
    if _newclass:
        result_id = _swig_property(_kalashnikovDB.AK_results_result_id_get, _kalashnikovDB.AK_results_result_id_set)
    __swig_setmethods__["result_size"] = _kalashnikovDB.AK_results_result_size_set
    __swig_getmethods__["result_size"] = _kalashnikovDB.AK_results_result_size_get
    if _newclass:
        result_size = _swig_property(_kalashnikovDB.AK_results_result_size_get, _kalashnikovDB.AK_results_result_size_set)
    __swig_setmethods__["date_created"] = _kalashnikovDB.AK_results_date_created_set
    __swig_getmethods__["date_created"] = _kalashnikovDB.AK_results_date_created_get
    if _newclass:
        date_created = _swig_property(_kalashnikovDB.AK_results_date_created_get, _kalashnikovDB.AK_results_date_created_set)
    __swig_setmethods__["free"] = _kalashnikovDB.AK_results_free_set
    __swig_getmethods__["free"] = _kalashnikovDB.AK_results_free_get
    if _newclass:
        free = _swig_property(_kalashnikovDB.AK_results_free_get, _kalashnikovDB.AK_results_free_set)
    __swig_setmethods__["source_table"] = _kalashnikovDB.AK_results_source_table_set
    __swig_getmethods__["source_table"] = _kalashnikovDB.AK_results_source_table_get
    if _newclass:
        source_table = _swig_property(_kalashnikovDB.AK_results_source_table_get, _kalashnikovDB.AK_results_source_table_set)
    __swig_setmethods__["result_block"] = _kalashnikovDB.AK_results_result_block_set
    __swig_getmethods__["result_block"] = _kalashnikovDB.AK_results_result_block_get
    if _newclass:
        result_block = _swig_property(_kalashnikovDB.AK_results_result_block_get, _kalashnikovDB.AK_results_result_block_set)
    __swig_setmethods__["header"] = _kalashnikovDB.AK_results_header_set
    __swig_getmethods__["header"] = _kalashnikovDB.AK_results_header_get
    if _newclass:
        header = _swig_property(_kalashnikovDB.AK_results_header_get, _kalashnikovDB.AK_results_header_set)

    def __init__(self):
        this = _kalashnikovDB.new_AK_results()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _kalashnikovDB.delete_AK_results
    __del__ = lambda self: None
AK_results_swigregister = _kalashnikovDB.AK_results_swigregister
AK_results_swigregister(AK_results)

class AK_query_mem_result(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AK_query_mem_result, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AK_query_mem_result, name)
    __repr__ = _swig_repr
    __swig_setmethods__["results"] = _kalashnikovDB.AK_query_mem_result_results_set
    __swig_getmethods__["results"] = _kalashnikovDB.AK_query_mem_result_results_get
    if _newclass:
        results = _swig_property(_kalashnikovDB.AK_query_mem_result_results_get, _kalashnikovDB.AK_query_mem_result_results_set)
    __swig_setmethods__["next_replace"] = _kalashnikovDB.AK_query_mem_result_next_replace_set
    __swig_getmethods__["next_replace"] = _kalashnikovDB.AK_query_mem_result_next_replace_get
    if _newclass:
        next_replace = _swig_property(_kalashnikovDB.AK_query_mem_result_next_replace_get, _kalashnikovDB.AK_query_mem_result_next_replace_set)

    def __init__(self):
        this = _kalashnikovDB.new_AK_query_mem_result()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _kalashnikovDB.delete_AK_query_mem_result
    __del__ = lambda self: None
AK_query_mem_result_swigregister = _kalashnikovDB.AK_query_mem_result_swigregister
AK_query_mem_result_swigregister(AK_query_mem_result)

class AK_query_mem(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AK_query_mem, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AK_query_mem, name)
    __repr__ = _swig_repr
    __swig_setmethods__["parsed"] = _kalashnikovDB.AK_query_mem_parsed_set
    __swig_getmethods__["parsed"] = _kalashnikovDB.AK_query_mem_parsed_get
    if _newclass:
        parsed = _swig_property(_kalashnikovDB.AK_query_mem_parsed_get, _kalashnikovDB.AK_query_mem_parsed_set)
    __swig_setmethods__["dictionary"] = _kalashnikovDB.AK_query_mem_dictionary_set
    __swig_getmethods__["dictionary"] = _kalashnikovDB.AK_query_mem_dictionary_get
    if _newclass:
        dictionary = _swig_property(_kalashnikovDB.AK_query_mem_dictionary_get, _kalashnikovDB.AK_query_mem_dictionary_set)
    __swig_setmethods__["result"] = _kalashnikovDB.AK_query_mem_result_set
    __swig_getmethods__["result"] = _kalashnikovDB.AK_query_mem_result_get
    if _newclass:
        result = _swig_property(_kalashnikovDB.AK_query_mem_result_get, _kalashnikovDB.AK_query_mem_result_set)

    def __init__(self):
        this = _kalashnikovDB.new_AK_query_mem()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _kalashnikovDB.delete_AK_query_mem
    __del__ = lambda self: None
AK_query_mem_swigregister = _kalashnikovDB.AK_query_mem_swigregister
AK_query_mem_swigregister(AK_query_mem)


def AK_create_create_table_parameter(type, name):
    return _kalashnikovDB.AK_create_create_table_parameter(type, name)
AK_create_create_table_parameter = _kalashnikovDB.AK_create_create_table_parameter

def AK_create_table(tblName, parameters, attribute_count):
    return _kalashnikovDB.AK_create_table(tblName, parameters, attribute_count)
AK_create_table = _kalashnikovDB.AK_create_table

def AK_num_attr(tblName):
    return _kalashnikovDB.AK_num_attr(tblName)
AK_num_attr = _kalashnikovDB.AK_num_attr

def AK_get_num_records(tblName):
    return _kalashnikovDB.AK_get_num_records(tblName)
AK_get_num_records = _kalashnikovDB.AK_get_num_records

def AK_get_header(tblName):
    return _kalashnikovDB.AK_get_header(tblName)
AK_get_header = _kalashnikovDB.AK_get_header

def AK_get_attr_name(tblName, index):
    return _kalashnikovDB.AK_get_attr_name(tblName, index)
AK_get_attr_name = _kalashnikovDB.AK_get_attr_name

def AK_get_attr_index(tblName, attrName):
    return _kalashnikovDB.AK_get_attr_index(tblName, attrName)
AK_get_attr_index = _kalashnikovDB.AK_get_attr_index

def AK_get_column(num, tblName):
    return _kalashnikovDB.AK_get_column(num, tblName)
AK_get_column = _kalashnikovDB.AK_get_column

def AK_get_row(num, tblName):
    return _kalashnikovDB.AK_get_row(num, tblName)
AK_get_row = _kalashnikovDB.AK_get_row

def AK_get_tuple(row, column, tblName):
    return _kalashnikovDB.AK_get_tuple(row, column, tblName)
AK_get_tuple = _kalashnikovDB.AK_get_tuple

def AK_tuple_to_string(tuple):
    return _kalashnikovDB.AK_tuple_to_string(tuple)
AK_tuple_to_string = _kalashnikovDB.AK_tuple_to_string

def AK_print_row_spacer(col_len, length):
    return _kalashnikovDB.AK_print_row_spacer(col_len, length)
AK_print_row_spacer = _kalashnikovDB.AK_print_row_spacer

def AK_print_row(col_len, row):
    return _kalashnikovDB.AK_print_row(col_len, row)
AK_print_row = _kalashnikovDB.AK_print_row

def AK_table_exist(tblName):
    return _kalashnikovDB.AK_table_exist(tblName)
AK_table_exist = _kalashnikovDB.AK_table_exist

def AK_print_table(tblName):
    return _kalashnikovDB.AK_print_table(tblName)
AK_print_table = _kalashnikovDB.AK_print_table

def AK_print_row_spacer_to_file(col_len, length):
    return _kalashnikovDB.AK_print_row_spacer_to_file(col_len, length)
AK_print_row_spacer_to_file = _kalashnikovDB.AK_print_row_spacer_to_file

def AK_print_row_to_file(col_len, row):
    return _kalashnikovDB.AK_print_row_to_file(col_len, row)
AK_print_row_to_file = _kalashnikovDB.AK_print_row_to_file

def AK_print_table_to_file(tblName):
    return _kalashnikovDB.AK_print_table_to_file(tblName)
AK_print_table_to_file = _kalashnikovDB.AK_print_table_to_file

def AK_table_empty(tblName):
    return _kalashnikovDB.AK_table_empty(tblName)
AK_table_empty = _kalashnikovDB.AK_table_empty

def AK_get_table_obj_id(table):
    return _kalashnikovDB.AK_get_table_obj_id(table)
AK_get_table_obj_id = _kalashnikovDB.AK_get_table_obj_id

def AK_check_tables_scheme(tbl1_temp_block, tbl2_temp_block, operator_name):
    return _kalashnikovDB.AK_check_tables_scheme(tbl1_temp_block, tbl2_temp_block, operator_name)
AK_check_tables_scheme = _kalashnikovDB.AK_check_tables_scheme

def AK_rename(old_table_name, old_attr, new_table_name, new_attr):
    return _kalashnikovDB.AK_rename(old_table_name, old_attr, new_table_name, new_attr)
AK_rename = _kalashnikovDB.AK_rename

def AK_table_test():
    return _kalashnikovDB.AK_table_test()
AK_table_test = _kalashnikovDB.AK_table_test

def AK_op_rename_test():
    return _kalashnikovDB.AK_op_rename_test()
AK_op_rename_test = _kalashnikovDB.AK_op_rename_test
class AK_create_table_struct(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AK_create_table_struct, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AK_create_table_struct, name)
    __repr__ = _swig_repr
    __swig_setmethods__["name"] = _kalashnikovDB.AK_create_table_struct_name_set
    __swig_getmethods__["name"] = _kalashnikovDB.AK_create_table_struct_name_get
    if _newclass:
        name = _swig_property(_kalashnikovDB.AK_create_table_struct_name_get, _kalashnikovDB.AK_create_table_struct_name_set)
    __swig_setmethods__["type"] = _kalashnikovDB.AK_create_table_struct_type_set
    __swig_getmethods__["type"] = _kalashnikovDB.AK_create_table_struct_type_get
    if _newclass:
        type = _swig_property(_kalashnikovDB.AK_create_table_struct_type_get, _kalashnikovDB.AK_create_table_struct_type_set)

    def __init__(self):
        this = _kalashnikovDB.new_AK_create_table_struct()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _kalashnikovDB.delete_AK_create_table_struct
    __del__ = lambda self: None
AK_create_table_struct_swigregister = _kalashnikovDB.AK_create_table_struct_swigregister
AK_create_table_struct_swigregister(AK_create_table_struct)


def AK_get_table_row(num, tblName):
    return _kalashnikovDB.AK_get_table_row(num, tblName)
AK_get_table_row = _kalashnikovDB.AK_get_table_row
class struct_add(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, struct_add, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, struct_add, name)
    __repr__ = _swig_repr
    __swig_setmethods__["addBlock"] = _kalashnikovDB.struct_add_addBlock_set
    __swig_getmethods__["addBlock"] = _kalashnikovDB.struct_add_addBlock_get
    if _newclass:
        addBlock = _swig_property(_kalashnikovDB.struct_add_addBlock_get, _kalashnikovDB.struct_add_addBlock_set)
    __swig_setmethods__["indexTd"] = _kalashnikovDB.struct_add_indexTd_set
    __swig_getmethods__["indexTd"] = _kalashnikovDB.struct_add_indexTd_get
    if _newclass:
        indexTd = _swig_property(_kalashnikovDB.struct_add_indexTd_get, _kalashnikovDB.struct_add_indexTd_set)

    def __init__(self):
        this = _kalashnikovDB.new_struct_add()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _kalashnikovDB.delete_struct_add
    __del__ = lambda self: None
struct_add_swigregister = _kalashnikovDB.struct_add_swigregister
struct_add_swigregister(struct_add)

class list_structure_ad(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, list_structure_ad, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, list_structure_ad, name)
    __repr__ = _swig_repr
    __swig_setmethods__["attName"] = _kalashnikovDB.list_structure_ad_attName_set
    __swig_getmethods__["attName"] = _kalashnikovDB.list_structure_ad_attName_get
    if _newclass:
        attName = _swig_property(_kalashnikovDB.list_structure_ad_attName_get, _kalashnikovDB.list_structure_ad_attName_set)
    __swig_setmethods__["add"] = _kalashnikovDB.list_structure_ad_add_set
    __swig_getmethods__["add"] = _kalashnikovDB.list_structure_ad_add_get
    if _newclass:
        add = _swig_property(_kalashnikovDB.list_structure_ad_add_get, _kalashnikovDB.list_structure_ad_add_set)
    __swig_setmethods__["next"] = _kalashnikovDB.list_structure_ad_next_set
    __swig_getmethods__["next"] = _kalashnikovDB.list_structure_ad_next_get
    if _newclass:
        next = _swig_property(_kalashnikovDB.list_structure_ad_next_get, _kalashnikovDB.list_structure_ad_next_set)

    def __init__(self):
        this = _kalashnikovDB.new_list_structure_ad()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _kalashnikovDB.delete_list_structure_ad
    __del__ = lambda self: None
list_structure_ad_swigregister = _kalashnikovDB.list_structure_ad_swigregister
list_structure_ad_swigregister(list_structure_ad)


def AK_index_table_exist(indexTblName):
    return _kalashnikovDB.AK_index_table_exist(indexTblName)
AK_index_table_exist = _kalashnikovDB.AK_index_table_exist

def AK_print_index_table(indexTblName):
    return _kalashnikovDB.AK_print_index_table(indexTblName)
AK_print_index_table = _kalashnikovDB.AK_print_index_table

def AK_get_index_tuple(row, column, indexTblName):
    return _kalashnikovDB.AK_get_index_tuple(row, column, indexTblName)
AK_get_index_tuple = _kalashnikovDB.AK_get_index_tuple

def AK_get_index_num_records(indexTblName):
    return _kalashnikovDB.AK_get_index_num_records(indexTblName)
AK_get_index_num_records = _kalashnikovDB.AK_get_index_num_records

def AK_num_index_attr(indexTblName):
    return _kalashnikovDB.AK_num_index_attr(indexTblName)
AK_num_index_attr = _kalashnikovDB.AK_num_index_attr

def Ak_InitializelistAd(L):
    return _kalashnikovDB.Ak_InitializelistAd(L)
Ak_InitializelistAd = _kalashnikovDB.Ak_InitializelistAd

def Ak_Get_First_elementAd(L):
    return _kalashnikovDB.Ak_Get_First_elementAd(L)
Ak_Get_First_elementAd = _kalashnikovDB.Ak_Get_First_elementAd

def Ak_Get_Last_elementAd(L):
    return _kalashnikovDB.Ak_Get_Last_elementAd(L)
Ak_Get_Last_elementAd = _kalashnikovDB.Ak_Get_Last_elementAd

def Ak_Get_Next_elementAd(Currentelement_op):
    return _kalashnikovDB.Ak_Get_Next_elementAd(Currentelement_op)
Ak_Get_Next_elementAd = _kalashnikovDB.Ak_Get_Next_elementAd

def Ak_Get_Previous_elementAd(Currentelement_op, L):
    return _kalashnikovDB.Ak_Get_Previous_elementAd(Currentelement_op, L)
Ak_Get_Previous_elementAd = _kalashnikovDB.Ak_Get_Previous_elementAd

def Ak_Get_Position_Of_elementAd(Searchedelement_op, L):
    return _kalashnikovDB.Ak_Get_Position_Of_elementAd(Searchedelement_op, L)
Ak_Get_Position_Of_elementAd = _kalashnikovDB.Ak_Get_Position_Of_elementAd

def Ak_Delete_elementAd(Deletedelement_op, L):
    return _kalashnikovDB.Ak_Delete_elementAd(Deletedelement_op, L)
Ak_Delete_elementAd = _kalashnikovDB.Ak_Delete_elementAd

def Ak_Delete_All_elementsAd(L):
    return _kalashnikovDB.Ak_Delete_All_elementsAd(L)
Ak_Delete_All_elementsAd = _kalashnikovDB.Ak_Delete_All_elementsAd

def Ak_Insert_NewelementAd(addBlock, indexTd, attName, elementBefore):
    return _kalashnikovDB.Ak_Insert_NewelementAd(addBlock, indexTd, attName, elementBefore)
Ak_Insert_NewelementAd = _kalashnikovDB.Ak_Insert_NewelementAd

def AK_index_test():
    return _kalashnikovDB.AK_index_test()
AK_index_test = _kalashnikovDB.AK_index_test

def Ak_If_ExistOp(L, ele):
    return _kalashnikovDB.Ak_If_ExistOp(L, ele)
Ak_If_ExistOp = _kalashnikovDB.Ak_If_ExistOp

def AK_create_Index_Table(tblName, attributes):
    return _kalashnikovDB.AK_create_Index_Table(tblName, attributes)
AK_create_Index_Table = _kalashnikovDB.AK_create_Index_Table

def Ak_create_Index(tblName, tblNameIndex, attributeName, positionTbl, numAtributes, headerIndex):
    return _kalashnikovDB.Ak_create_Index(tblName, tblNameIndex, attributeName, positionTbl, numAtributes, headerIndex)
Ak_create_Index = _kalashnikovDB.Ak_create_Index

def Ak_get_Attribute(indexName, attribute):
    return _kalashnikovDB.Ak_get_Attribute(indexName, attribute)
Ak_get_Attribute = _kalashnikovDB.Ak_get_Attribute

def Ak_print_Att_Test(list):
    return _kalashnikovDB.Ak_print_Att_Test(list)
Ak_print_Att_Test = _kalashnikovDB.Ak_print_Att_Test

def AK_get_Attribute(tableName, attributeName, attributeValue):
    return _kalashnikovDB.AK_get_Attribute(tableName, attributeName, attributeValue)
AK_get_Attribute = _kalashnikovDB.AK_get_Attribute

def AK_update(addBlock, addTd, tableName, attributeName, attributeValue, newAttributeValue):
    return _kalashnikovDB.AK_update(addBlock, addTd, tableName, attributeName, attributeValue, newAttributeValue)
AK_update = _kalashnikovDB.AK_update

def Ak_write_block(block):
    return _kalashnikovDB.Ak_write_block(block)
Ak_write_block = _kalashnikovDB.Ak_write_block

def AK_add_to_bitmap_index(tableName, attributeName):
    return _kalashnikovDB.AK_add_to_bitmap_index(tableName, attributeName)
AK_add_to_bitmap_index = _kalashnikovDB.AK_add_to_bitmap_index

def Ak_print_Header_Test(tblName):
    return _kalashnikovDB.Ak_print_Header_Test(tblName)
Ak_print_Header_Test = _kalashnikovDB.Ak_print_Header_Test

def AK_delete_bitmap_index(indexName):
    return _kalashnikovDB.AK_delete_bitmap_index(indexName)
AK_delete_bitmap_index = _kalashnikovDB.AK_delete_bitmap_index

def Ak_bitmap_test():
    return _kalashnikovDB.Ak_bitmap_test()
Ak_bitmap_test = _kalashnikovDB.Ak_bitmap_test

def AK_elem_hash_value(elem):
    return _kalashnikovDB.AK_elem_hash_value(elem)
AK_elem_hash_value = _kalashnikovDB.AK_elem_hash_value

def Ak_insert_bucket_to_block(indexName, data, type):
    return _kalashnikovDB.Ak_insert_bucket_to_block(indexName, data, type)
Ak_insert_bucket_to_block = _kalashnikovDB.Ak_insert_bucket_to_block

def Ak_update_bucket_in_block(add, data):
    return _kalashnikovDB.Ak_update_bucket_in_block(add, data)
Ak_update_bucket_in_block = _kalashnikovDB.Ak_update_bucket_in_block

def AK_change_hash_info(indexName, modulo, main_bucket_num, hash_bucket_num):
    return _kalashnikovDB.AK_change_hash_info(indexName, modulo, main_bucket_num, hash_bucket_num)
AK_change_hash_info = _kalashnikovDB.AK_change_hash_info

def AK_get_hash_info(indexName):
    return _kalashnikovDB.AK_get_hash_info(indexName)
AK_get_hash_info = _kalashnikovDB.AK_get_hash_info

def Ak_get_nth_main_bucket_add(indexName, n):
    return _kalashnikovDB.Ak_get_nth_main_bucket_add(indexName, n)
Ak_get_nth_main_bucket_add = _kalashnikovDB.Ak_get_nth_main_bucket_add

def AK_insert_in_hash_index(indexName, hashValue, add):
    return _kalashnikovDB.AK_insert_in_hash_index(indexName, hashValue, add)
AK_insert_in_hash_index = _kalashnikovDB.AK_insert_in_hash_index

def AK_find_delete_in_hash_index(indexName, values, delete):
    return _kalashnikovDB.AK_find_delete_in_hash_index(indexName, values, delete)
AK_find_delete_in_hash_index = _kalashnikovDB.AK_find_delete_in_hash_index

def AK_find_in_hash_index(indexName, values):
    return _kalashnikovDB.AK_find_in_hash_index(indexName, values)
AK_find_in_hash_index = _kalashnikovDB.AK_find_in_hash_index

def AK_delete_in_hash_index(indexName, values):
    return _kalashnikovDB.AK_delete_in_hash_index(indexName, values)
AK_delete_in_hash_index = _kalashnikovDB.AK_delete_in_hash_index

def AK_create_hash_index(tblName, attributes, indexName):
    return _kalashnikovDB.AK_create_hash_index(tblName, attributes, indexName)
AK_create_hash_index = _kalashnikovDB.AK_create_hash_index

def AK_delete_hash_index(indexName):
    return _kalashnikovDB.AK_delete_hash_index(indexName)
AK_delete_hash_index = _kalashnikovDB.AK_delete_hash_index

def Ak_hash_test():
    return _kalashnikovDB.Ak_hash_test()
Ak_hash_test = _kalashnikovDB.Ak_hash_test
class hash_info(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, hash_info, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, hash_info, name)
    __repr__ = _swig_repr
    __swig_setmethods__["modulo"] = _kalashnikovDB.hash_info_modulo_set
    __swig_getmethods__["modulo"] = _kalashnikovDB.hash_info_modulo_get
    if _newclass:
        modulo = _swig_property(_kalashnikovDB.hash_info_modulo_get, _kalashnikovDB.hash_info_modulo_set)
    __swig_setmethods__["main_bucket_num"] = _kalashnikovDB.hash_info_main_bucket_num_set
    __swig_getmethods__["main_bucket_num"] = _kalashnikovDB.hash_info_main_bucket_num_get
    if _newclass:
        main_bucket_num = _swig_property(_kalashnikovDB.hash_info_main_bucket_num_get, _kalashnikovDB.hash_info_main_bucket_num_set)
    __swig_setmethods__["hash_bucket_num"] = _kalashnikovDB.hash_info_hash_bucket_num_set
    __swig_getmethods__["hash_bucket_num"] = _kalashnikovDB.hash_info_hash_bucket_num_get
    if _newclass:
        hash_bucket_num = _swig_property(_kalashnikovDB.hash_info_hash_bucket_num_get, _kalashnikovDB.hash_info_hash_bucket_num_set)

    def __init__(self):
        this = _kalashnikovDB.new_hash_info()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _kalashnikovDB.delete_hash_info
    __del__ = lambda self: None
hash_info_swigregister = _kalashnikovDB.hash_info_swigregister
hash_info_swigregister(hash_info)

class bucket_elem(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, bucket_elem, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, bucket_elem, name)
    __repr__ = _swig_repr
    __swig_setmethods__["value"] = _kalashnikovDB.bucket_elem_value_set
    __swig_getmethods__["value"] = _kalashnikovDB.bucket_elem_value_get
    if _newclass:
        value = _swig_property(_kalashnikovDB.bucket_elem_value_get, _kalashnikovDB.bucket_elem_value_set)
    __swig_setmethods__["add"] = _kalashnikovDB.bucket_elem_add_set
    __swig_getmethods__["add"] = _kalashnikovDB.bucket_elem_add_get
    if _newclass:
        add = _swig_property(_kalashnikovDB.bucket_elem_add_get, _kalashnikovDB.bucket_elem_add_set)

    def __init__(self):
        this = _kalashnikovDB.new_bucket_elem()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _kalashnikovDB.delete_bucket_elem
    __del__ = lambda self: None
bucket_elem_swigregister = _kalashnikovDB.bucket_elem_swigregister
bucket_elem_swigregister(bucket_elem)

class main_bucket(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, main_bucket, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, main_bucket, name)
    __repr__ = _swig_repr
    __swig_setmethods__["element"] = _kalashnikovDB.main_bucket_element_set
    __swig_getmethods__["element"] = _kalashnikovDB.main_bucket_element_get
    if _newclass:
        element = _swig_property(_kalashnikovDB.main_bucket_element_get, _kalashnikovDB.main_bucket_element_set)

    def __init__(self):
        this = _kalashnikovDB.new_main_bucket()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _kalashnikovDB.delete_main_bucket
    __del__ = lambda self: None
main_bucket_swigregister = _kalashnikovDB.main_bucket_swigregister
main_bucket_swigregister(main_bucket)

class hash_bucket(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, hash_bucket, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, hash_bucket, name)
    __repr__ = _swig_repr
    __swig_setmethods__["bucket_level"] = _kalashnikovDB.hash_bucket_bucket_level_set
    __swig_getmethods__["bucket_level"] = _kalashnikovDB.hash_bucket_bucket_level_get
    if _newclass:
        bucket_level = _swig_property(_kalashnikovDB.hash_bucket_bucket_level_get, _kalashnikovDB.hash_bucket_bucket_level_set)
    __swig_setmethods__["element"] = _kalashnikovDB.hash_bucket_element_set
    __swig_getmethods__["element"] = _kalashnikovDB.hash_bucket_element_get
    if _newclass:
        element = _swig_property(_kalashnikovDB.hash_bucket_element_get, _kalashnikovDB.hash_bucket_element_set)

    def __init__(self):
        this = _kalashnikovDB.new_hash_bucket()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _kalashnikovDB.delete_hash_bucket
    __del__ = lambda self: None
hash_bucket_swigregister = _kalashnikovDB.hash_bucket_swigregister
hash_bucket_swigregister(hash_bucket)


def AK_btree_create(tblName, attributes, indexName):
    return _kalashnikovDB.AK_btree_create(tblName, attributes, indexName)
AK_btree_create = _kalashnikovDB.AK_btree_create

def AK_btree_delete(indexName):
    return _kalashnikovDB.AK_btree_delete(indexName)
AK_btree_delete = _kalashnikovDB.AK_btree_delete

def AK_btree_search_delete(indexName, searchValue, endRange, toDo):
    return _kalashnikovDB.AK_btree_search_delete(indexName, searchValue, endRange, toDo)
AK_btree_search_delete = _kalashnikovDB.AK_btree_search_delete

def AK_btree_insert(indexName, insertValue, insertTd, insertBlock):
    return _kalashnikovDB.AK_btree_insert(indexName, insertValue, insertTd, insertBlock)
AK_btree_insert = _kalashnikovDB.AK_btree_insert

def Ak_btree_test():
    return _kalashnikovDB.Ak_btree_test()
Ak_btree_test = _kalashnikovDB.Ak_btree_test

_kalashnikovDB.B_swigconstant(_kalashnikovDB)
B = _kalashnikovDB.B

_kalashnikovDB.ORDER_swigconstant(_kalashnikovDB)
ORDER = _kalashnikovDB.ORDER

_kalashnikovDB.LEAF_swigconstant(_kalashnikovDB)
LEAF = _kalashnikovDB.LEAF

_kalashnikovDB.NODE_swigconstant(_kalashnikovDB)
NODE = _kalashnikovDB.NODE
class btree_node(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btree_node, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btree_node, name)
    __repr__ = _swig_repr
    __swig_setmethods__["values"] = _kalashnikovDB.btree_node_values_set
    __swig_getmethods__["values"] = _kalashnikovDB.btree_node_values_get
    if _newclass:
        values = _swig_property(_kalashnikovDB.btree_node_values_get, _kalashnikovDB.btree_node_values_set)
    __swig_setmethods__["pointers"] = _kalashnikovDB.btree_node_pointers_set
    __swig_getmethods__["pointers"] = _kalashnikovDB.btree_node_pointers_get
    if _newclass:
        pointers = _swig_property(_kalashnikovDB.btree_node_pointers_get, _kalashnikovDB.btree_node_pointers_set)

    def __init__(self):
        this = _kalashnikovDB.new_btree_node()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _kalashnikovDB.delete_btree_node
    __del__ = lambda self: None
btree_node_swigregister = _kalashnikovDB.btree_node_swigregister
btree_node_swigregister(btree_node)

class root_info(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, root_info, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, root_info, name)
    __repr__ = _swig_repr
    __swig_setmethods__["root"] = _kalashnikovDB.root_info_root_set
    __swig_getmethods__["root"] = _kalashnikovDB.root_info_root_get
    if _newclass:
        root = _swig_property(_kalashnikovDB.root_info_root_get, _kalashnikovDB.root_info_root_set)
    __swig_setmethods__["level"] = _kalashnikovDB.root_info_level_set
    __swig_getmethods__["level"] = _kalashnikovDB.root_info_level_get
    if _newclass:
        level = _swig_property(_kalashnikovDB.root_info_level_get, _kalashnikovDB.root_info_level_set)

    def __init__(self):
        this = _kalashnikovDB.new_root_info()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _kalashnikovDB.delete_root_info
    __del__ = lambda self: None
root_info_swigregister = _kalashnikovDB.root_info_swigregister
root_info_swigregister(root_info)


def AK_get_index_header(indexTblName):
    return _kalashnikovDB.AK_get_index_header(indexTblName)
AK_get_index_header = _kalashnikovDB.AK_get_index_header

def Ak_get_total_headers(iBlock):
    return _kalashnikovDB.Ak_get_total_headers(iBlock)
Ak_get_total_headers = _kalashnikovDB.Ak_get_total_headers

def Ak_get_header_number(iBlock, attribute_name):
    return _kalashnikovDB.Ak_get_header_number(iBlock, attribute_name)
Ak_get_header_number = _kalashnikovDB.Ak_get_header_number

def Ak_get_num_of_tuples(iBlock):
    return _kalashnikovDB.Ak_get_num_of_tuples(iBlock)
Ak_get_num_of_tuples = _kalashnikovDB.Ak_get_num_of_tuples

def AK_sort_segment(table_name, attr):
    return _kalashnikovDB.AK_sort_segment(table_name, attr)
AK_sort_segment = _kalashnikovDB.AK_sort_segment

def Ak_reset_block(block):
    return _kalashnikovDB.Ak_reset_block(block)
Ak_reset_block = _kalashnikovDB.Ak_reset_block

def AK_block_sort(iBlock, atr_name):
    return _kalashnikovDB.AK_block_sort(iBlock, atr_name)
AK_block_sort = _kalashnikovDB.AK_block_sort

def Ak_filesort_test():
    return _kalashnikovDB.Ak_filesort_test()
Ak_filesort_test = _kalashnikovDB.Ak_filesort_test

_kalashnikovDB.DATA_ROW_SIZE_swigconstant(_kalashnikovDB)
DATA_ROW_SIZE = _kalashnikovDB.DATA_ROW_SIZE

_kalashnikovDB.DATA_TUPLE_SIZE_swigconstant(_kalashnikovDB)
DATA_TUPLE_SIZE = _kalashnikovDB.DATA_TUPLE_SIZE

def AK_search_unsorted(szRelation, aspParams, iNum_search_params):
    return _kalashnikovDB.AK_search_unsorted(szRelation, aspParams, iNum_search_params)
AK_search_unsorted = _kalashnikovDB.AK_search_unsorted

def AK_deallocate_search_result(srResult):
    return _kalashnikovDB.AK_deallocate_search_result(srResult)
AK_deallocate_search_result = _kalashnikovDB.AK_deallocate_search_result

def Ak_filesearch_test():
    return _kalashnikovDB.Ak_filesearch_test()
Ak_filesearch_test = _kalashnikovDB.Ak_filesearch_test

_kalashnikovDB.SEARCH_NULL_swigconstant(_kalashnikovDB)
SEARCH_NULL = _kalashnikovDB.SEARCH_NULL

_kalashnikovDB.SEARCH_ALL_swigconstant(_kalashnikovDB)
SEARCH_ALL = _kalashnikovDB.SEARCH_ALL

_kalashnikovDB.SEARCH_PARTICULAR_swigconstant(_kalashnikovDB)
SEARCH_PARTICULAR = _kalashnikovDB.SEARCH_PARTICULAR

_kalashnikovDB.SEARCH_RANGE_swigconstant(_kalashnikovDB)
SEARCH_RANGE = _kalashnikovDB.SEARCH_RANGE
class search_params(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, search_params, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, search_params, name)
    __repr__ = _swig_repr
    __swig_setmethods__["szAttribute"] = _kalashnikovDB.search_params_szAttribute_set
    __swig_getmethods__["szAttribute"] = _kalashnikovDB.search_params_szAttribute_get
    if _newclass:
        szAttribute = _swig_property(_kalashnikovDB.search_params_szAttribute_get, _kalashnikovDB.search_params_szAttribute_set)
    __swig_setmethods__["pData_lower"] = _kalashnikovDB.search_params_pData_lower_set
    __swig_getmethods__["pData_lower"] = _kalashnikovDB.search_params_pData_lower_get
    if _newclass:
        pData_lower = _swig_property(_kalashnikovDB.search_params_pData_lower_get, _kalashnikovDB.search_params_pData_lower_set)
    __swig_setmethods__["pData_upper"] = _kalashnikovDB.search_params_pData_upper_set
    __swig_getmethods__["pData_upper"] = _kalashnikovDB.search_params_pData_upper_get
    if _newclass:
        pData_upper = _swig_property(_kalashnikovDB.search_params_pData_upper_get, _kalashnikovDB.search_params_pData_upper_set)
    __swig_setmethods__["iSearchType"] = _kalashnikovDB.search_params_iSearchType_set
    __swig_getmethods__["iSearchType"] = _kalashnikovDB.search_params_iSearchType_get
    if _newclass:
        iSearchType = _swig_property(_kalashnikovDB.search_params_iSearchType_get, _kalashnikovDB.search_params_iSearchType_set)

    def __init__(self):
        this = _kalashnikovDB.new_search_params()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _kalashnikovDB.delete_search_params
    __del__ = lambda self: None
search_params_swigregister = _kalashnikovDB.search_params_swigregister
search_params_swigregister(search_params)

class search_result(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, search_result, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, search_result, name)
    __repr__ = _swig_repr
    __swig_setmethods__["aiTuple_addresses"] = _kalashnikovDB.search_result_aiTuple_addresses_set
    __swig_getmethods__["aiTuple_addresses"] = _kalashnikovDB.search_result_aiTuple_addresses_get
    if _newclass:
        aiTuple_addresses = _swig_property(_kalashnikovDB.search_result_aiTuple_addresses_get, _kalashnikovDB.search_result_aiTuple_addresses_set)
    __swig_setmethods__["aiBlocks"] = _kalashnikovDB.search_result_aiBlocks_set
    __swig_getmethods__["aiBlocks"] = _kalashnikovDB.search_result_aiBlocks_get
    if _newclass:
        aiBlocks = _swig_property(_kalashnikovDB.search_result_aiBlocks_get, _kalashnikovDB.search_result_aiBlocks_set)
    __swig_setmethods__["iNum_tuple_addresses"] = _kalashnikovDB.search_result_iNum_tuple_addresses_set
    __swig_getmethods__["iNum_tuple_addresses"] = _kalashnikovDB.search_result_iNum_tuple_addresses_get
    if _newclass:
        iNum_tuple_addresses = _swig_property(_kalashnikovDB.search_result_iNum_tuple_addresses_get, _kalashnikovDB.search_result_iNum_tuple_addresses_set)
    __swig_setmethods__["aiSearch_attributes"] = _kalashnikovDB.search_result_aiSearch_attributes_set
    __swig_getmethods__["aiSearch_attributes"] = _kalashnikovDB.search_result_aiSearch_attributes_get
    if _newclass:
        aiSearch_attributes = _swig_property(_kalashnikovDB.search_result_aiSearch_attributes_get, _kalashnikovDB.search_result_aiSearch_attributes_set)
    __swig_setmethods__["iNum_search_attributes"] = _kalashnikovDB.search_result_iNum_search_attributes_set
    __swig_getmethods__["iNum_search_attributes"] = _kalashnikovDB.search_result_iNum_search_attributes_get
    if _newclass:
        iNum_search_attributes = _swig_property(_kalashnikovDB.search_result_iNum_search_attributes_get, _kalashnikovDB.search_result_iNum_search_attributes_set)
    __swig_setmethods__["iNum_tuple_attributes"] = _kalashnikovDB.search_result_iNum_tuple_attributes_set
    __swig_getmethods__["iNum_tuple_attributes"] = _kalashnikovDB.search_result_iNum_tuple_attributes_get
    if _newclass:
        iNum_tuple_attributes = _swig_property(_kalashnikovDB.search_result_iNum_tuple_attributes_get, _kalashnikovDB.search_result_iNum_tuple_attributes_set)

    def __init__(self):
        this = _kalashnikovDB.new_search_result()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _kalashnikovDB.delete_search_result
    __del__ = lambda self: None
search_result_swigregister = _kalashnikovDB.search_result_swigregister
search_result_swigregister(search_result)


def Ak_Insert_New_Element_For_Update(newtype, data, table, attribute_name, ElementBefore, newconstraint):
    return _kalashnikovDB.Ak_Insert_New_Element_For_Update(newtype, data, table, attribute_name, ElementBefore, newconstraint)
Ak_Insert_New_Element_For_Update = _kalashnikovDB.Ak_Insert_New_Element_For_Update

def Ak_Insert_New_Element(newtype, data, table, attribute_name, ElementBefore):
    return _kalashnikovDB.Ak_Insert_New_Element(newtype, data, table, attribute_name, ElementBefore)
Ak_Insert_New_Element = _kalashnikovDB.Ak_Insert_New_Element

def Ak_insert_row_to_block(row_root, temp_block):
    return _kalashnikovDB.Ak_insert_row_to_block(row_root, temp_block)
Ak_insert_row_to_block = _kalashnikovDB.Ak_insert_row_to_block

def Ak_insert_row(row_root):
    return _kalashnikovDB.Ak_insert_row(row_root)
Ak_insert_row = _kalashnikovDB.Ak_insert_row

def Ak_update_row_from_block(temp_block, row_root):
    return _kalashnikovDB.Ak_update_row_from_block(temp_block, row_root)
Ak_update_row_from_block = _kalashnikovDB.Ak_update_row_from_block

def Ak_delete_row_from_block(temp_block, row_root):
    return _kalashnikovDB.Ak_delete_row_from_block(temp_block, row_root)
Ak_delete_row_from_block = _kalashnikovDB.Ak_delete_row_from_block

def Ak_delete_update_segment(row_root, arg2):
    return _kalashnikovDB.Ak_delete_update_segment(row_root, arg2)
Ak_delete_update_segment = _kalashnikovDB.Ak_delete_update_segment

def Ak_delete_row(row_root):
    return _kalashnikovDB.Ak_delete_row(row_root)
Ak_delete_row = _kalashnikovDB.Ak_delete_row

def Ak_delete_row_by_id(id, tableName):
    return _kalashnikovDB.Ak_delete_row_by_id(id, tableName)
Ak_delete_row_by_id = _kalashnikovDB.Ak_delete_row_by_id

def Ak_update_row(row_root):
    return _kalashnikovDB.Ak_update_row(row_root)
Ak_update_row = _kalashnikovDB.Ak_update_row

def Ak_fileio_test():
    return _kalashnikovDB.Ak_fileio_test()
Ak_fileio_test = _kalashnikovDB.Ak_fileio_test

def AK_initialize_new_segment(name, type, header):
    return _kalashnikovDB.AK_initialize_new_segment(name, type, header)
AK_initialize_new_segment = _kalashnikovDB.AK_initialize_new_segment

def AK_initialize_new_index_segment(name, table_id, attr_id, header):
    return _kalashnikovDB.AK_initialize_new_index_segment(name, table_id, attr_id, header)
AK_initialize_new_index_segment = _kalashnikovDB.AK_initialize_new_index_segment

def Ak_files_test():
    return _kalashnikovDB.Ak_files_test()
Ak_files_test = _kalashnikovDB.Ak_files_test

def AK_create_theta_join_header(srcTable1, srcTable2, new_table):
    return _kalashnikovDB.AK_create_theta_join_header(srcTable1, srcTable2, new_table)
AK_create_theta_join_header = _kalashnikovDB.AK_create_theta_join_header

def AK_check_constraints(tbl1_temp_block, tbl2_temp_block, tbl1_num_att, tbl2_num_att, constraints, new_table):
    return _kalashnikovDB.AK_check_constraints(tbl1_temp_block, tbl2_temp_block, tbl1_num_att, tbl2_num_att, constraints, new_table)
AK_check_constraints = _kalashnikovDB.AK_check_constraints

def AK_theta_join(srcTable1, srcTable2, dstTable, constraints):
    return _kalashnikovDB.AK_theta_join(srcTable1, srcTable2, dstTable, constraints)
AK_theta_join = _kalashnikovDB.AK_theta_join

def AK_op_theta_join_test():
    return _kalashnikovDB.AK_op_theta_join_test()
AK_op_theta_join_test = _kalashnikovDB.AK_op_theta_join_test

def AK_product(srcTable1, srcTable2, dstTable):
    return _kalashnikovDB.AK_product(srcTable1, srcTable2, dstTable)
AK_product = _kalashnikovDB.AK_product

def AK_op_product_test():
    return _kalashnikovDB.AK_op_product_test()
AK_op_product_test = _kalashnikovDB.AK_op_product_test

def AK_header_size(header):
    return _kalashnikovDB.AK_header_size(header)
AK_header_size = _kalashnikovDB.AK_header_size

def AK_agg_input_init(input):
    return _kalashnikovDB.AK_agg_input_init(input)
AK_agg_input_init = _kalashnikovDB.AK_agg_input_init

def AK_agg_input_add(header, agg_task, input):
    return _kalashnikovDB.AK_agg_input_add(header, agg_task, input)
AK_agg_input_add = _kalashnikovDB.AK_agg_input_add

def AK_agg_input_add_to_beginning(header, agg_task, input):
    return _kalashnikovDB.AK_agg_input_add_to_beginning(header, agg_task, input)
AK_agg_input_add_to_beginning = _kalashnikovDB.AK_agg_input_add_to_beginning

def AK_agg_input_fix(input):
    return _kalashnikovDB.AK_agg_input_fix(input)
AK_agg_input_fix = _kalashnikovDB.AK_agg_input_fix

def AK_aggregation(input, source_table, agg_table):
    return _kalashnikovDB.AK_aggregation(input, source_table, agg_table)
AK_aggregation = _kalashnikovDB.AK_aggregation

def Ak_aggregation_test():
    return _kalashnikovDB.Ak_aggregation_test()
Ak_aggregation_test = _kalashnikovDB.Ak_aggregation_test

_kalashnikovDB.AGG_TASK_GROUP_swigconstant(_kalashnikovDB)
AGG_TASK_GROUP = _kalashnikovDB.AGG_TASK_GROUP

_kalashnikovDB.AGG_TASK_COUNT_swigconstant(_kalashnikovDB)
AGG_TASK_COUNT = _kalashnikovDB.AGG_TASK_COUNT

_kalashnikovDB.AGG_TASK_SUM_swigconstant(_kalashnikovDB)
AGG_TASK_SUM = _kalashnikovDB.AGG_TASK_SUM

_kalashnikovDB.AGG_TASK_MAX_swigconstant(_kalashnikovDB)
AGG_TASK_MAX = _kalashnikovDB.AGG_TASK_MAX

_kalashnikovDB.AGG_TASK_MIN_swigconstant(_kalashnikovDB)
AGG_TASK_MIN = _kalashnikovDB.AGG_TASK_MIN

_kalashnikovDB.AGG_TASK_AVG_swigconstant(_kalashnikovDB)
AGG_TASK_AVG = _kalashnikovDB.AGG_TASK_AVG

_kalashnikovDB.AGG_TASK_AVG_COUNT_swigconstant(_kalashnikovDB)
AGG_TASK_AVG_COUNT = _kalashnikovDB.AGG_TASK_AVG_COUNT

_kalashnikovDB.AGG_TASK_AVG_SUM_swigconstant(_kalashnikovDB)
AGG_TASK_AVG_SUM = _kalashnikovDB.AGG_TASK_AVG_SUM
class AK_agg_value(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AK_agg_value, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AK_agg_value, name)
    __repr__ = _swig_repr
    __swig_setmethods__["att_name"] = _kalashnikovDB.AK_agg_value_att_name_set
    __swig_getmethods__["att_name"] = _kalashnikovDB.AK_agg_value_att_name_get
    if _newclass:
        att_name = _swig_property(_kalashnikovDB.AK_agg_value_att_name_get, _kalashnikovDB.AK_agg_value_att_name_set)
    __swig_setmethods__["data"] = _kalashnikovDB.AK_agg_value_data_set
    __swig_getmethods__["data"] = _kalashnikovDB.AK_agg_value_data_get
    if _newclass:
        data = _swig_property(_kalashnikovDB.AK_agg_value_data_get, _kalashnikovDB.AK_agg_value_data_set)
    __swig_setmethods__["agg_task"] = _kalashnikovDB.AK_agg_value_agg_task_set
    __swig_getmethods__["agg_task"] = _kalashnikovDB.AK_agg_value_agg_task_get
    if _newclass:
        agg_task = _swig_property(_kalashnikovDB.AK_agg_value_agg_task_get, _kalashnikovDB.AK_agg_value_agg_task_set)

    def __init__(self):
        this = _kalashnikovDB.new_AK_agg_value()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _kalashnikovDB.delete_AK_agg_value
    __del__ = lambda self: None
AK_agg_value_swigregister = _kalashnikovDB.AK_agg_value_swigregister
AK_agg_value_swigregister(AK_agg_value)

class AK_agg_input(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AK_agg_input, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AK_agg_input, name)
    __repr__ = _swig_repr
    __swig_setmethods__["attributes"] = _kalashnikovDB.AK_agg_input_attributes_set
    __swig_getmethods__["attributes"] = _kalashnikovDB.AK_agg_input_attributes_get
    if _newclass:
        attributes = _swig_property(_kalashnikovDB.AK_agg_input_attributes_get, _kalashnikovDB.AK_agg_input_attributes_set)
    __swig_setmethods__["tasks"] = _kalashnikovDB.AK_agg_input_tasks_set
    __swig_getmethods__["tasks"] = _kalashnikovDB.AK_agg_input_tasks_get
    if _newclass:
        tasks = _swig_property(_kalashnikovDB.AK_agg_input_tasks_get, _kalashnikovDB.AK_agg_input_tasks_set)
    __swig_setmethods__["counter"] = _kalashnikovDB.AK_agg_input_counter_set
    __swig_getmethods__["counter"] = _kalashnikovDB.AK_agg_input_counter_get
    if _newclass:
        counter = _swig_property(_kalashnikovDB.AK_agg_input_counter_get, _kalashnikovDB.AK_agg_input_counter_set)

    def __init__(self):
        this = _kalashnikovDB.new_AK_agg_input()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _kalashnikovDB.delete_AK_agg_input
    __del__ = lambda self: None
AK_agg_input_swigregister = _kalashnikovDB.AK_agg_input_swigregister
AK_agg_input_swigregister(AK_agg_input)


def AK_union(srcTable1, srcTable2, dstTable):
    return _kalashnikovDB.AK_union(srcTable1, srcTable2, dstTable)
AK_union = _kalashnikovDB.AK_union

def AK_op_union_test():
    return _kalashnikovDB.AK_op_union_test()
AK_op_union_test = _kalashnikovDB.AK_op_union_test

def AK_selection(srcTable, dstTable, expr):
    return _kalashnikovDB.AK_selection(srcTable, dstTable, expr)
AK_selection = _kalashnikovDB.AK_selection

def AK_op_selection_test():
    return _kalashnikovDB.AK_op_selection_test()
AK_op_selection_test = _kalashnikovDB.AK_op_selection_test

def AK_op_selection_test2():
    return _kalashnikovDB.AK_op_selection_test2()
AK_op_selection_test2 = _kalashnikovDB.AK_op_selection_test2

def AK_op_selection_test_redolog():
    return _kalashnikovDB.AK_op_selection_test_redolog()
AK_op_selection_test_redolog = _kalashnikovDB.AK_op_selection_test_redolog

_kalashnikovDB.DROP_TABLE_swigconstant(_kalashnikovDB)
DROP_TABLE = _kalashnikovDB.DROP_TABLE

_kalashnikovDB.DROP_INDEX_swigconstant(_kalashnikovDB)
DROP_INDEX = _kalashnikovDB.DROP_INDEX

_kalashnikovDB.DROP_VIEW_swigconstant(_kalashnikovDB)
DROP_VIEW = _kalashnikovDB.DROP_VIEW

_kalashnikovDB.DROP_SEQUENCE_swigconstant(_kalashnikovDB)
DROP_SEQUENCE = _kalashnikovDB.DROP_SEQUENCE

_kalashnikovDB.DROP_TRIGGER_swigconstant(_kalashnikovDB)
DROP_TRIGGER = _kalashnikovDB.DROP_TRIGGER

_kalashnikovDB.DROP_FUNCTION_swigconstant(_kalashnikovDB)
DROP_FUNCTION = _kalashnikovDB.DROP_FUNCTION

_kalashnikovDB.DROP_USER_swigconstant(_kalashnikovDB)
DROP_USER = _kalashnikovDB.DROP_USER

_kalashnikovDB.DROP_GROUP_swigconstant(_kalashnikovDB)
DROP_GROUP = _kalashnikovDB.DROP_GROUP

_kalashnikovDB.DROP_CONSTRAINT_swigconstant(_kalashnikovDB)
DROP_CONSTRAINT = _kalashnikovDB.DROP_CONSTRAINT

_kalashnikovDB.NUM_SYS_TABLES_swigconstant(_kalashnikovDB)
NUM_SYS_TABLES = _kalashnikovDB.NUM_SYS_TABLES

def AK_drop(type, drop_arguments):
    return _kalashnikovDB.AK_drop(type, drop_arguments)
AK_drop = _kalashnikovDB.AK_drop

def AK_drop_help_function(tblName, sys_table):
    return _kalashnikovDB.AK_drop_help_function(tblName, sys_table)
AK_drop_help_function = _kalashnikovDB.AK_drop_help_function

def AK_if_exist(tblName, sys_table):
    return _kalashnikovDB.AK_if_exist(tblName, sys_table)
AK_if_exist = _kalashnikovDB.AK_if_exist

def AK_drop_test():
    return _kalashnikovDB.AK_drop_test()
AK_drop_test = _kalashnikovDB.AK_drop_test

def AK_drop_test_helper(type, dropargs):
    return _kalashnikovDB.AK_drop_test_helper(type, dropargs)
AK_drop_test_helper = _kalashnikovDB.AK_drop_test_helper
class drop_arguments(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, drop_arguments, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, drop_arguments, name)
    __repr__ = _swig_repr
    __swig_setmethods__["value"] = _kalashnikovDB.drop_arguments_value_set
    __swig_getmethods__["value"] = _kalashnikovDB.drop_arguments_value_get
    if _newclass:
        value = _swig_property(_kalashnikovDB.drop_arguments_value_get, _kalashnikovDB.drop_arguments_value_set)
    __swig_setmethods__["next"] = _kalashnikovDB.drop_arguments_next_set
    __swig_getmethods__["next"] = _kalashnikovDB.drop_arguments_next_get
    if _newclass:
        next = _swig_property(_kalashnikovDB.drop_arguments_next_get, _kalashnikovDB.drop_arguments_next_set)

    def __init__(self):
        this = _kalashnikovDB.new_drop_arguments()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _kalashnikovDB.delete_drop_arguments
    __del__ = lambda self: None
drop_arguments_swigregister = _kalashnikovDB.drop_arguments_swigregister
drop_arguments_swigregister(drop_arguments)


def AK_get_view_obj_id(name):
    return _kalashnikovDB.AK_get_view_obj_id(name)
AK_get_view_obj_id = _kalashnikovDB.AK_get_view_obj_id

def AK_get_view_query(name):
    return _kalashnikovDB.AK_get_view_query(name)
AK_get_view_query = _kalashnikovDB.AK_get_view_query

def AK_get_rel_exp(name):
    return _kalashnikovDB.AK_get_rel_exp(name)
AK_get_rel_exp = _kalashnikovDB.AK_get_rel_exp

def AK_view_add(name, query, rel_exp, set_id):
    return _kalashnikovDB.AK_view_add(name, query, rel_exp, set_id)
AK_view_add = _kalashnikovDB.AK_view_add

def AK_view_remove_by_obj_id(obj_id):
    return _kalashnikovDB.AK_view_remove_by_obj_id(obj_id)
AK_view_remove_by_obj_id = _kalashnikovDB.AK_view_remove_by_obj_id

def AK_view_remove_by_name(name):
    return _kalashnikovDB.AK_view_remove_by_name(name)
AK_view_remove_by_name = _kalashnikovDB.AK_view_remove_by_name

def AK_view_rename(name, new_name):
    return _kalashnikovDB.AK_view_rename(name, new_name)
AK_view_rename = _kalashnikovDB.AK_view_rename

def AK_view_change_query(name, query, rel_exp):
    return _kalashnikovDB.AK_view_change_query(name, query, rel_exp)
AK_view_change_query = _kalashnikovDB.AK_view_change_query

def AK_view_test():
    return _kalashnikovDB.AK_view_test()
AK_view_test = _kalashnikovDB.AK_view_test

def AK_temp_create_table(table, header, type_segment):
    return _kalashnikovDB.AK_temp_create_table(table, header, type_segment)
AK_temp_create_table = _kalashnikovDB.AK_temp_create_table

def AK_create_block_header(old_block, dstTable, att):
    return _kalashnikovDB.AK_create_block_header(old_block, dstTable, att)
AK_create_block_header = _kalashnikovDB.AK_create_block_header

def AK_copy_block_projection(old_block, att, dstTable):
    return _kalashnikovDB.AK_copy_block_projection(old_block, att, dstTable)
AK_copy_block_projection = _kalashnikovDB.AK_copy_block_projection

def AK_projection(srcTable, dstTable, att):
    return _kalashnikovDB.AK_projection(srcTable, dstTable, att)
AK_projection = _kalashnikovDB.AK_projection

def AK_op_projection_test():
    return _kalashnikovDB.AK_op_projection_test()
AK_op_projection_test = _kalashnikovDB.AK_op_projection_test

def AK_create_join_block_header(table_address1, table_address2, new_table, att):
    return _kalashnikovDB.AK_create_join_block_header(table_address1, table_address2, new_table, att)
AK_create_join_block_header = _kalashnikovDB.AK_create_join_block_header

def AK_merge_block_join(row_root, row_root_insert, temp_block, new_table):
    return _kalashnikovDB.AK_merge_block_join(row_root, row_root_insert, temp_block, new_table)
AK_merge_block_join = _kalashnikovDB.AK_merge_block_join

def AK_copy_blocks_join(tbl1_temp_block, tbl2_temp_block, att, new_table):
    return _kalashnikovDB.AK_copy_blocks_join(tbl1_temp_block, tbl2_temp_block, att, new_table)
AK_copy_blocks_join = _kalashnikovDB.AK_copy_blocks_join

def AK_join(srcTable1, srcTable2, dstTable, att):
    return _kalashnikovDB.AK_join(srcTable1, srcTable2, dstTable, att)
AK_join = _kalashnikovDB.AK_join

def AK_op_join_test():
    return _kalashnikovDB.AK_op_join_test()
AK_op_join_test = _kalashnikovDB.AK_op_join_test

def AK_intersect(srcTable1, srcTable2, dstTable):
    return _kalashnikovDB.AK_intersect(srcTable1, srcTable2, dstTable)
AK_intersect = _kalashnikovDB.AK_intersect

def Ak_op_intersect_test():
    return _kalashnikovDB.Ak_op_intersect_test()
Ak_op_intersect_test = _kalashnikovDB.Ak_op_intersect_test
class intersect_attr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, intersect_attr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, intersect_attr, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _kalashnikovDB.intersect_attr_type_set
    __swig_getmethods__["type"] = _kalashnikovDB.intersect_attr_type_get
    if _newclass:
        type = _swig_property(_kalashnikovDB.intersect_attr_type_get, _kalashnikovDB.intersect_attr_type_set)
    __swig_setmethods__["att_name"] = _kalashnikovDB.intersect_attr_att_name_set
    __swig_getmethods__["att_name"] = _kalashnikovDB.intersect_attr_att_name_get
    if _newclass:
        att_name = _swig_property(_kalashnikovDB.intersect_attr_att_name_get, _kalashnikovDB.intersect_attr_att_name_set)

    def __init__(self):
        this = _kalashnikovDB.new_intersect_attr()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _kalashnikovDB.delete_intersect_attr
    __del__ = lambda self: None
intersect_attr_swigregister = _kalashnikovDB.intersect_attr_swigregister
intersect_attr_swigregister(intersect_attr)


def AK_difference(srcTable1, srcTable2, dstTable):
    return _kalashnikovDB.AK_difference(srcTable1, srcTable2, dstTable)
AK_difference = _kalashnikovDB.AK_difference

def Ak_op_difference_test():
    return _kalashnikovDB.Ak_op_difference_test()
Ak_op_difference_test = _kalashnikovDB.Ak_op_difference_test

def AK_rel_eq_get_atrributes_char(tblName):
    return _kalashnikovDB.AK_rel_eq_get_atrributes_char(tblName)
AK_rel_eq_get_atrributes_char = _kalashnikovDB.AK_rel_eq_get_atrributes_char

def AK_rel_eq_cond_attributes(cond):
    return _kalashnikovDB.AK_rel_eq_cond_attributes(cond)
AK_rel_eq_cond_attributes = _kalashnikovDB.AK_rel_eq_cond_attributes

def AK_rel_eq_share_attributes(set, subset):
    return _kalashnikovDB.AK_rel_eq_share_attributes(set, subset)
AK_rel_eq_share_attributes = _kalashnikovDB.AK_rel_eq_share_attributes

def AK_rel_eq_commute_with_theta_join(cond, tblName):
    return _kalashnikovDB.AK_rel_eq_commute_with_theta_join(cond, tblName)
AK_rel_eq_commute_with_theta_join = _kalashnikovDB.AK_rel_eq_commute_with_theta_join

def AK_rel_eq_split_condition(cond):
    return _kalashnikovDB.AK_rel_eq_split_condition(cond)
AK_rel_eq_split_condition = _kalashnikovDB.AK_rel_eq_split_condition

def AK_rel_eq_projection_attributes(attribs, tblName):
    return _kalashnikovDB.AK_rel_eq_projection_attributes(attribs, tblName)
AK_rel_eq_projection_attributes = _kalashnikovDB.AK_rel_eq_projection_attributes

def AK_rel_eq_get_attributes(tblName):
    return _kalashnikovDB.AK_rel_eq_get_attributes(tblName)
AK_rel_eq_get_attributes = _kalashnikovDB.AK_rel_eq_get_attributes

def AK_print_optimized_query(list_query):
    return _kalashnikovDB.AK_print_optimized_query(list_query)
AK_print_optimized_query = _kalashnikovDB.AK_print_optimized_query

def AK_execute_rel_eq(list_query, rel_eq, FLAGS):
    return _kalashnikovDB.AK_execute_rel_eq(list_query, rel_eq, FLAGS)
AK_execute_rel_eq = _kalashnikovDB.AK_execute_rel_eq

def AK_query_optimization(list_query, FLAGS, DIFF_PLANS):
    return _kalashnikovDB.AK_query_optimization(list_query, FLAGS, DIFF_PLANS)
AK_query_optimization = _kalashnikovDB.AK_query_optimization

def AK_query_optimization_test():
    return _kalashnikovDB.AK_query_optimization_test()
AK_query_optimization_test = _kalashnikovDB.AK_query_optimization_test

_kalashnikovDB.MAX_PERMUTATION_swigconstant(_kalashnikovDB)
MAX_PERMUTATION = _kalashnikovDB.MAX_PERMUTATION

def AK_print_rel_eq_comut(list_rel_eq):
    return _kalashnikovDB.AK_print_rel_eq_comut(list_rel_eq)
AK_print_rel_eq_comut = _kalashnikovDB.AK_print_rel_eq_comut

def AK_rel_eq_comut(list_rel_eq):
    return _kalashnikovDB.AK_rel_eq_comut(list_rel_eq)
AK_rel_eq_comut = _kalashnikovDB.AK_rel_eq_comut

def AK_rel_eq_comut_test():
    return _kalashnikovDB.AK_rel_eq_comut_test()
AK_rel_eq_comut_test = _kalashnikovDB.AK_rel_eq_comut_test

def AK_compare(a, b):
    return _kalashnikovDB.AK_compare(a, b)
AK_compare = _kalashnikovDB.AK_compare

def AK_rel_eq_assoc(*args):
    return _kalashnikovDB.AK_rel_eq_assoc(*args)
AK_rel_eq_assoc = _kalashnikovDB.AK_rel_eq_assoc

def AK_print_rel_eq_assoc(list_rel_eq):
    return _kalashnikovDB.AK_print_rel_eq_assoc(list_rel_eq)
AK_print_rel_eq_assoc = _kalashnikovDB.AK_print_rel_eq_assoc

def AK_rel_eq_assoc_test():
    return _kalashnikovDB.AK_rel_eq_assoc_test()
AK_rel_eq_assoc_test = _kalashnikovDB.AK_rel_eq_assoc_test
class cost_eval_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cost_eval_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cost_eval_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["value"] = _kalashnikovDB.cost_eval_t_value_set
    __swig_getmethods__["value"] = _kalashnikovDB.cost_eval_t_value_get
    if _newclass:
        value = _swig_property(_kalashnikovDB.cost_eval_t_value_get, _kalashnikovDB.cost_eval_t_value_set)
    __swig_setmethods__["data"] = _kalashnikovDB.cost_eval_t_data_set
    __swig_getmethods__["data"] = _kalashnikovDB.cost_eval_t_data_get
    if _newclass:
        data = _swig_property(_kalashnikovDB.cost_eval_t_data_get, _kalashnikovDB.cost_eval_t_data_set)

    def __init__(self):
        this = _kalashnikovDB.new_cost_eval_t()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _kalashnikovDB.delete_cost_eval_t
    __del__ = lambda self: None
cost_eval_t_swigregister = _kalashnikovDB.cost_eval_t_swigregister
cost_eval_t_swigregister(cost_eval_t)


def AK_rel_eq_is_attr_subset(set, subset):
    return _kalashnikovDB.AK_rel_eq_is_attr_subset(set, subset)
AK_rel_eq_is_attr_subset = _kalashnikovDB.AK_rel_eq_is_attr_subset

def AK_rel_eq_selection(*args):
    return _kalashnikovDB.AK_rel_eq_selection(*args)
AK_rel_eq_selection = _kalashnikovDB.AK_rel_eq_selection

def AK_print_rel_eq_selection(list_rel_eq):
    return _kalashnikovDB.AK_print_rel_eq_selection(list_rel_eq)
AK_print_rel_eq_selection = _kalashnikovDB.AK_print_rel_eq_selection

def AK_rel_eq_selection_test():
    return _kalashnikovDB.AK_rel_eq_selection_test()
AK_rel_eq_selection_test = _kalashnikovDB.AK_rel_eq_selection_test

def AK_rel_eq_is_subset(list_elem_set, list_elem_subset):
    return _kalashnikovDB.AK_rel_eq_is_subset(list_elem_set, list_elem_subset)
AK_rel_eq_is_subset = _kalashnikovDB.AK_rel_eq_is_subset

def AK_rel_eq_can_commute(list_elem_attribs, list_elem_conds):
    return _kalashnikovDB.AK_rel_eq_can_commute(list_elem_attribs, list_elem_conds)
AK_rel_eq_can_commute = _kalashnikovDB.AK_rel_eq_can_commute

def AK_rel_eq_collect_cond_attributes(list_elem):
    return _kalashnikovDB.AK_rel_eq_collect_cond_attributes(list_elem)
AK_rel_eq_collect_cond_attributes = _kalashnikovDB.AK_rel_eq_collect_cond_attributes

def AK_rel_eq_remove_duplicates(attribs):
    return _kalashnikovDB.AK_rel_eq_remove_duplicates(attribs)
AK_rel_eq_remove_duplicates = _kalashnikovDB.AK_rel_eq_remove_duplicates

def AK_rel_eq_projection(*args):
    return _kalashnikovDB.AK_rel_eq_projection(*args)
AK_rel_eq_projection = _kalashnikovDB.AK_rel_eq_projection

def AK_print_rel_eq_projection(list_rel_eq):
    return _kalashnikovDB.AK_print_rel_eq_projection(list_rel_eq)
AK_print_rel_eq_projection = _kalashnikovDB.AK_print_rel_eq_projection

def AK_rel_eq_projection_test():
    return _kalashnikovDB.AK_rel_eq_projection_test()
AK_rel_eq_projection_test = _kalashnikovDB.AK_rel_eq_projection_test

def AK_check_arithmetic_statement(el, op, a, b):
    return _kalashnikovDB.AK_check_arithmetic_statement(el, op, a, b)
AK_check_arithmetic_statement = _kalashnikovDB.AK_check_arithmetic_statement

def AK_check_if_row_satisfies_expression(row_root, expr):
    return _kalashnikovDB.AK_check_if_row_satisfies_expression(row_root, expr)
AK_check_if_row_satisfies_expression = _kalashnikovDB.AK_check_if_row_satisfies_expression

def Ak_expression_check_test():
    return _kalashnikovDB.Ak_expression_check_test()
Ak_expression_check_test = _kalashnikovDB.Ak_expression_check_test

def AK_get_id():
    return _kalashnikovDB.AK_get_id()
AK_get_id = _kalashnikovDB.AK_get_id

def AK_get_table_id(tableName):
    return _kalashnikovDB.AK_get_table_id(tableName)
AK_get_table_id = _kalashnikovDB.AK_get_table_id

def Ak_id_test():
    return _kalashnikovDB.Ak_id_test()
Ak_id_test = _kalashnikovDB.Ak_id_test

_kalashnikovDB.ID_START_VALUE_swigconstant(_kalashnikovDB)
ID_START_VALUE = _kalashnikovDB.ID_START_VALUE

def AK_set_constraint_not_null(tableName, attName, constraintName):
    return _kalashnikovDB.AK_set_constraint_not_null(tableName, attName, constraintName)
AK_set_constraint_not_null = _kalashnikovDB.AK_set_constraint_not_null

def AK_read_constraint_not_null(tableName, attName, newValue):
    return _kalashnikovDB.AK_read_constraint_not_null(tableName, attName, newValue)
AK_read_constraint_not_null = _kalashnikovDB.AK_read_constraint_not_null

def AK_null_test():
    return _kalashnikovDB.AK_null_test()
AK_null_test = _kalashnikovDB.AK_null_test

def AK_set_constraint_between(tableName, constraintName, attName, startValue, endValue):
    return _kalashnikovDB.AK_set_constraint_between(tableName, constraintName, attName, startValue, endValue)
AK_set_constraint_between = _kalashnikovDB.AK_set_constraint_between

def AK_read_constraint_between(tableName, newValue, attNamePar):
    return _kalashnikovDB.AK_read_constraint_between(tableName, newValue, attNamePar)
AK_read_constraint_between = _kalashnikovDB.AK_read_constraint_between

def Ak_constraint_between_test():
    return _kalashnikovDB.Ak_constraint_between_test()
Ak_constraint_between_test = _kalashnikovDB.Ak_constraint_between_test

def AK_add_reference(childTable, childAttNames, parentTable, parentAttNames, attNum, constraintName, type):
    return _kalashnikovDB.AK_add_reference(childTable, childAttNames, parentTable, parentAttNames, attNum, constraintName, type)
AK_add_reference = _kalashnikovDB.AK_add_reference

def AK_get_reference(tableName, constraintName):
    return _kalashnikovDB.AK_get_reference(tableName, constraintName)
AK_get_reference = _kalashnikovDB.AK_get_reference

def AK_reference_check_attribute(tableName, attribute, value):
    return _kalashnikovDB.AK_reference_check_attribute(tableName, attribute, value)
AK_reference_check_attribute = _kalashnikovDB.AK_reference_check_attribute

def AK_reference_check_if_update_needed(lista, action):
    return _kalashnikovDB.AK_reference_check_if_update_needed(lista, action)
AK_reference_check_if_update_needed = _kalashnikovDB.AK_reference_check_if_update_needed

def AK_reference_check_restricion(lista, action):
    return _kalashnikovDB.AK_reference_check_restricion(lista, action)
AK_reference_check_restricion = _kalashnikovDB.AK_reference_check_restricion

def AK_reference_update(lista, action):
    return _kalashnikovDB.AK_reference_update(lista, action)
AK_reference_update = _kalashnikovDB.AK_reference_update

def AK_reference_check_entry(lista):
    return _kalashnikovDB.AK_reference_check_entry(lista)
AK_reference_check_entry = _kalashnikovDB.AK_reference_check_entry

def AK_reference_test():
    return _kalashnikovDB.AK_reference_test()
AK_reference_test = _kalashnikovDB.AK_reference_test

_kalashnikovDB.REF_TYPE_NONE_swigconstant(_kalashnikovDB)
REF_TYPE_NONE = _kalashnikovDB.REF_TYPE_NONE

_kalashnikovDB.REF_TYPE_SET_NULL_swigconstant(_kalashnikovDB)
REF_TYPE_SET_NULL = _kalashnikovDB.REF_TYPE_SET_NULL

_kalashnikovDB.REF_TYPE_NO_ACTION_swigconstant(_kalashnikovDB)
REF_TYPE_NO_ACTION = _kalashnikovDB.REF_TYPE_NO_ACTION

_kalashnikovDB.REF_TYPE_CASCADE_swigconstant(_kalashnikovDB)
REF_TYPE_CASCADE = _kalashnikovDB.REF_TYPE_CASCADE

_kalashnikovDB.REF_TYPE_RESTRICT_swigconstant(_kalashnikovDB)
REF_TYPE_RESTRICT = _kalashnikovDB.REF_TYPE_RESTRICT

_kalashnikovDB.REF_TYPE_SET_DEFAULT_swigconstant(_kalashnikovDB)
REF_TYPE_SET_DEFAULT = _kalashnikovDB.REF_TYPE_SET_DEFAULT

_kalashnikovDB.MAX_REFERENCE_ATTRIBUTES_swigconstant(_kalashnikovDB)
MAX_REFERENCE_ATTRIBUTES = _kalashnikovDB.MAX_REFERENCE_ATTRIBUTES

_kalashnikovDB.MAX_CHILD_CONSTRAINTS_swigconstant(_kalashnikovDB)
MAX_CHILD_CONSTRAINTS = _kalashnikovDB.MAX_CHILD_CONSTRAINTS
class AK_ref_item(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AK_ref_item, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AK_ref_item, name)
    __repr__ = _swig_repr
    __swig_setmethods__["table"] = _kalashnikovDB.AK_ref_item_table_set
    __swig_getmethods__["table"] = _kalashnikovDB.AK_ref_item_table_get
    if _newclass:
        table = _swig_property(_kalashnikovDB.AK_ref_item_table_get, _kalashnikovDB.AK_ref_item_table_set)
    __swig_setmethods__["attributes"] = _kalashnikovDB.AK_ref_item_attributes_set
    __swig_getmethods__["attributes"] = _kalashnikovDB.AK_ref_item_attributes_get
    if _newclass:
        attributes = _swig_property(_kalashnikovDB.AK_ref_item_attributes_get, _kalashnikovDB.AK_ref_item_attributes_set)
    __swig_setmethods__["parent"] = _kalashnikovDB.AK_ref_item_parent_set
    __swig_getmethods__["parent"] = _kalashnikovDB.AK_ref_item_parent_get
    if _newclass:
        parent = _swig_property(_kalashnikovDB.AK_ref_item_parent_get, _kalashnikovDB.AK_ref_item_parent_set)
    __swig_setmethods__["parent_attributes"] = _kalashnikovDB.AK_ref_item_parent_attributes_set
    __swig_getmethods__["parent_attributes"] = _kalashnikovDB.AK_ref_item_parent_attributes_get
    if _newclass:
        parent_attributes = _swig_property(_kalashnikovDB.AK_ref_item_parent_attributes_get, _kalashnikovDB.AK_ref_item_parent_attributes_set)
    __swig_setmethods__["attributes_number"] = _kalashnikovDB.AK_ref_item_attributes_number_set
    __swig_getmethods__["attributes_number"] = _kalashnikovDB.AK_ref_item_attributes_number_get
    if _newclass:
        attributes_number = _swig_property(_kalashnikovDB.AK_ref_item_attributes_number_get, _kalashnikovDB.AK_ref_item_attributes_number_set)
    __swig_setmethods__["constraint"] = _kalashnikovDB.AK_ref_item_constraint_set
    __swig_getmethods__["constraint"] = _kalashnikovDB.AK_ref_item_constraint_get
    if _newclass:
        constraint = _swig_property(_kalashnikovDB.AK_ref_item_constraint_get, _kalashnikovDB.AK_ref_item_constraint_set)
    __swig_setmethods__["type"] = _kalashnikovDB.AK_ref_item_type_set
    __swig_getmethods__["type"] = _kalashnikovDB.AK_ref_item_type_get
    if _newclass:
        type = _swig_property(_kalashnikovDB.AK_ref_item_type_get, _kalashnikovDB.AK_ref_item_type_set)

    def __init__(self):
        this = _kalashnikovDB.new_AK_ref_item()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _kalashnikovDB.delete_AK_ref_item
    __del__ = lambda self: None
AK_ref_item_swigregister = _kalashnikovDB.AK_ref_item_swigregister
AK_ref_item_swigregister(AK_ref_item)


_kalashnikovDB.AK_LOCK_RELEASED_swigconstant(_kalashnikovDB)
AK_LOCK_RELEASED = _kalashnikovDB.AK_LOCK_RELEASED

_kalashnikovDB.AK_TRANSACTION_FINISHED_swigconstant(_kalashnikovDB)
AK_TRANSACTION_FINISHED = _kalashnikovDB.AK_TRANSACTION_FINISHED

_kalashnikovDB.AK_ALL_TRANSACTION_FINISHED_swigconstant(_kalashnikovDB)
AK_ALL_TRANSACTION_FINISHED = _kalashnikovDB.AK_ALL_TRANSACTION_FINISHED
class observable_transaction_struct(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, observable_transaction_struct, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, observable_transaction_struct, name)
    __repr__ = _swig_repr
    __swig_setmethods__["AK_transaction_register_observer"] = _kalashnikovDB.observable_transaction_struct_AK_transaction_register_observer_set
    __swig_getmethods__["AK_transaction_register_observer"] = _kalashnikovDB.observable_transaction_struct_AK_transaction_register_observer_get
    if _newclass:
        AK_transaction_register_observer = _swig_property(_kalashnikovDB.observable_transaction_struct_AK_transaction_register_observer_get, _kalashnikovDB.observable_transaction_struct_AK_transaction_register_observer_set)
    __swig_setmethods__["AK_transaction_unregister_observer"] = _kalashnikovDB.observable_transaction_struct_AK_transaction_unregister_observer_set
    __swig_getmethods__["AK_transaction_unregister_observer"] = _kalashnikovDB.observable_transaction_struct_AK_transaction_unregister_observer_get
    if _newclass:
        AK_transaction_unregister_observer = _swig_property(_kalashnikovDB.observable_transaction_struct_AK_transaction_unregister_observer_get, _kalashnikovDB.observable_transaction_struct_AK_transaction_unregister_observer_set)
    __swig_setmethods__["AK_lock_released"] = _kalashnikovDB.observable_transaction_struct_AK_lock_released_set
    __swig_getmethods__["AK_lock_released"] = _kalashnikovDB.observable_transaction_struct_AK_lock_released_get
    if _newclass:
        AK_lock_released = _swig_property(_kalashnikovDB.observable_transaction_struct_AK_lock_released_get, _kalashnikovDB.observable_transaction_struct_AK_lock_released_set)
    __swig_setmethods__["AK_transaction_finished"] = _kalashnikovDB.observable_transaction_struct_AK_transaction_finished_set
    __swig_getmethods__["AK_transaction_finished"] = _kalashnikovDB.observable_transaction_struct_AK_transaction_finished_get
    if _newclass:
        AK_transaction_finished = _swig_property(_kalashnikovDB.observable_transaction_struct_AK_transaction_finished_get, _kalashnikovDB.observable_transaction_struct_AK_transaction_finished_set)
    __swig_setmethods__["AK_all_transactions_finished"] = _kalashnikovDB.observable_transaction_struct_AK_all_transactions_finished_set
    __swig_getmethods__["AK_all_transactions_finished"] = _kalashnikovDB.observable_transaction_struct_AK_all_transactions_finished_get
    if _newclass:
        AK_all_transactions_finished = _swig_property(_kalashnikovDB.observable_transaction_struct_AK_all_transactions_finished_get, _kalashnikovDB.observable_transaction_struct_AK_all_transactions_finished_set)
    __swig_setmethods__["observable"] = _kalashnikovDB.observable_transaction_struct_observable_set
    __swig_getmethods__["observable"] = _kalashnikovDB.observable_transaction_struct_observable_get
    if _newclass:
        observable = _swig_property(_kalashnikovDB.observable_transaction_struct_observable_get, _kalashnikovDB.observable_transaction_struct_observable_set)

    def __init__(self):
        this = _kalashnikovDB.new_observable_transaction_struct()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _kalashnikovDB.delete_observable_transaction_struct
    __del__ = lambda self: None
observable_transaction_struct_swigregister = _kalashnikovDB.observable_transaction_struct_swigregister
observable_transaction_struct_swigregister(observable_transaction_struct)

class observer_lock(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, observer_lock, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, observer_lock, name)
    __repr__ = _swig_repr
    __swig_setmethods__["observer"] = _kalashnikovDB.observer_lock_observer_set
    __swig_getmethods__["observer"] = _kalashnikovDB.observer_lock_observer_get
    if _newclass:
        observer = _swig_property(_kalashnikovDB.observer_lock_observer_get, _kalashnikovDB.observer_lock_observer_set)

    def __init__(self):
        this = _kalashnikovDB.new_observer_lock()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _kalashnikovDB.delete_observer_lock
    __del__ = lambda self: None
observer_lock_swigregister = _kalashnikovDB.observer_lock_swigregister
observer_lock_swigregister(observer_lock)

class transaction_locks_list_elem(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, transaction_locks_list_elem, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, transaction_locks_list_elem, name)
    __repr__ = _swig_repr
    __swig_setmethods__["TransactionId"] = _kalashnikovDB.transaction_locks_list_elem_TransactionId_set
    __swig_getmethods__["TransactionId"] = _kalashnikovDB.transaction_locks_list_elem_TransactionId_get
    if _newclass:
        TransactionId = _swig_property(_kalashnikovDB.transaction_locks_list_elem_TransactionId_get, _kalashnikovDB.transaction_locks_list_elem_TransactionId_set)
    __swig_setmethods__["lock_type"] = _kalashnikovDB.transaction_locks_list_elem_lock_type_set
    __swig_getmethods__["lock_type"] = _kalashnikovDB.transaction_locks_list_elem_lock_type_get
    if _newclass:
        lock_type = _swig_property(_kalashnikovDB.transaction_locks_list_elem_lock_type_get, _kalashnikovDB.transaction_locks_list_elem_lock_type_set)
    __swig_setmethods__["isWaiting"] = _kalashnikovDB.transaction_locks_list_elem_isWaiting_set
    __swig_getmethods__["isWaiting"] = _kalashnikovDB.transaction_locks_list_elem_isWaiting_get
    if _newclass:
        isWaiting = _swig_property(_kalashnikovDB.transaction_locks_list_elem_isWaiting_get, _kalashnikovDB.transaction_locks_list_elem_isWaiting_set)
    __swig_setmethods__["nextLock"] = _kalashnikovDB.transaction_locks_list_elem_nextLock_set
    __swig_getmethods__["nextLock"] = _kalashnikovDB.transaction_locks_list_elem_nextLock_get
    if _newclass:
        nextLock = _swig_property(_kalashnikovDB.transaction_locks_list_elem_nextLock_get, _kalashnikovDB.transaction_locks_list_elem_nextLock_set)
    __swig_setmethods__["prevLock"] = _kalashnikovDB.transaction_locks_list_elem_prevLock_set
    __swig_getmethods__["prevLock"] = _kalashnikovDB.transaction_locks_list_elem_prevLock_get
    if _newclass:
        prevLock = _swig_property(_kalashnikovDB.transaction_locks_list_elem_prevLock_get, _kalashnikovDB.transaction_locks_list_elem_prevLock_set)

    def __init__(self):
        this = _kalashnikovDB.new_transaction_locks_list_elem()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _kalashnikovDB.delete_transaction_locks_list_elem
    __del__ = lambda self: None
transaction_locks_list_elem_swigregister = _kalashnikovDB.transaction_locks_list_elem_swigregister
transaction_locks_list_elem_swigregister(transaction_locks_list_elem)

class transaction_list_elem(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, transaction_list_elem, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, transaction_list_elem, name)
    __repr__ = _swig_repr
    __swig_setmethods__["address"] = _kalashnikovDB.transaction_list_elem_address_set
    __swig_getmethods__["address"] = _kalashnikovDB.transaction_list_elem_address_get
    if _newclass:
        address = _swig_property(_kalashnikovDB.transaction_list_elem_address_get, _kalashnikovDB.transaction_list_elem_address_set)
    __swig_setmethods__["lock_type"] = _kalashnikovDB.transaction_list_elem_lock_type_set
    __swig_getmethods__["lock_type"] = _kalashnikovDB.transaction_list_elem_lock_type_get
    if _newclass:
        lock_type = _swig_property(_kalashnikovDB.transaction_list_elem_lock_type_get, _kalashnikovDB.transaction_list_elem_lock_type_set)
    __swig_setmethods__["isWaiting"] = _kalashnikovDB.transaction_list_elem_isWaiting_set
    __swig_getmethods__["isWaiting"] = _kalashnikovDB.transaction_list_elem_isWaiting_get
    if _newclass:
        isWaiting = _swig_property(_kalashnikovDB.transaction_list_elem_isWaiting_get, _kalashnikovDB.transaction_list_elem_isWaiting_set)
    __swig_setmethods__["DLLLocksHead"] = _kalashnikovDB.transaction_list_elem_DLLLocksHead_set
    __swig_getmethods__["DLLLocksHead"] = _kalashnikovDB.transaction_list_elem_DLLLocksHead_get
    if _newclass:
        DLLLocksHead = _swig_property(_kalashnikovDB.transaction_list_elem_DLLLocksHead_get, _kalashnikovDB.transaction_list_elem_DLLLocksHead_set)
    __swig_setmethods__["nextBucket"] = _kalashnikovDB.transaction_list_elem_nextBucket_set
    __swig_getmethods__["nextBucket"] = _kalashnikovDB.transaction_list_elem_nextBucket_get
    if _newclass:
        nextBucket = _swig_property(_kalashnikovDB.transaction_list_elem_nextBucket_get, _kalashnikovDB.transaction_list_elem_nextBucket_set)
    __swig_setmethods__["prevBucket"] = _kalashnikovDB.transaction_list_elem_prevBucket_set
    __swig_getmethods__["prevBucket"] = _kalashnikovDB.transaction_list_elem_prevBucket_get
    if _newclass:
        prevBucket = _swig_property(_kalashnikovDB.transaction_list_elem_prevBucket_get, _kalashnikovDB.transaction_list_elem_prevBucket_set)
    __swig_setmethods__["observer_lock"] = _kalashnikovDB.transaction_list_elem_observer_lock_set
    __swig_getmethods__["observer_lock"] = _kalashnikovDB.transaction_list_elem_observer_lock_get
    if _newclass:
        observer_lock = _swig_property(_kalashnikovDB.transaction_list_elem_observer_lock_get, _kalashnikovDB.transaction_list_elem_observer_lock_set)

    def __init__(self):
        this = _kalashnikovDB.new_transaction_list_elem()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _kalashnikovDB.delete_transaction_list_elem
    __del__ = lambda self: None
transaction_list_elem_swigregister = _kalashnikovDB.transaction_list_elem_swigregister
transaction_list_elem_swigregister(transaction_list_elem)

class transaction_list_head(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, transaction_list_head, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, transaction_list_head, name)
    __repr__ = _swig_repr
    __swig_setmethods__["DLLHead"] = _kalashnikovDB.transaction_list_head_DLLHead_set
    __swig_getmethods__["DLLHead"] = _kalashnikovDB.transaction_list_head_DLLHead_get
    if _newclass:
        DLLHead = _swig_property(_kalashnikovDB.transaction_list_head_DLLHead_get, _kalashnikovDB.transaction_list_head_DLLHead_set)

    def __init__(self):
        this = _kalashnikovDB.new_transaction_list_head()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _kalashnikovDB.delete_transaction_list_head
    __del__ = lambda self: None
transaction_list_head_swigregister = _kalashnikovDB.transaction_list_head_swigregister
transaction_list_head_swigregister(transaction_list_head)

class memoryAddresses(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, memoryAddresses, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, memoryAddresses, name)
    __repr__ = _swig_repr
    __swig_setmethods__["adresa"] = _kalashnikovDB.memoryAddresses_adresa_set
    __swig_getmethods__["adresa"] = _kalashnikovDB.memoryAddresses_adresa_get
    if _newclass:
        adresa = _swig_property(_kalashnikovDB.memoryAddresses_adresa_get, _kalashnikovDB.memoryAddresses_adresa_set)
    __swig_setmethods__["nextElement"] = _kalashnikovDB.memoryAddresses_nextElement_set
    __swig_getmethods__["nextElement"] = _kalashnikovDB.memoryAddresses_nextElement_get
    if _newclass:
        nextElement = _swig_property(_kalashnikovDB.memoryAddresses_nextElement_get, _kalashnikovDB.memoryAddresses_nextElement_set)

    def __init__(self):
        this = _kalashnikovDB.new_memoryAddresses()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _kalashnikovDB.delete_memoryAddresses
    __del__ = lambda self: None
memoryAddresses_swigregister = _kalashnikovDB.memoryAddresses_swigregister
memoryAddresses_swigregister(memoryAddresses)

class transactionData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, transactionData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, transactionData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["lengthOfArray"] = _kalashnikovDB.transactionData_lengthOfArray_set
    __swig_getmethods__["lengthOfArray"] = _kalashnikovDB.transactionData_lengthOfArray_get
    if _newclass:
        lengthOfArray = _swig_property(_kalashnikovDB.transactionData_lengthOfArray_get, _kalashnikovDB.transactionData_lengthOfArray_set)
    __swig_setmethods__["array"] = _kalashnikovDB.transactionData_array_set
    __swig_getmethods__["array"] = _kalashnikovDB.transactionData_array_get
    if _newclass:
        array = _swig_property(_kalashnikovDB.transactionData_array_get, _kalashnikovDB.transactionData_array_set)

    def __init__(self):
        this = _kalashnikovDB.new_transactionData()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _kalashnikovDB.delete_transactionData
    __del__ = lambda self: None
transactionData_swigregister = _kalashnikovDB.transactionData_swigregister
transactionData_swigregister(transactionData)

class threadContainer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, threadContainer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, threadContainer, name)
    __repr__ = _swig_repr
    __swig_setmethods__["thread"] = _kalashnikovDB.threadContainer_thread_set
    __swig_getmethods__["thread"] = _kalashnikovDB.threadContainer_thread_get
    if _newclass:
        thread = _swig_property(_kalashnikovDB.threadContainer_thread_get, _kalashnikovDB.threadContainer_thread_set)
    __swig_setmethods__["nextThread"] = _kalashnikovDB.threadContainer_nextThread_set
    __swig_getmethods__["nextThread"] = _kalashnikovDB.threadContainer_nextThread_get
    if _newclass:
        nextThread = _swig_property(_kalashnikovDB.threadContainer_nextThread_get, _kalashnikovDB.threadContainer_nextThread_set)

    def __init__(self):
        this = _kalashnikovDB.new_threadContainer()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _kalashnikovDB.delete_threadContainer
    __del__ = lambda self: None
threadContainer_swigregister = _kalashnikovDB.threadContainer_swigregister
threadContainer_swigregister(threadContainer)


def AK_memory_block_hash(arg1):
    return _kalashnikovDB.AK_memory_block_hash(arg1)
AK_memory_block_hash = _kalashnikovDB.AK_memory_block_hash

def AK_search_existing_link_for_hook(arg1):
    return _kalashnikovDB.AK_search_existing_link_for_hook(arg1)
AK_search_existing_link_for_hook = _kalashnikovDB.AK_search_existing_link_for_hook

def AK_search_empty_link_for_hook(arg1):
    return _kalashnikovDB.AK_search_empty_link_for_hook(arg1)
AK_search_empty_link_for_hook = _kalashnikovDB.AK_search_empty_link_for_hook

def AK_add_hash_entry_list(arg1, arg2):
    return _kalashnikovDB.AK_add_hash_entry_list(arg1, arg2)
AK_add_hash_entry_list = _kalashnikovDB.AK_add_hash_entry_list

def AK_delete_hash_entry_list(arg1):
    return _kalashnikovDB.AK_delete_hash_entry_list(arg1)
AK_delete_hash_entry_list = _kalashnikovDB.AK_delete_hash_entry_list

def AK_search_lock_entry_list_by_key(arg1, arg2, arg3):
    return _kalashnikovDB.AK_search_lock_entry_list_by_key(arg1, arg2, arg3)
AK_search_lock_entry_list_by_key = _kalashnikovDB.AK_search_lock_entry_list_by_key

def AK_delete_lock_entry_list(arg1, arg2):
    return _kalashnikovDB.AK_delete_lock_entry_list(arg1, arg2)
AK_delete_lock_entry_list = _kalashnikovDB.AK_delete_lock_entry_list

def AK_isLock_waiting(arg1, arg2, arg3, arg4):
    return _kalashnikovDB.AK_isLock_waiting(arg1, arg2, arg3, arg4)
AK_isLock_waiting = _kalashnikovDB.AK_isLock_waiting

def AK_add_lock(arg1, arg2, arg3):
    return _kalashnikovDB.AK_add_lock(arg1, arg2, arg3)
AK_add_lock = _kalashnikovDB.AK_add_lock

def AK_create_lock(arg1, arg2, arg3):
    return _kalashnikovDB.AK_create_lock(arg1, arg2, arg3)
AK_create_lock = _kalashnikovDB.AK_create_lock

def AK_acquire_lock(arg1, arg2, arg3):
    return _kalashnikovDB.AK_acquire_lock(arg1, arg2, arg3)
AK_acquire_lock = _kalashnikovDB.AK_acquire_lock

def AK_release_locks(arg1, arg2):
    return _kalashnikovDB.AK_release_locks(arg1, arg2)
AK_release_locks = _kalashnikovDB.AK_release_locks

def AK_get_memory_blocks(arg1, arg2):
    return _kalashnikovDB.AK_get_memory_blocks(arg1, arg2)
AK_get_memory_blocks = _kalashnikovDB.AK_get_memory_blocks

def AK_execute_commands(arg1, arg2):
    return _kalashnikovDB.AK_execute_commands(arg1, arg2)
AK_execute_commands = _kalashnikovDB.AK_execute_commands

def AK_execute_transaction(arg1):
    return _kalashnikovDB.AK_execute_transaction(arg1)
AK_execute_transaction = _kalashnikovDB.AK_execute_transaction

def AK_transaction_manager(arg1, arg2):
    return _kalashnikovDB.AK_transaction_manager(arg1, arg2)
AK_transaction_manager = _kalashnikovDB.AK_transaction_manager

def AK_test_Transaction():
    return _kalashnikovDB.AK_test_Transaction()
AK_test_Transaction = _kalashnikovDB.AK_test_Transaction

def AK_create_new_transaction_thread(arg1):
    return _kalashnikovDB.AK_create_new_transaction_thread(arg1)
AK_create_new_transaction_thread = _kalashnikovDB.AK_create_new_transaction_thread

def AK_remove_transaction_thread(arg1):
    return _kalashnikovDB.AK_remove_transaction_thread(arg1)
AK_remove_transaction_thread = _kalashnikovDB.AK_remove_transaction_thread

def handle_transaction_notify(arg1):
    return _kalashnikovDB.handle_transaction_notify(arg1)
handle_transaction_notify = _kalashnikovDB.handle_transaction_notify

def AK_on_observable_notify(arg1, arg2, arg3):
    return _kalashnikovDB.AK_on_observable_notify(arg1, arg2, arg3)
AK_on_observable_notify = _kalashnikovDB.AK_on_observable_notify

def AK_on_transaction_end(arg1):
    return _kalashnikovDB.AK_on_transaction_end(arg1)
AK_on_transaction_end = _kalashnikovDB.AK_on_transaction_end

def AK_on_lock_release():
    return _kalashnikovDB.AK_on_lock_release()
AK_on_lock_release = _kalashnikovDB.AK_on_lock_release

def AK_on_all_transactions_end():
    return _kalashnikovDB.AK_on_all_transactions_end()
AK_on_all_transactions_end = _kalashnikovDB.AK_on_all_transactions_end

def AK_handle_observable_transaction_action(arg1):
    return _kalashnikovDB.AK_handle_observable_transaction_action(arg1)
AK_handle_observable_transaction_action = _kalashnikovDB.AK_handle_observable_transaction_action

def AK_lock_released():
    return _kalashnikovDB.AK_lock_released()
AK_lock_released = _kalashnikovDB.AK_lock_released

def AK_transaction_finished():
    return _kalashnikovDB.AK_transaction_finished()
AK_transaction_finished = _kalashnikovDB.AK_transaction_finished

def AK_all_transactions_finished():
    return _kalashnikovDB.AK_all_transactions_finished()
AK_all_transactions_finished = _kalashnikovDB.AK_all_transactions_finished

def AK_transaction_register_observer(arg1, arg2):
    return _kalashnikovDB.AK_transaction_register_observer(arg1, arg2)
AK_transaction_register_observer = _kalashnikovDB.AK_transaction_register_observer

def AK_transaction_unregister_observer(arg1, arg2):
    return _kalashnikovDB.AK_transaction_unregister_observer(arg1, arg2)
AK_transaction_unregister_observer = _kalashnikovDB.AK_transaction_unregister_observer

def AK_init_observable_transaction():
    return _kalashnikovDB.AK_init_observable_transaction()
AK_init_observable_transaction = _kalashnikovDB.AK_init_observable_transaction

def AK_init_observer_lock():
    return _kalashnikovDB.AK_init_observer_lock()
AK_init_observer_lock = _kalashnikovDB.AK_init_observer_lock

def AK_user_add(username, password, set_id):
    return _kalashnikovDB.AK_user_add(username, password, set_id)
AK_user_add = _kalashnikovDB.AK_user_add

def AK_user_get_id(username):
    return _kalashnikovDB.AK_user_get_id(username)
AK_user_get_id = _kalashnikovDB.AK_user_get_id

def AK_user_remove_by_name(name):
    return _kalashnikovDB.AK_user_remove_by_name(name)
AK_user_remove_by_name = _kalashnikovDB.AK_user_remove_by_name

def AK_user_rename(old_name, new_name, password):
    return _kalashnikovDB.AK_user_rename(old_name, new_name, password)
AK_user_rename = _kalashnikovDB.AK_user_rename

def AK_group_add(name, set_id):
    return _kalashnikovDB.AK_group_add(name, set_id)
AK_group_add = _kalashnikovDB.AK_group_add

def AK_group_get_id(name):
    return _kalashnikovDB.AK_group_get_id(name)
AK_group_get_id = _kalashnikovDB.AK_group_get_id

def AK_group_remove_by_name(name):
    return _kalashnikovDB.AK_group_remove_by_name(name)
AK_group_remove_by_name = _kalashnikovDB.AK_group_remove_by_name

def AK_group_rename(old_name, new_name):
    return _kalashnikovDB.AK_group_rename(old_name, new_name)
AK_group_rename = _kalashnikovDB.AK_group_rename

def AK_grant_privilege_user(username, table, right):
    return _kalashnikovDB.AK_grant_privilege_user(username, table, right)
AK_grant_privilege_user = _kalashnikovDB.AK_grant_privilege_user

def AK_revoke_privilege_user(username, table, right):
    return _kalashnikovDB.AK_revoke_privilege_user(username, table, right)
AK_revoke_privilege_user = _kalashnikovDB.AK_revoke_privilege_user

def AK_revoke_all_privileges_user(username):
    return _kalashnikovDB.AK_revoke_all_privileges_user(username)
AK_revoke_all_privileges_user = _kalashnikovDB.AK_revoke_all_privileges_user

def AK_grant_privilege_group(groupname, table, right):
    return _kalashnikovDB.AK_grant_privilege_group(groupname, table, right)
AK_grant_privilege_group = _kalashnikovDB.AK_grant_privilege_group

def AK_revoke_privilege_group(groupname, table, right):
    return _kalashnikovDB.AK_revoke_privilege_group(groupname, table, right)
AK_revoke_privilege_group = _kalashnikovDB.AK_revoke_privilege_group

def AK_revoke_all_privileges_group(groupname):
    return _kalashnikovDB.AK_revoke_all_privileges_group(groupname)
AK_revoke_all_privileges_group = _kalashnikovDB.AK_revoke_all_privileges_group

def AK_add_user_to_group(user, group):
    return _kalashnikovDB.AK_add_user_to_group(user, group)
AK_add_user_to_group = _kalashnikovDB.AK_add_user_to_group

def AK_remove_user_from_all_groups(user):
    return _kalashnikovDB.AK_remove_user_from_all_groups(user)
AK_remove_user_from_all_groups = _kalashnikovDB.AK_remove_user_from_all_groups

def AK_remove_all_users_from_group(group):
    return _kalashnikovDB.AK_remove_all_users_from_group(group)
AK_remove_all_users_from_group = _kalashnikovDB.AK_remove_all_users_from_group

def AK_check_privilege(username, table, privilege):
    return _kalashnikovDB.AK_check_privilege(username, table, privilege)
AK_check_privilege = _kalashnikovDB.AK_check_privilege

def AK_check_user_privilege(user):
    return _kalashnikovDB.AK_check_user_privilege(user)
AK_check_user_privilege = _kalashnikovDB.AK_check_user_privilege

def AK_check_group_privilege(group):
    return _kalashnikovDB.AK_check_group_privilege(group)
AK_check_group_privilege = _kalashnikovDB.AK_check_group_privilege

def AK_privileges_test():
    return _kalashnikovDB.AK_privileges_test()
AK_privileges_test = _kalashnikovDB.AK_privileges_test

def AK_register_observer(arg1, observer):
    return _kalashnikovDB.AK_register_observer(arg1, observer)
AK_register_observer = _kalashnikovDB.AK_register_observer

def AK_unregister_observer(arg1, observer):
    return _kalashnikovDB.AK_unregister_observer(arg1, observer)
AK_unregister_observer = _kalashnikovDB.AK_unregister_observer

def AK_notify_observer(arg1, observer):
    return _kalashnikovDB.AK_notify_observer(arg1, observer)
AK_notify_observer = _kalashnikovDB.AK_notify_observer

def AK_notify_observers(arg1):
    return _kalashnikovDB.AK_notify_observers(arg1)
AK_notify_observers = _kalashnikovDB.AK_notify_observers

def AK_get_observer_by_id(arg1, id):
    return _kalashnikovDB.AK_get_observer_by_id(arg1, id)
AK_get_observer_by_id = _kalashnikovDB.AK_get_observer_by_id

def AK_init_observable(AK_observable_type, AK_ObservableType_Def, AK_custom_action):
    return _kalashnikovDB.AK_init_observable(AK_observable_type, AK_ObservableType_Def, AK_custom_action)
AK_init_observable = _kalashnikovDB.AK_init_observable

def AK_destroy_observer(arg1):
    return _kalashnikovDB.AK_destroy_observer(arg1)
AK_destroy_observer = _kalashnikovDB.AK_destroy_observer

def AK_notify(observer, observable_type, type):
    return _kalashnikovDB.AK_notify(observer, observable_type, type)
AK_notify = _kalashnikovDB.AK_notify

def AK_init_observer(observer_type, observer_type_event_handler):
    return _kalashnikovDB.AK_init_observer(observer_type, observer_type_event_handler)
AK_init_observer = _kalashnikovDB.AK_init_observer

_kalashnikovDB.ERROR_swigconstant(_kalashnikovDB)
ERROR = _kalashnikovDB.ERROR

_kalashnikovDB.INFO_swigconstant(_kalashnikovDB)
INFO = _kalashnikovDB.INFO

_kalashnikovDB.WARMING_swigconstant(_kalashnikovDB)
WARMING = _kalashnikovDB.WARMING
class NotifyDetails(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NotifyDetails, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NotifyDetails, name)
    __repr__ = _swig_repr
    __swig_setmethods__["message"] = _kalashnikovDB.NotifyDetails_message_set
    __swig_getmethods__["message"] = _kalashnikovDB.NotifyDetails_message_get
    if _newclass:
        message = _swig_property(_kalashnikovDB.NotifyDetails_message_get, _kalashnikovDB.NotifyDetails_message_set)
    __swig_setmethods__["type"] = _kalashnikovDB.NotifyDetails_type_set
    __swig_getmethods__["type"] = _kalashnikovDB.NotifyDetails_type_get
    if _newclass:
        type = _swig_property(_kalashnikovDB.NotifyDetails_type_get, _kalashnikovDB.NotifyDetails_type_set)

    def __init__(self):
        this = _kalashnikovDB.new_NotifyDetails()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _kalashnikovDB.delete_NotifyDetails
    __del__ = lambda self: None
NotifyDetails_swigregister = _kalashnikovDB.NotifyDetails_swigregister
NotifyDetails_swigregister(NotifyDetails)

class TypeObservable(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TypeObservable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TypeObservable, name)
    __repr__ = _swig_repr
    __swig_setmethods__["notifyDetails"] = _kalashnikovDB.TypeObservable_notifyDetails_set
    __swig_getmethods__["notifyDetails"] = _kalashnikovDB.TypeObservable_notifyDetails_get
    if _newclass:
        notifyDetails = _swig_property(_kalashnikovDB.TypeObservable_notifyDetails_get, _kalashnikovDB.TypeObservable_notifyDetails_set)
    __swig_setmethods__["AK_get_message"] = _kalashnikovDB.TypeObservable_AK_get_message_set
    __swig_getmethods__["AK_get_message"] = _kalashnikovDB.TypeObservable_AK_get_message_get
    if _newclass:
        AK_get_message = _swig_property(_kalashnikovDB.TypeObservable_AK_get_message_get, _kalashnikovDB.TypeObservable_AK_get_message_set)
    __swig_setmethods__["AK_custom_register_observer"] = _kalashnikovDB.TypeObservable_AK_custom_register_observer_set
    __swig_getmethods__["AK_custom_register_observer"] = _kalashnikovDB.TypeObservable_AK_custom_register_observer_get
    if _newclass:
        AK_custom_register_observer = _swig_property(_kalashnikovDB.TypeObservable_AK_custom_register_observer_get, _kalashnikovDB.TypeObservable_AK_custom_register_observer_set)
    __swig_setmethods__["AK_custom_unregister_observer"] = _kalashnikovDB.TypeObservable_AK_custom_unregister_observer_set
    __swig_getmethods__["AK_custom_unregister_observer"] = _kalashnikovDB.TypeObservable_AK_custom_unregister_observer_get
    if _newclass:
        AK_custom_unregister_observer = _swig_property(_kalashnikovDB.TypeObservable_AK_custom_unregister_observer_get, _kalashnikovDB.TypeObservable_AK_custom_unregister_observer_set)
    __swig_setmethods__["AK_set_notify_info_details"] = _kalashnikovDB.TypeObservable_AK_set_notify_info_details_set
    __swig_getmethods__["AK_set_notify_info_details"] = _kalashnikovDB.TypeObservable_AK_set_notify_info_details_get
    if _newclass:
        AK_set_notify_info_details = _swig_property(_kalashnikovDB.TypeObservable_AK_set_notify_info_details_get, _kalashnikovDB.TypeObservable_AK_set_notify_info_details_set)
    __swig_setmethods__["observable"] = _kalashnikovDB.TypeObservable_observable_set
    __swig_getmethods__["observable"] = _kalashnikovDB.TypeObservable_observable_get
    if _newclass:
        observable = _swig_property(_kalashnikovDB.TypeObservable_observable_get, _kalashnikovDB.TypeObservable_observable_set)

    def __init__(self):
        this = _kalashnikovDB.new_TypeObservable()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _kalashnikovDB.delete_TypeObservable
    __del__ = lambda self: None
TypeObservable_swigregister = _kalashnikovDB.TypeObservable_swigregister
TypeObservable_swigregister(TypeObservable)


def AK_get_message(arg1):
    return _kalashnikovDB.AK_get_message(arg1)
AK_get_message = _kalashnikovDB.AK_get_message

def AK_custom_register_observer(arg1, observer):
    return _kalashnikovDB.AK_custom_register_observer(arg1, observer)
AK_custom_register_observer = _kalashnikovDB.AK_custom_register_observer

def AK_custom_unregister_observer(arg1, observer):
    return _kalashnikovDB.AK_custom_unregister_observer(arg1, observer)
AK_custom_unregister_observer = _kalashnikovDB.AK_custom_unregister_observer

def AK_set_notify_info_details(arg1, type, message):
    return _kalashnikovDB.AK_set_notify_info_details(arg1, type, message)
AK_set_notify_info_details = _kalashnikovDB.AK_set_notify_info_details

def AK_custom_action(data):
    return _kalashnikovDB.AK_custom_action(data)
AK_custom_action = _kalashnikovDB.AK_custom_action

def init_observable_type():
    return _kalashnikovDB.init_observable_type()
init_observable_type = _kalashnikovDB.init_observable_type
class TypeObserver(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TypeObserver, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TypeObserver, name)
    __repr__ = _swig_repr
    __swig_setmethods__["observable"] = _kalashnikovDB.TypeObserver_observable_set
    __swig_getmethods__["observable"] = _kalashnikovDB.TypeObserver_observable_get
    if _newclass:
        observable = _swig_property(_kalashnikovDB.TypeObserver_observable_get, _kalashnikovDB.TypeObserver_observable_set)
    __swig_setmethods__["observer"] = _kalashnikovDB.TypeObserver_observer_set
    __swig_getmethods__["observer"] = _kalashnikovDB.TypeObserver_observer_get
    if _newclass:
        observer = _swig_property(_kalashnikovDB.TypeObserver_observer_get, _kalashnikovDB.TypeObserver_observer_set)

    def __init__(self):
        this = _kalashnikovDB.new_TypeObserver()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _kalashnikovDB.delete_TypeObserver
    __del__ = lambda self: None
TypeObserver_swigregister = _kalashnikovDB.TypeObserver_swigregister
TypeObserver_swigregister(TypeObserver)


def handle_ak_custom_type(observer, observable):
    return _kalashnikovDB.handle_ak_custom_type(observer, observable)
handle_ak_custom_type = _kalashnikovDB.handle_ak_custom_type

def custom_observer_event_handler(observer, observable, AK_ObservableType_Def):
    return _kalashnikovDB.custom_observer_event_handler(observer, observable, AK_ObservableType_Def)
custom_observer_event_handler = _kalashnikovDB.custom_observer_event_handler

def init_observer_type(observable):
    return _kalashnikovDB.init_observer_type(observable)
init_observer_type = _kalashnikovDB.init_observer_type

def init_observer_type_second():
    return _kalashnikovDB.init_observer_type_second()
init_observer_type_second = _kalashnikovDB.init_observer_type_second

def AK_observable_test():
    return _kalashnikovDB.AK_observable_test()
AK_observable_test = _kalashnikovDB.AK_observable_test

def AK_observable_pattern():
    return _kalashnikovDB.AK_observable_pattern()
AK_observable_pattern = _kalashnikovDB.AK_observable_pattern

_kalashnikovDB.AK_TRANSACTION_swigconstant(_kalashnikovDB)
AK_TRANSACTION = _kalashnikovDB.AK_TRANSACTION

_kalashnikovDB.AK_TRIGGER_swigconstant(_kalashnikovDB)
AK_TRIGGER = _kalashnikovDB.AK_TRIGGER

_kalashnikovDB.AK_CUSTOM_FIRST_swigconstant(_kalashnikovDB)
AK_CUSTOM_FIRST = _kalashnikovDB.AK_CUSTOM_FIRST

_kalashnikovDB.AK_CUSTOM_SECOND_swigconstant(_kalashnikovDB)
AK_CUSTOM_SECOND = _kalashnikovDB.AK_CUSTOM_SECOND
class Observer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Observer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Observer, name)
    __repr__ = _swig_repr
    __swig_setmethods__["observer_id"] = _kalashnikovDB.Observer_observer_id_set
    __swig_getmethods__["observer_id"] = _kalashnikovDB.Observer_observer_id_get
    if _newclass:
        observer_id = _swig_property(_kalashnikovDB.Observer_observer_id_get, _kalashnikovDB.Observer_observer_id_set)
    __swig_setmethods__["AK_observer_type"] = _kalashnikovDB.Observer_AK_observer_type_set
    __swig_getmethods__["AK_observer_type"] = _kalashnikovDB.Observer_AK_observer_type_get
    if _newclass:
        AK_observer_type = _swig_property(_kalashnikovDB.Observer_AK_observer_type_get, _kalashnikovDB.Observer_AK_observer_type_set)
    __swig_setmethods__["AK_observer_type_event_handler"] = _kalashnikovDB.Observer_AK_observer_type_event_handler_set
    __swig_getmethods__["AK_observer_type_event_handler"] = _kalashnikovDB.Observer_AK_observer_type_event_handler_get
    if _newclass:
        AK_observer_type_event_handler = _swig_property(_kalashnikovDB.Observer_AK_observer_type_event_handler_get, _kalashnikovDB.Observer_AK_observer_type_event_handler_set)
    __swig_setmethods__["AK_notify"] = _kalashnikovDB.Observer_AK_notify_set
    __swig_getmethods__["AK_notify"] = _kalashnikovDB.Observer_AK_notify_get
    if _newclass:
        AK_notify = _swig_property(_kalashnikovDB.Observer_AK_notify_get, _kalashnikovDB.Observer_AK_notify_set)
    __swig_setmethods__["AK_destroy_observer"] = _kalashnikovDB.Observer_AK_destroy_observer_set
    __swig_getmethods__["AK_destroy_observer"] = _kalashnikovDB.Observer_AK_destroy_observer_get
    if _newclass:
        AK_destroy_observer = _swig_property(_kalashnikovDB.Observer_AK_destroy_observer_get, _kalashnikovDB.Observer_AK_destroy_observer_set)

    def __init__(self):
        this = _kalashnikovDB.new_Observer()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _kalashnikovDB.delete_Observer
    __del__ = lambda self: None
Observer_swigregister = _kalashnikovDB.Observer_swigregister
Observer_swigregister(Observer)

class Observable(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Observable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Observable, name)
    __repr__ = _swig_repr
    __swig_setmethods__["observers"] = _kalashnikovDB.Observable_observers_set
    __swig_getmethods__["observers"] = _kalashnikovDB.Observable_observers_get
    if _newclass:
        observers = _swig_property(_kalashnikovDB.Observable_observers_get, _kalashnikovDB.Observable_observers_set)
    __swig_setmethods__["observer_id_counter"] = _kalashnikovDB.Observable_observer_id_counter_set
    __swig_getmethods__["observer_id_counter"] = _kalashnikovDB.Observable_observer_id_counter_get
    if _newclass:
        observer_id_counter = _swig_property(_kalashnikovDB.Observable_observer_id_counter_get, _kalashnikovDB.Observable_observer_id_counter_set)
    __swig_setmethods__["AK_observable_type"] = _kalashnikovDB.Observable_AK_observable_type_set
    __swig_getmethods__["AK_observable_type"] = _kalashnikovDB.Observable_AK_observable_type_get
    if _newclass:
        AK_observable_type = _swig_property(_kalashnikovDB.Observable_AK_observable_type_get, _kalashnikovDB.Observable_AK_observable_type_set)
    __swig_setmethods__["AK_ObservableType_Def"] = _kalashnikovDB.Observable_AK_ObservableType_Def_set
    __swig_getmethods__["AK_ObservableType_Def"] = _kalashnikovDB.Observable_AK_ObservableType_Def_get
    if _newclass:
        AK_ObservableType_Def = _swig_property(_kalashnikovDB.Observable_AK_ObservableType_Def_get, _kalashnikovDB.Observable_AK_ObservableType_Def_set)
    __swig_setmethods__["AK_destroy_observable"] = _kalashnikovDB.Observable_AK_destroy_observable_set
    __swig_getmethods__["AK_destroy_observable"] = _kalashnikovDB.Observable_AK_destroy_observable_get
    if _newclass:
        AK_destroy_observable = _swig_property(_kalashnikovDB.Observable_AK_destroy_observable_get, _kalashnikovDB.Observable_AK_destroy_observable_set)
    __swig_setmethods__["AK_register_observer"] = _kalashnikovDB.Observable_AK_register_observer_set
    __swig_getmethods__["AK_register_observer"] = _kalashnikovDB.Observable_AK_register_observer_get
    if _newclass:
        AK_register_observer = _swig_property(_kalashnikovDB.Observable_AK_register_observer_get, _kalashnikovDB.Observable_AK_register_observer_set)
    __swig_setmethods__["AK_unregister_observer"] = _kalashnikovDB.Observable_AK_unregister_observer_set
    __swig_getmethods__["AK_unregister_observer"] = _kalashnikovDB.Observable_AK_unregister_observer_get
    if _newclass:
        AK_unregister_observer = _swig_property(_kalashnikovDB.Observable_AK_unregister_observer_get, _kalashnikovDB.Observable_AK_unregister_observer_set)
    __swig_setmethods__["AK_notify_observer"] = _kalashnikovDB.Observable_AK_notify_observer_set
    __swig_getmethods__["AK_notify_observer"] = _kalashnikovDB.Observable_AK_notify_observer_get
    if _newclass:
        AK_notify_observer = _swig_property(_kalashnikovDB.Observable_AK_notify_observer_get, _kalashnikovDB.Observable_AK_notify_observer_set)
    __swig_setmethods__["AK_notify_observers"] = _kalashnikovDB.Observable_AK_notify_observers_set
    __swig_getmethods__["AK_notify_observers"] = _kalashnikovDB.Observable_AK_notify_observers_get
    if _newclass:
        AK_notify_observers = _swig_property(_kalashnikovDB.Observable_AK_notify_observers_get, _kalashnikovDB.Observable_AK_notify_observers_set)
    __swig_setmethods__["AK_run_custom_action"] = _kalashnikovDB.Observable_AK_run_custom_action_set
    __swig_getmethods__["AK_run_custom_action"] = _kalashnikovDB.Observable_AK_run_custom_action_get
    if _newclass:
        AK_run_custom_action = _swig_property(_kalashnikovDB.Observable_AK_run_custom_action_get, _kalashnikovDB.Observable_AK_run_custom_action_set)
    __swig_setmethods__["AK_get_observer_by_id"] = _kalashnikovDB.Observable_AK_get_observer_by_id_set
    __swig_getmethods__["AK_get_observer_by_id"] = _kalashnikovDB.Observable_AK_get_observer_by_id_get
    if _newclass:
        AK_get_observer_by_id = _swig_property(_kalashnikovDB.Observable_AK_get_observer_by_id_get, _kalashnikovDB.Observable_AK_get_observer_by_id_set)

    def __init__(self):
        this = _kalashnikovDB.new_Observable()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _kalashnikovDB.delete_Observable
    __del__ = lambda self: None
Observable_swigregister = _kalashnikovDB.Observable_swigregister
Observable_swigregister(Observable)


def AK_get_table_atribute_types(tblName):
    return _kalashnikovDB.AK_get_table_atribute_types(tblName)
AK_get_table_atribute_types = _kalashnikovDB.AK_get_table_atribute_types

def create_header_test(tbl_name, attr_name, _num):
    return _kalashnikovDB.create_header_test(tbl_name, attr_name, _num)
create_header_test = _kalashnikovDB.create_header_test

def insert_data_test(tbl_name, attr_name, attr_value, _num):
    return _kalashnikovDB.insert_data_test(tbl_name, attr_name, attr_value, _num)
insert_data_test = _kalashnikovDB.insert_data_test

def selection_test(src_table, dest_table, sel_query, _num):
    return _kalashnikovDB.selection_test(src_table, dest_table, sel_query, _num)
selection_test = _kalashnikovDB.selection_test

def get_column_test(num, tbl):
    return _kalashnikovDB.get_column_test(num, tbl)
get_column_test = _kalashnikovDB.get_column_test

def get_row_test(num, tbl):
    return _kalashnikovDB.get_row_test(num, tbl)
get_row_test = _kalashnikovDB.get_row_test

def AK_create_test_tables():
    return _kalashnikovDB.AK_create_test_tables()
AK_create_test_tables = _kalashnikovDB.AK_create_test_tables

def AK_trigger_save_conditions(trigger, condition):
    return _kalashnikovDB.AK_trigger_save_conditions(trigger, condition)
AK_trigger_save_conditions = _kalashnikovDB.AK_trigger_save_conditions

def AK_trigger_add(name, event, condition, table, function):
    return _kalashnikovDB.AK_trigger_add(name, event, condition, table, function)
AK_trigger_add = _kalashnikovDB.AK_trigger_add

def AK_trigger_get_id(name, table):
    return _kalashnikovDB.AK_trigger_get_id(name, table)
AK_trigger_get_id = _kalashnikovDB.AK_trigger_get_id

def AK_trigger_remove_by_name(name, table):
    return _kalashnikovDB.AK_trigger_remove_by_name(name, table)
AK_trigger_remove_by_name = _kalashnikovDB.AK_trigger_remove_by_name

def AK_trigger_remove_by_obj_id(obj_id):
    return _kalashnikovDB.AK_trigger_remove_by_obj_id(obj_id)
AK_trigger_remove_by_obj_id = _kalashnikovDB.AK_trigger_remove_by_obj_id

def AK_trigger_edit(name, event, condition, table, function):
    return _kalashnikovDB.AK_trigger_edit(name, event, condition, table, function)
AK_trigger_edit = _kalashnikovDB.AK_trigger_edit

def AK_trigger_get_conditions(trigger):
    return _kalashnikovDB.AK_trigger_get_conditions(trigger)
AK_trigger_get_conditions = _kalashnikovDB.AK_trigger_get_conditions

def AK_trigger_rename(old_name, new_name, table):
    return _kalashnikovDB.AK_trigger_rename(old_name, new_name, table)
AK_trigger_rename = _kalashnikovDB.AK_trigger_rename

def AK_trigger_test():
    return _kalashnikovDB.AK_trigger_test()
AK_trigger_test = _kalashnikovDB.AK_trigger_test

def AK_archive_log():
    return _kalashnikovDB.AK_archive_log()
AK_archive_log = _kalashnikovDB.AK_archive_log

def AK_command(komande, brojkomandi):
    return _kalashnikovDB.AK_command(komande, brojkomandi)
AK_command = _kalashnikovDB.AK_command

def AK_test_command():
    return _kalashnikovDB.AK_test_command()
AK_test_command = _kalashnikovDB.AK_test_command
class AK_command_struct(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AK_command_struct, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AK_command_struct, name)
    __repr__ = _swig_repr
    __swig_setmethods__["id_command"] = _kalashnikovDB.AK_command_struct_id_command_set
    __swig_getmethods__["id_command"] = _kalashnikovDB.AK_command_struct_id_command_get
    if _newclass:
        id_command = _swig_property(_kalashnikovDB.AK_command_struct_id_command_get, _kalashnikovDB.AK_command_struct_id_command_set)
    __swig_setmethods__["tblName"] = _kalashnikovDB.AK_command_struct_tblName_set
    __swig_getmethods__["tblName"] = _kalashnikovDB.AK_command_struct_tblName_get
    if _newclass:
        tblName = _swig_property(_kalashnikovDB.AK_command_struct_tblName_get, _kalashnikovDB.AK_command_struct_tblName_set)
    __swig_setmethods__["parameters"] = _kalashnikovDB.AK_command_struct_parameters_set
    __swig_getmethods__["parameters"] = _kalashnikovDB.AK_command_struct_parameters_get
    if _newclass:
        parameters = _swig_property(_kalashnikovDB.AK_command_struct_parameters_get, _kalashnikovDB.AK_command_struct_parameters_set)

    def __init__(self):
        this = _kalashnikovDB.new_AK_command_struct()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _kalashnikovDB.delete_AK_command_struct
    __del__ = lambda self: None
AK_command_struct_swigregister = _kalashnikovDB.AK_command_struct_swigregister
AK_command_struct_swigregister(AK_command_struct)


_kalashnikovDB.ASCIILINESZ_swigconstant(_kalashnikovDB)
ASCIILINESZ = _kalashnikovDB.ASCIILINESZ

_kalashnikovDB.LINE_UNPROCESSED_swigconstant(_kalashnikovDB)
LINE_UNPROCESSED = _kalashnikovDB.LINE_UNPROCESSED

_kalashnikovDB.LINE_ERROR_swigconstant(_kalashnikovDB)
LINE_ERROR = _kalashnikovDB.LINE_ERROR

_kalashnikovDB.LINE_EMPTY_swigconstant(_kalashnikovDB)
LINE_EMPTY = _kalashnikovDB.LINE_EMPTY

_kalashnikovDB.LINE_COMMENT_swigconstant(_kalashnikovDB)
LINE_COMMENT = _kalashnikovDB.LINE_COMMENT

_kalashnikovDB.LINE_SECTION_swigconstant(_kalashnikovDB)
LINE_SECTION = _kalashnikovDB.LINE_SECTION

_kalashnikovDB.LINE_VALUE_swigconstant(_kalashnikovDB)
LINE_VALUE = _kalashnikovDB.LINE_VALUE

def strlwc(s):
    return _kalashnikovDB.strlwc(s)
strlwc = _kalashnikovDB.strlwc

def strstrip(s):
    return _kalashnikovDB.strstrip(s)
strstrip = _kalashnikovDB.strstrip

def iniparser_getnsec(d):
    return _kalashnikovDB.iniparser_getnsec(d)
iniparser_getnsec = _kalashnikovDB.iniparser_getnsec

def iniparser_getsecname(d, n):
    return _kalashnikovDB.iniparser_getsecname(d, n)
iniparser_getsecname = _kalashnikovDB.iniparser_getsecname

def iniparser_dump(d, f):
    return _kalashnikovDB.iniparser_dump(d, f)
iniparser_dump = _kalashnikovDB.iniparser_dump

def iniparser_dump_ini(d, f):
    return _kalashnikovDB.iniparser_dump_ini(d, f)
iniparser_dump_ini = _kalashnikovDB.iniparser_dump_ini

def iniparser_dumpsection_ini(d, s, f):
    return _kalashnikovDB.iniparser_dumpsection_ini(d, s, f)
iniparser_dumpsection_ini = _kalashnikovDB.iniparser_dumpsection_ini

def iniparser_getsecnkeys(d, s):
    return _kalashnikovDB.iniparser_getsecnkeys(d, s)
iniparser_getsecnkeys = _kalashnikovDB.iniparser_getsecnkeys

def iniparser_getseckeys(d, s):
    return _kalashnikovDB.iniparser_getseckeys(d, s)
iniparser_getseckeys = _kalashnikovDB.iniparser_getseckeys

def iniparser_getstring(d, key, arg3):
    return _kalashnikovDB.iniparser_getstring(d, key, arg3)
iniparser_getstring = _kalashnikovDB.iniparser_getstring

def iniparser_getint(d, key, notfound):
    return _kalashnikovDB.iniparser_getint(d, key, notfound)
iniparser_getint = _kalashnikovDB.iniparser_getint

def iniparser_getdouble(d, key, notfound):
    return _kalashnikovDB.iniparser_getdouble(d, key, notfound)
iniparser_getdouble = _kalashnikovDB.iniparser_getdouble

def iniparser_getboolean(d, key, notfound):
    return _kalashnikovDB.iniparser_getboolean(d, key, notfound)
iniparser_getboolean = _kalashnikovDB.iniparser_getboolean

def iniparser_find_entry(ini, entry):
    return _kalashnikovDB.iniparser_find_entry(ini, entry)
iniparser_find_entry = _kalashnikovDB.iniparser_find_entry

def iniparser_set(ini, entry, val):
    return _kalashnikovDB.iniparser_set(ini, entry, val)
iniparser_set = _kalashnikovDB.iniparser_set

def iniparser_unset(ini, entry):
    return _kalashnikovDB.iniparser_unset(ini, entry)
iniparser_unset = _kalashnikovDB.iniparser_unset

def iniparser_line(input_line, section, key, value):
    return _kalashnikovDB.iniparser_line(input_line, section, key, value)
iniparser_line = _kalashnikovDB.iniparser_line

def iniparser_load(ininame):
    return _kalashnikovDB.iniparser_load(ininame)
iniparser_load = _kalashnikovDB.iniparser_load

def iniparser_AK_freedict(d):
    return _kalashnikovDB.iniparser_AK_freedict(d)
iniparser_AK_freedict = _kalashnikovDB.iniparser_AK_freedict

def AK_inflate_config():
    return _kalashnikovDB.AK_inflate_config()
AK_inflate_config = _kalashnikovDB.AK_inflate_config

_kalashnikovDB.MAXVALSZ_swigconstant(_kalashnikovDB)
MAXVALSZ = _kalashnikovDB.MAXVALSZ

_kalashnikovDB.DICTMINSZ_swigconstant(_kalashnikovDB)
DICTMINSZ = _kalashnikovDB.DICTMINSZ

def mem_double(ptr, size):
    return _kalashnikovDB.mem_double(ptr, size)
mem_double = _kalashnikovDB.mem_double

def xstrdup(s):
    return _kalashnikovDB.xstrdup(s)
xstrdup = _kalashnikovDB.xstrdup

def dictionary_hash(key):
    return _kalashnikovDB.dictionary_hash(key)
dictionary_hash = _kalashnikovDB.dictionary_hash

def dictionary_new(size):
    return _kalashnikovDB.dictionary_new(size)
dictionary_new = _kalashnikovDB.dictionary_new

def dictionary_del(d):
    return _kalashnikovDB.dictionary_del(d)
dictionary_del = _kalashnikovDB.dictionary_del

def dictionary_get(d, key, arg3):
    return _kalashnikovDB.dictionary_get(d, key, arg3)
dictionary_get = _kalashnikovDB.dictionary_get

def dictionary_set(d, key, val):
    return _kalashnikovDB.dictionary_set(d, key, val)
dictionary_set = _kalashnikovDB.dictionary_set

def dictionary_unset(d, key):
    return _kalashnikovDB.dictionary_unset(d, key)
dictionary_unset = _kalashnikovDB.dictionary_unset

def dictionary_dump(d, out):
    return _kalashnikovDB.dictionary_dump(d, out)
dictionary_dump = _kalashnikovDB.dictionary_dump
class dictionary(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, dictionary, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, dictionary, name)
    __repr__ = _swig_repr
    __swig_setmethods__["n"] = _kalashnikovDB.dictionary_n_set
    __swig_getmethods__["n"] = _kalashnikovDB.dictionary_n_get
    if _newclass:
        n = _swig_property(_kalashnikovDB.dictionary_n_get, _kalashnikovDB.dictionary_n_set)
    __swig_setmethods__["size"] = _kalashnikovDB.dictionary_size_set
    __swig_getmethods__["size"] = _kalashnikovDB.dictionary_size_get
    if _newclass:
        size = _swig_property(_kalashnikovDB.dictionary_size_get, _kalashnikovDB.dictionary_size_set)
    __swig_setmethods__["val"] = _kalashnikovDB.dictionary_val_set
    __swig_getmethods__["val"] = _kalashnikovDB.dictionary_val_get
    if _newclass:
        val = _swig_property(_kalashnikovDB.dictionary_val_get, _kalashnikovDB.dictionary_val_set)
    __swig_setmethods__["key"] = _kalashnikovDB.dictionary_key_set
    __swig_getmethods__["key"] = _kalashnikovDB.dictionary_key_get
    if _newclass:
        key = _swig_property(_kalashnikovDB.dictionary_key_get, _kalashnikovDB.dictionary_key_set)
    __swig_setmethods__["hash"] = _kalashnikovDB.dictionary_hash_set
    __swig_getmethods__["hash"] = _kalashnikovDB.dictionary_hash_get
    if _newclass:
        hash = _swig_property(_kalashnikovDB.dictionary_hash_get, _kalashnikovDB.dictionary_hash_set)

    def __init__(self):
        this = _kalashnikovDB.new_dictionary()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _kalashnikovDB.delete_dictionary
    __del__ = lambda self: None
dictionary_swigregister = _kalashnikovDB.dictionary_swigregister
dictionary_swigregister(dictionary)


def AK_get_function_obj_id(function, arguments_list):
    return _kalashnikovDB.AK_get_function_obj_id(function, arguments_list)
AK_get_function_obj_id = _kalashnikovDB.AK_get_function_obj_id

def AK_check_function_arguments(function_id, arguments_list):
    return _kalashnikovDB.AK_check_function_arguments(function_id, arguments_list)
AK_check_function_arguments = _kalashnikovDB.AK_check_function_arguments

def AK_check_function_arguments_type(function_id, args):
    return _kalashnikovDB.AK_check_function_arguments_type(function_id, args)
AK_check_function_arguments_type = _kalashnikovDB.AK_check_function_arguments_type

def AK_function_add(name, return_type, arguments_list):
    return _kalashnikovDB.AK_function_add(name, return_type, arguments_list)
AK_function_add = _kalashnikovDB.AK_function_add

def AK_function_arguments_add(function_id, arg_number, arg_type, argname):
    return _kalashnikovDB.AK_function_arguments_add(function_id, arg_number, arg_type, argname)
AK_function_arguments_add = _kalashnikovDB.AK_function_arguments_add

def AK_function_remove_by_obj_id(obj_id):
    return _kalashnikovDB.AK_function_remove_by_obj_id(obj_id)
AK_function_remove_by_obj_id = _kalashnikovDB.AK_function_remove_by_obj_id

def AK_function_arguments_remove_by_obj_id(obj_id):
    return _kalashnikovDB.AK_function_arguments_remove_by_obj_id(obj_id)
AK_function_arguments_remove_by_obj_id = _kalashnikovDB.AK_function_arguments_remove_by_obj_id

def AK_function_remove_by_name(name, arguments_list):
    return _kalashnikovDB.AK_function_remove_by_name(name, arguments_list)
AK_function_remove_by_name = _kalashnikovDB.AK_function_remove_by_name

def AK_function_rename(name, arguments_list, new_name):
    return _kalashnikovDB.AK_function_rename(name, arguments_list, new_name)
AK_function_rename = _kalashnikovDB.AK_function_rename

def AK_function_change_return_type(name, arguments_list, new_return_type):
    return _kalashnikovDB.AK_function_change_return_type(name, arguments_list, new_return_type)
AK_function_change_return_type = _kalashnikovDB.AK_function_change_return_type

def AK_function_test():
    return _kalashnikovDB.AK_function_test()
AK_function_test = _kalashnikovDB.AK_function_test

def AK_sequence_add(name, start_value, increment, max_value, min_value, cycle):
    return _kalashnikovDB.AK_sequence_add(name, start_value, increment, max_value, min_value, cycle)
AK_sequence_add = _kalashnikovDB.AK_sequence_add

def AK_sequence_remove(name):
    return _kalashnikovDB.AK_sequence_remove(name)
AK_sequence_remove = _kalashnikovDB.AK_sequence_remove

def AK_sequence_current_value(name):
    return _kalashnikovDB.AK_sequence_current_value(name)
AK_sequence_current_value = _kalashnikovDB.AK_sequence_current_value

def AK_sequence_next_value(name):
    return _kalashnikovDB.AK_sequence_next_value(name)
AK_sequence_next_value = _kalashnikovDB.AK_sequence_next_value

def AK_sequence_rename(old_name, new_name):
    return _kalashnikovDB.AK_sequence_rename(old_name, new_name)
AK_sequence_rename = _kalashnikovDB.AK_sequence_rename

def AK_sequence_modify(name, start_value, increment, max_value, min_value, cycle):
    return _kalashnikovDB.AK_sequence_modify(name, start_value, increment, max_value, min_value, cycle)
AK_sequence_modify = _kalashnikovDB.AK_sequence_modify

def AK_sequence_get_id(name):
    return _kalashnikovDB.AK_sequence_get_id(name)
AK_sequence_get_id = _kalashnikovDB.AK_sequence_get_id

def AK_sequence_test():
    return _kalashnikovDB.AK_sequence_test()
AK_sequence_test = _kalashnikovDB.AK_sequence_test

def AK_add_to_redolog(command, row_root):
    return _kalashnikovDB.AK_add_to_redolog(command, row_root)
AK_add_to_redolog = _kalashnikovDB.AK_add_to_redolog

def AK_printout_redolog():
    return _kalashnikovDB.AK_printout_redolog()
AK_printout_redolog = _kalashnikovDB.AK_printout_redolog

def AK_check_attributes(attributes):
    return _kalashnikovDB.AK_check_attributes(attributes)
AK_check_attributes = _kalashnikovDB.AK_check_attributes

def AK_recover_archive_log(fileName):
    return _kalashnikovDB.AK_recover_archive_log(fileName)
AK_recover_archive_log = _kalashnikovDB.AK_recover_archive_log

def AK_recover_line(line):
    return _kalashnikovDB.AK_recover_line(line)
AK_recover_line = _kalashnikovDB.AK_recover_line

def AK_get_recovery_line_table(command):
    return _kalashnikovDB.AK_get_recovery_line_table(command)
AK_get_recovery_line_table = _kalashnikovDB.AK_get_recovery_line_table

def AK_recovery_get_id(command):
    return _kalashnikovDB.AK_recovery_get_id(command)
AK_recovery_get_id = _kalashnikovDB.AK_recovery_get_id

def AK_recovery_insert_row(table, attributes):
    return _kalashnikovDB.AK_recovery_insert_row(table, attributes)
AK_recovery_insert_row = _kalashnikovDB.AK_recovery_insert_row

def AK_check_redolog_attributes(attributes):
    return _kalashnikovDB.AK_check_redolog_attributes(attributes)
AK_check_redolog_attributes = _kalashnikovDB.AK_check_redolog_attributes

def AK_recovery_tokenize(input, delimiter, valuesOrNot):
    return _kalashnikovDB.AK_recovery_tokenize(input, delimiter, valuesOrNot)
AK_recovery_tokenize = _kalashnikovDB.AK_recovery_tokenize
# This file is compatible with both classic and new-style classes.


