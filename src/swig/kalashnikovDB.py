# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_kalashnikovDB', [dirname(__file__)])
        except ImportError:
            import _kalashnikovDB
            return _kalashnikovDB
        if fp is not None:
            try:
                _mod = imp.load_module('_kalashnikovDB', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _kalashnikovDB = swig_import_helper()
    del swig_import_helper
else:
    import _kalashnikovDB
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


DEBUG_ALL = _kalashnikovDB.DEBUG_ALL
LOW = _kalashnikovDB.LOW
MIDDLE = _kalashnikovDB.MIDDLE
HIGH = _kalashnikovDB.HIGH
GLOBAL = _kalashnikovDB.GLOBAL
DB_MAN = _kalashnikovDB.DB_MAN
FILE_MAN = _kalashnikovDB.FILE_MAN
MEMO_MAN = _kalashnikovDB.MEMO_MAN
INDICES = _kalashnikovDB.INDICES
TABLES = _kalashnikovDB.TABLES
REL_OP = _kalashnikovDB.REL_OP
REL_EQ = _kalashnikovDB.REL_EQ
CONSTRAINTS = _kalashnikovDB.CONSTRAINTS
FUNCTIONS = _kalashnikovDB.FUNCTIONS
SEQUENCES = _kalashnikovDB.SEQUENCES
TRIGGERS = _kalashnikovDB.TRIGGERS
REDO = _kalashnikovDB.REDO

def Ak_dbg_messg(*args):
  return _kalashnikovDB.Ak_dbg_messg(*args)
Ak_dbg_messg = _kalashnikovDB.Ak_dbg_messg
MAX_VARCHAR_LENGTH = _kalashnikovDB.MAX_VARCHAR_LENGTH
MAX_ATTRIBUTES = _kalashnikovDB.MAX_ATTRIBUTES
MAX_ATT_NAME = _kalashnikovDB.MAX_ATT_NAME
MAX_CONSTRAINTS = _kalashnikovDB.MAX_CONSTRAINTS
MAX_CONSTR_NAME = _kalashnikovDB.MAX_CONSTR_NAME
MAX_CONSTR_CODE = _kalashnikovDB.MAX_CONSTR_CODE
MAX_OBSERVABLE_OBSERVERS = _kalashnikovDB.MAX_OBSERVABLE_OBSERVERS
MAX_ACTIVE_TRANSACTIONS_COUNT = _kalashnikovDB.MAX_ACTIVE_TRANSACTIONS_COUNT
DATA_BLOCK_SIZE = _kalashnikovDB.DATA_BLOCK_SIZE
DATA_ENTRY_SIZE = _kalashnikovDB.DATA_ENTRY_SIZE
MAX_QUERY_LIB_MEMORY = _kalashnikovDB.MAX_QUERY_LIB_MEMORY
MAX_CACHE_MEMORY = _kalashnikovDB.MAX_CACHE_MEMORY
MAX_QUERY_DICT_MEMORY = _kalashnikovDB.MAX_QUERY_DICT_MEMORY
MAX_QUERY_RESULT_MEMORY = _kalashnikovDB.MAX_QUERY_RESULT_MEMORY
MAX_TOKENS = _kalashnikovDB.MAX_TOKENS
MAX_MAIN_BUCKETS = _kalashnikovDB.MAX_MAIN_BUCKETS
MAIN_BUCKET_SIZE = _kalashnikovDB.MAIN_BUCKET_SIZE
HASH_BUCKET_SIZE = _kalashnikovDB.HASH_BUCKET_SIZE
NUMBER_OF_KEYS = _kalashnikovDB.NUMBER_OF_KEYS
EXIT_SUCCESS = _kalashnikovDB.EXIT_SUCCESS
EXIT_ERROR = _kalashnikovDB.EXIT_ERROR
BLOCK_TYPE_FREE = _kalashnikovDB.BLOCK_TYPE_FREE
BLOCK_TYPE_NORMAL = _kalashnikovDB.BLOCK_TYPE_NORMAL
BLOCK_TYPE_CHAINED = _kalashnikovDB.BLOCK_TYPE_CHAINED
NOT_CHAINED = _kalashnikovDB.NOT_CHAINED
FREE_INT = _kalashnikovDB.FREE_INT
FREE_CHAR = _kalashnikovDB.FREE_CHAR
SEGMENT_TYPE_SYSTEM_TABLE = _kalashnikovDB.SEGMENT_TYPE_SYSTEM_TABLE
SEGMENT_TYPE_TABLE = _kalashnikovDB.SEGMENT_TYPE_TABLE
SEGMENT_TYPE_INDEX = _kalashnikovDB.SEGMENT_TYPE_INDEX
SEGMENT_TYPE_TRANSACTION = _kalashnikovDB.SEGMENT_TYPE_TRANSACTION
SEGMENT_TYPE_TEMP = _kalashnikovDB.SEGMENT_TYPE_TEMP
TYPE_INTERNAL = _kalashnikovDB.TYPE_INTERNAL
TYPE_INT = _kalashnikovDB.TYPE_INT
TYPE_FLOAT = _kalashnikovDB.TYPE_FLOAT
TYPE_NUMBER = _kalashnikovDB.TYPE_NUMBER
TYPE_VARCHAR = _kalashnikovDB.TYPE_VARCHAR
TYPE_DATE = _kalashnikovDB.TYPE_DATE
TYPE_DATETIME = _kalashnikovDB.TYPE_DATETIME
TYPE_TIME = _kalashnikovDB.TYPE_TIME
TYPE_BLOB = _kalashnikovDB.TYPE_BLOB
TYPE_BOOL = _kalashnikovDB.TYPE_BOOL
TYPE_OPERAND = _kalashnikovDB.TYPE_OPERAND
TYPE_OPERATOR = _kalashnikovDB.TYPE_OPERATOR
TYPE_ATTRIBS = _kalashnikovDB.TYPE_ATTRIBS
TYPE_CONDITION = _kalashnikovDB.TYPE_CONDITION
BLOCK_CLEAN = _kalashnikovDB.BLOCK_CLEAN
BLOCK_DIRTY = _kalashnikovDB.BLOCK_DIRTY
ATTR_DELIMITER = _kalashnikovDB.ATTR_DELIMITER
ATTR_ESCAPE = _kalashnikovDB.ATTR_ESCAPE
NULLL = _kalashnikovDB.NULLL
RO_SELECTION = _kalashnikovDB.RO_SELECTION
RO_PROJECTION = _kalashnikovDB.RO_PROJECTION
RO_NAT_JOIN = _kalashnikovDB.RO_NAT_JOIN
RO_RENAME = _kalashnikovDB.RO_RENAME
RO_UNION = _kalashnikovDB.RO_UNION
RO_INTERSECT = _kalashnikovDB.RO_INTERSECT
RO_EXCEPT = _kalashnikovDB.RO_EXCEPT
RO_THETA_JOIN = _kalashnikovDB.RO_THETA_JOIN
NEW_VALUE = _kalashnikovDB.NEW_VALUE
SEARCH_CONSTRAINT = _kalashnikovDB.SEARCH_CONSTRAINT
UPDATE = _kalashnikovDB.UPDATE
DELETE = _kalashnikovDB.DELETE
INSERT = _kalashnikovDB.INSERT
SELECT = _kalashnikovDB.SELECT
FIND = _kalashnikovDB.FIND
INFO_BUCKET = _kalashnikovDB.INFO_BUCKET
MAIN_BUCKET = _kalashnikovDB.MAIN_BUCKET
HASH_BUCKET = _kalashnikovDB.HASH_BUCKET
SHARED_LOCK = _kalashnikovDB.SHARED_LOCK
EXCLUSIVE_LOCK = _kalashnikovDB.EXCLUSIVE_LOCK
WAIT_FOR_UNLOCK = _kalashnikovDB.WAIT_FOR_UNLOCK
PASS_LOCK_QUEUE = _kalashnikovDB.PASS_LOCK_QUEUE
OK = _kalashnikovDB.OK
NOT_OK = _kalashnikovDB.NOT_OK
COMMIT = _kalashnikovDB.COMMIT
ABORT = _kalashnikovDB.ABORT
MAX_EXTENTS_IN_SEGMENT = _kalashnikovDB.MAX_EXTENTS_IN_SEGMENT
MAX_REDO_LOG_MEMORY = _kalashnikovDB.MAX_REDO_LOG_MEMORY
MAX_REDO_LOG_ENTRIES = _kalashnikovDB.MAX_REDO_LOG_ENTRIES

def AK_chars_num_from_number(*args):
  return _kalashnikovDB.AK_chars_num_from_number(*args)
AK_chars_num_from_number = _kalashnikovDB.AK_chars_num_from_number

def AK_type_size(*args):
  return _kalashnikovDB.AK_type_size(*args)
AK_type_size = _kalashnikovDB.AK_type_size

def AK_strcmp(*args):
  return _kalashnikovDB.AK_strcmp(*args)
AK_strcmp = _kalashnikovDB.AK_strcmp

def Ak_Init_L(*args):
  return _kalashnikovDB.Ak_Init_L(*args)
Ak_Init_L = _kalashnikovDB.Ak_Init_L

def Ak_First_L(*args):
  return _kalashnikovDB.Ak_First_L(*args)
Ak_First_L = _kalashnikovDB.Ak_First_L

def Ak_End_L(*args):
  return _kalashnikovDB.Ak_End_L(*args)
Ak_End_L = _kalashnikovDB.Ak_End_L

def Ak_Next_L(*args):
  return _kalashnikovDB.Ak_Next_L(*args)
Ak_Next_L = _kalashnikovDB.Ak_Next_L

def Ak_Previous_L(*args):
  return _kalashnikovDB.Ak_Previous_L(*args)
Ak_Previous_L = _kalashnikovDB.Ak_Previous_L

def Ak_IsEmpty_L(*args):
  return _kalashnikovDB.Ak_IsEmpty_L(*args)
Ak_IsEmpty_L = _kalashnikovDB.Ak_IsEmpty_L

def Ak_InsertBefore_L(*args):
  return _kalashnikovDB.Ak_InsertBefore_L(*args)
Ak_InsertBefore_L = _kalashnikovDB.Ak_InsertBefore_L

def Ak_InsertAfter_L(*args):
  return _kalashnikovDB.Ak_InsertAfter_L(*args)
Ak_InsertAfter_L = _kalashnikovDB.Ak_InsertAfter_L

def Ak_InsertAtBegin_L(*args):
  return _kalashnikovDB.Ak_InsertAtBegin_L(*args)
Ak_InsertAtBegin_L = _kalashnikovDB.Ak_InsertAtBegin_L

def Ak_InsertAtEnd_L(*args):
  return _kalashnikovDB.Ak_InsertAtEnd_L(*args)
Ak_InsertAtEnd_L = _kalashnikovDB.Ak_InsertAtEnd_L

def Ak_Delete_L(*args):
  return _kalashnikovDB.Ak_Delete_L(*args)
Ak_Delete_L = _kalashnikovDB.Ak_Delete_L

def Ak_DeleteAll_L(*args):
  return _kalashnikovDB.Ak_DeleteAll_L(*args)
Ak_DeleteAll_L = _kalashnikovDB.Ak_DeleteAll_L

def Ak_Size_L(*args):
  return _kalashnikovDB.Ak_Size_L(*args)
Ak_Size_L = _kalashnikovDB.Ak_Size_L

def Ak_Retrieve_L(*args):
  return _kalashnikovDB.Ak_Retrieve_L(*args)
Ak_Retrieve_L = _kalashnikovDB.Ak_Retrieve_L

def Ak_GetType_L(*args):
  return _kalashnikovDB.Ak_GetType_L(*args)
Ak_GetType_L = _kalashnikovDB.Ak_GetType_L

def Ak_GetSize_L(*args):
  return _kalashnikovDB.Ak_GetSize_L(*args)
Ak_GetSize_L = _kalashnikovDB.Ak_GetSize_L

def Ak_GetNth_L(*args):
  return _kalashnikovDB.Ak_GetNth_L(*args)
Ak_GetNth_L = _kalashnikovDB.Ak_GetNth_L

def Ak_Get_Position_Of_Element(*args):
  return _kalashnikovDB.Ak_Get_Position_Of_Element(*args)
Ak_Get_Position_Of_Element = _kalashnikovDB.Ak_Get_Position_Of_Element

def AK_get_array_perms(*args):
  return _kalashnikovDB.AK_get_array_perms(*args)
AK_get_array_perms = _kalashnikovDB.AK_get_array_perms

def AK_search_vertex(*args):
  return _kalashnikovDB.AK_search_vertex(*args)
AK_search_vertex = _kalashnikovDB.AK_search_vertex

def AK_search_empty_link():
  return _kalashnikovDB.AK_search_empty_link()
AK_search_empty_link = _kalashnikovDB.AK_search_empty_link

def AK_add_vertex(*args):
  return _kalashnikovDB.AK_add_vertex(*args)
AK_add_vertex = _kalashnikovDB.AK_add_vertex

def AK_add_succesor(*args):
  return _kalashnikovDB.AK_add_succesor(*args)
AK_add_succesor = _kalashnikovDB.AK_add_succesor

def AK_search_empty_stack_link(*args):
  return _kalashnikovDB.AK_search_empty_stack_link(*args)
AK_search_empty_stack_link = _kalashnikovDB.AK_search_empty_stack_link

def AK_push_to_stack(*args):
  return _kalashnikovDB.AK_push_to_stack(*args)
AK_push_to_stack = _kalashnikovDB.AK_push_to_stack

def AK_pop_from_stack():
  return _kalashnikovDB.AK_pop_from_stack()
AK_pop_from_stack = _kalashnikovDB.AK_pop_from_stack

def AK_search_in_stack(*args):
  return _kalashnikovDB.AK_search_in_stack(*args)
AK_search_in_stack = _kalashnikovDB.AK_search_in_stack

def MIN(*args):
  return _kalashnikovDB.MIN(*args)
MIN = _kalashnikovDB.MIN

def AK_tarjan(*args):
  return _kalashnikovDB.AK_tarjan(*args)
AK_tarjan = _kalashnikovDB.AK_tarjan

def AK_tarjan_test():
  return _kalashnikovDB.AK_tarjan_test()
AK_tarjan_test = _kalashnikovDB.AK_tarjan_test

def AK_copy_L_Ele(*args):
  return _kalashnikovDB.AK_copy_L_Ele(*args)
AK_copy_L_Ele = _kalashnikovDB.AK_copy_L_Ele

def AK_copy_L(*args):
  return _kalashnikovDB.AK_copy_L(*args)
AK_copy_L = _kalashnikovDB.AK_copy_L

def AK_compare_L(*args):
  return _kalashnikovDB.AK_compare_L(*args)
AK_compare_L = _kalashnikovDB.AK_compare_L
class list_elem(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, list_elem, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, list_elem, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _kalashnikovDB.list_elem_type_set
    __swig_getmethods__["type"] = _kalashnikovDB.list_elem_type_get
    if _newclass:type = _swig_property(_kalashnikovDB.list_elem_type_get, _kalashnikovDB.list_elem_type_set)
    __swig_setmethods__["size"] = _kalashnikovDB.list_elem_size_set
    __swig_getmethods__["size"] = _kalashnikovDB.list_elem_size_get
    if _newclass:size = _swig_property(_kalashnikovDB.list_elem_size_get, _kalashnikovDB.list_elem_size_set)
    __swig_setmethods__["data"] = _kalashnikovDB.list_elem_data_set
    __swig_getmethods__["data"] = _kalashnikovDB.list_elem_data_get
    if _newclass:data = _swig_property(_kalashnikovDB.list_elem_data_get, _kalashnikovDB.list_elem_data_set)
    __swig_setmethods__["table"] = _kalashnikovDB.list_elem_table_set
    __swig_getmethods__["table"] = _kalashnikovDB.list_elem_table_get
    if _newclass:table = _swig_property(_kalashnikovDB.list_elem_table_get, _kalashnikovDB.list_elem_table_set)
    __swig_setmethods__["attribute_name"] = _kalashnikovDB.list_elem_attribute_name_set
    __swig_getmethods__["attribute_name"] = _kalashnikovDB.list_elem_attribute_name_get
    if _newclass:attribute_name = _swig_property(_kalashnikovDB.list_elem_attribute_name_get, _kalashnikovDB.list_elem_attribute_name_set)
    __swig_setmethods__["constraint"] = _kalashnikovDB.list_elem_constraint_set
    __swig_getmethods__["constraint"] = _kalashnikovDB.list_elem_constraint_get
    if _newclass:constraint = _swig_property(_kalashnikovDB.list_elem_constraint_get, _kalashnikovDB.list_elem_constraint_set)
    __swig_setmethods__["next"] = _kalashnikovDB.list_elem_next_set
    __swig_getmethods__["next"] = _kalashnikovDB.list_elem_next_get
    if _newclass:next = _swig_property(_kalashnikovDB.list_elem_next_get, _kalashnikovDB.list_elem_next_set)
    def __init__(self): 
        this = _kalashnikovDB.new_list_elem()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _kalashnikovDB.delete_list_elem
    __del__ = lambda self : None;
list_elem_swigregister = _kalashnikovDB.list_elem_swigregister
list_elem_swigregister(list_elem)
cvar = _kalashnikovDB.cvar

TBL_BOX_OFFSET = _kalashnikovDB.TBL_BOX_OFFSET
class Vertex(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vertex, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vertex, name)
    __repr__ = _swig_repr
    __swig_setmethods__["vertexId"] = _kalashnikovDB.Vertex_vertexId_set
    __swig_getmethods__["vertexId"] = _kalashnikovDB.Vertex_vertexId_get
    if _newclass:vertexId = _swig_property(_kalashnikovDB.Vertex_vertexId_get, _kalashnikovDB.Vertex_vertexId_set)
    __swig_setmethods__["index"] = _kalashnikovDB.Vertex_index_set
    __swig_getmethods__["index"] = _kalashnikovDB.Vertex_index_get
    if _newclass:index = _swig_property(_kalashnikovDB.Vertex_index_get, _kalashnikovDB.Vertex_index_set)
    __swig_setmethods__["lowLink"] = _kalashnikovDB.Vertex_lowLink_set
    __swig_getmethods__["lowLink"] = _kalashnikovDB.Vertex_lowLink_get
    if _newclass:lowLink = _swig_property(_kalashnikovDB.Vertex_lowLink_get, _kalashnikovDB.Vertex_lowLink_set)
    __swig_setmethods__["nextSuccesor"] = _kalashnikovDB.Vertex_nextSuccesor_set
    __swig_getmethods__["nextSuccesor"] = _kalashnikovDB.Vertex_nextSuccesor_get
    if _newclass:nextSuccesor = _swig_property(_kalashnikovDB.Vertex_nextSuccesor_get, _kalashnikovDB.Vertex_nextSuccesor_set)
    __swig_setmethods__["nextVertex"] = _kalashnikovDB.Vertex_nextVertex_set
    __swig_getmethods__["nextVertex"] = _kalashnikovDB.Vertex_nextVertex_get
    if _newclass:nextVertex = _swig_property(_kalashnikovDB.Vertex_nextVertex_get, _kalashnikovDB.Vertex_nextVertex_set)
    def __init__(self): 
        this = _kalashnikovDB.new_Vertex()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _kalashnikovDB.delete_Vertex
    __del__ = lambda self : None;
Vertex_swigregister = _kalashnikovDB.Vertex_swigregister
Vertex_swigregister(Vertex)

class Succesor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Succesor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Succesor, name)
    __repr__ = _swig_repr
    __swig_setmethods__["link"] = _kalashnikovDB.Succesor_link_set
    __swig_getmethods__["link"] = _kalashnikovDB.Succesor_link_get
    if _newclass:link = _swig_property(_kalashnikovDB.Succesor_link_get, _kalashnikovDB.Succesor_link_set)
    __swig_setmethods__["nextSuccesor"] = _kalashnikovDB.Succesor_nextSuccesor_set
    __swig_getmethods__["nextSuccesor"] = _kalashnikovDB.Succesor_nextSuccesor_get
    if _newclass:nextSuccesor = _swig_property(_kalashnikovDB.Succesor_nextSuccesor_get, _kalashnikovDB.Succesor_nextSuccesor_set)
    def __init__(self): 
        this = _kalashnikovDB.new_Succesor()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _kalashnikovDB.delete_Succesor
    __del__ = lambda self : None;
Succesor_swigregister = _kalashnikovDB.Succesor_swigregister
Succesor_swigregister(Succesor)

class Stack(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Stack, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Stack, name)
    __repr__ = _swig_repr
    __swig_setmethods__["link"] = _kalashnikovDB.Stack_link_set
    __swig_getmethods__["link"] = _kalashnikovDB.Stack_link_get
    if _newclass:link = _swig_property(_kalashnikovDB.Stack_link_get, _kalashnikovDB.Stack_link_set)
    __swig_setmethods__["nextElement"] = _kalashnikovDB.Stack_nextElement_set
    __swig_getmethods__["nextElement"] = _kalashnikovDB.Stack_nextElement_get
    if _newclass:nextElement = _swig_property(_kalashnikovDB.Stack_nextElement_get, _kalashnikovDB.Stack_nextElement_set)
    def __init__(self): 
        this = _kalashnikovDB.new_Stack()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _kalashnikovDB.delete_Stack
    __del__ = lambda self : None;
Stack_swigregister = _kalashnikovDB.Stack_swigregister
Stack_swigregister(Stack)

class AK_header(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AK_header, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AK_header, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _kalashnikovDB.AK_header_type_set
    __swig_getmethods__["type"] = _kalashnikovDB.AK_header_type_get
    if _newclass:type = _swig_property(_kalashnikovDB.AK_header_type_get, _kalashnikovDB.AK_header_type_set)
    __swig_setmethods__["att_name"] = _kalashnikovDB.AK_header_att_name_set
    __swig_getmethods__["att_name"] = _kalashnikovDB.AK_header_att_name_get
    if _newclass:att_name = _swig_property(_kalashnikovDB.AK_header_att_name_get, _kalashnikovDB.AK_header_att_name_set)
    __swig_setmethods__["integrity"] = _kalashnikovDB.AK_header_integrity_set
    __swig_getmethods__["integrity"] = _kalashnikovDB.AK_header_integrity_get
    if _newclass:integrity = _swig_property(_kalashnikovDB.AK_header_integrity_get, _kalashnikovDB.AK_header_integrity_set)
    __swig_setmethods__["constr_name"] = _kalashnikovDB.AK_header_constr_name_set
    __swig_getmethods__["constr_name"] = _kalashnikovDB.AK_header_constr_name_get
    if _newclass:constr_name = _swig_property(_kalashnikovDB.AK_header_constr_name_get, _kalashnikovDB.AK_header_constr_name_set)
    __swig_setmethods__["constr_code"] = _kalashnikovDB.AK_header_constr_code_set
    __swig_getmethods__["constr_code"] = _kalashnikovDB.AK_header_constr_code_get
    if _newclass:constr_code = _swig_property(_kalashnikovDB.AK_header_constr_code_get, _kalashnikovDB.AK_header_constr_code_set)
    def __init__(self): 
        this = _kalashnikovDB.new_AK_header()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _kalashnikovDB.delete_AK_header
    __del__ = lambda self : None;
AK_header_swigregister = _kalashnikovDB.AK_header_swigregister
AK_header_swigregister(AK_header)

class AK_tuple_dict(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AK_tuple_dict, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AK_tuple_dict, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _kalashnikovDB.AK_tuple_dict_type_set
    __swig_getmethods__["type"] = _kalashnikovDB.AK_tuple_dict_type_get
    if _newclass:type = _swig_property(_kalashnikovDB.AK_tuple_dict_type_get, _kalashnikovDB.AK_tuple_dict_type_set)
    __swig_setmethods__["address"] = _kalashnikovDB.AK_tuple_dict_address_set
    __swig_getmethods__["address"] = _kalashnikovDB.AK_tuple_dict_address_get
    if _newclass:address = _swig_property(_kalashnikovDB.AK_tuple_dict_address_get, _kalashnikovDB.AK_tuple_dict_address_set)
    __swig_setmethods__["size"] = _kalashnikovDB.AK_tuple_dict_size_set
    __swig_getmethods__["size"] = _kalashnikovDB.AK_tuple_dict_size_get
    if _newclass:size = _swig_property(_kalashnikovDB.AK_tuple_dict_size_get, _kalashnikovDB.AK_tuple_dict_size_set)
    def __init__(self): 
        this = _kalashnikovDB.new_AK_tuple_dict()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _kalashnikovDB.delete_AK_tuple_dict
    __del__ = lambda self : None;
AK_tuple_dict_swigregister = _kalashnikovDB.AK_tuple_dict_swigregister
AK_tuple_dict_swigregister(AK_tuple_dict)

class AK_block(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AK_block, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AK_block, name)
    __repr__ = _swig_repr
    __swig_setmethods__["address"] = _kalashnikovDB.AK_block_address_set
    __swig_getmethods__["address"] = _kalashnikovDB.AK_block_address_get
    if _newclass:address = _swig_property(_kalashnikovDB.AK_block_address_get, _kalashnikovDB.AK_block_address_set)
    __swig_setmethods__["type"] = _kalashnikovDB.AK_block_type_set
    __swig_getmethods__["type"] = _kalashnikovDB.AK_block_type_get
    if _newclass:type = _swig_property(_kalashnikovDB.AK_block_type_get, _kalashnikovDB.AK_block_type_set)
    __swig_setmethods__["chained_with"] = _kalashnikovDB.AK_block_chained_with_set
    __swig_getmethods__["chained_with"] = _kalashnikovDB.AK_block_chained_with_get
    if _newclass:chained_with = _swig_property(_kalashnikovDB.AK_block_chained_with_get, _kalashnikovDB.AK_block_chained_with_set)
    __swig_setmethods__["free_space"] = _kalashnikovDB.AK_block_free_space_set
    __swig_getmethods__["free_space"] = _kalashnikovDB.AK_block_free_space_get
    if _newclass:free_space = _swig_property(_kalashnikovDB.AK_block_free_space_get, _kalashnikovDB.AK_block_free_space_set)
    __swig_setmethods__["last_tuple_dict_id"] = _kalashnikovDB.AK_block_last_tuple_dict_id_set
    __swig_getmethods__["last_tuple_dict_id"] = _kalashnikovDB.AK_block_last_tuple_dict_id_get
    if _newclass:last_tuple_dict_id = _swig_property(_kalashnikovDB.AK_block_last_tuple_dict_id_get, _kalashnikovDB.AK_block_last_tuple_dict_id_set)
    __swig_setmethods__["header"] = _kalashnikovDB.AK_block_header_set
    __swig_getmethods__["header"] = _kalashnikovDB.AK_block_header_get
    if _newclass:header = _swig_property(_kalashnikovDB.AK_block_header_get, _kalashnikovDB.AK_block_header_set)
    __swig_setmethods__["tuple_dict"] = _kalashnikovDB.AK_block_tuple_dict_set
    __swig_getmethods__["tuple_dict"] = _kalashnikovDB.AK_block_tuple_dict_get
    if _newclass:tuple_dict = _swig_property(_kalashnikovDB.AK_block_tuple_dict_get, _kalashnikovDB.AK_block_tuple_dict_set)
    __swig_setmethods__["data"] = _kalashnikovDB.AK_block_data_set
    __swig_getmethods__["data"] = _kalashnikovDB.AK_block_data_get
    if _newclass:data = _swig_property(_kalashnikovDB.AK_block_data_get, _kalashnikovDB.AK_block_data_set)
    def __init__(self): 
        this = _kalashnikovDB.new_AK_block()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _kalashnikovDB.delete_AK_block
    __del__ = lambda self : None;
AK_block_swigregister = _kalashnikovDB.AK_block_swigregister
AK_block_swigregister(AK_block)

class table_addresses(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, table_addresses, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, table_addresses, name)
    __repr__ = _swig_repr
    __swig_setmethods__["address_from"] = _kalashnikovDB.table_addresses_address_from_set
    __swig_getmethods__["address_from"] = _kalashnikovDB.table_addresses_address_from_get
    if _newclass:address_from = _swig_property(_kalashnikovDB.table_addresses_address_from_get, _kalashnikovDB.table_addresses_address_from_set)
    __swig_setmethods__["address_to"] = _kalashnikovDB.table_addresses_address_to_set
    __swig_getmethods__["address_to"] = _kalashnikovDB.table_addresses_address_to_get
    if _newclass:address_to = _swig_property(_kalashnikovDB.table_addresses_address_to_get, _kalashnikovDB.table_addresses_address_to_set)
    def __init__(self): 
        this = _kalashnikovDB.new_table_addresses()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _kalashnikovDB.delete_table_addresses
    __del__ = lambda self : None;
table_addresses_swigregister = _kalashnikovDB.table_addresses_swigregister
table_addresses_swigregister(table_addresses)


def AK_init_db_file(*args):
  return _kalashnikovDB.AK_init_db_file(*args)
AK_init_db_file = _kalashnikovDB.AK_init_db_file

def AK_read_block(*args):
  return _kalashnikovDB.AK_read_block(*args)
AK_read_block = _kalashnikovDB.AK_read_block

def AK_write_block(*args):
  return _kalashnikovDB.AK_write_block(*args)
AK_write_block = _kalashnikovDB.AK_write_block

def AK_new_extent(*args):
  return _kalashnikovDB.AK_new_extent(*args)
AK_new_extent = _kalashnikovDB.AK_new_extent

def AK_new_segment(*args):
  return _kalashnikovDB.AK_new_segment(*args)
AK_new_segment = _kalashnikovDB.AK_new_segment

def AK_create_header(*args):
  return _kalashnikovDB.AK_create_header(*args)
AK_create_header = _kalashnikovDB.AK_create_header

def AK_insert_entry(*args):
  return _kalashnikovDB.AK_insert_entry(*args)
AK_insert_entry = _kalashnikovDB.AK_insert_entry

def AK_init_system_tables_catalog(*args):
  return _kalashnikovDB.AK_init_system_tables_catalog(*args)
AK_init_system_tables_catalog = _kalashnikovDB.AK_init_system_tables_catalog

def AK_memset_int(*args):
  return _kalashnikovDB.AK_memset_int(*args)
AK_memset_int = _kalashnikovDB.AK_memset_int

def AK_register_system_tables(*args):
  return _kalashnikovDB.AK_register_system_tables(*args)
AK_register_system_tables = _kalashnikovDB.AK_register_system_tables

def AK_init_system_catalog():
  return _kalashnikovDB.AK_init_system_catalog()
AK_init_system_catalog = _kalashnikovDB.AK_init_system_catalog

def AK_delete_block(*args):
  return _kalashnikovDB.AK_delete_block(*args)
AK_delete_block = _kalashnikovDB.AK_delete_block

def AK_delete_extent(*args):
  return _kalashnikovDB.AK_delete_extent(*args)
AK_delete_extent = _kalashnikovDB.AK_delete_extent

def AK_delete_segment(*args):
  return _kalashnikovDB.AK_delete_segment(*args)
AK_delete_segment = _kalashnikovDB.AK_delete_segment

def AK_init_disk_manager():
  return _kalashnikovDB.AK_init_disk_manager()
AK_init_disk_manager = _kalashnikovDB.AK_init_disk_manager

def AK_get_segment_addresses(*args):
  return _kalashnikovDB.AK_get_segment_addresses(*args)
AK_get_segment_addresses = _kalashnikovDB.AK_get_segment_addresses

def AK_cache_block(*args):
  return _kalashnikovDB.AK_cache_block(*args)
AK_cache_block = _kalashnikovDB.AK_cache_block

def AK_cache_malloc():
  return _kalashnikovDB.AK_cache_malloc()
AK_cache_malloc = _kalashnikovDB.AK_cache_malloc

def AK_redo_log_malloc():
  return _kalashnikovDB.AK_redo_log_malloc()
AK_redo_log_malloc = _kalashnikovDB.AK_redo_log_malloc

def AK_query_mem_malloc():
  return _kalashnikovDB.AK_query_mem_malloc()
AK_query_mem_malloc = _kalashnikovDB.AK_query_mem_malloc

def AK_memoman_init():
  return _kalashnikovDB.AK_memoman_init()
AK_memoman_init = _kalashnikovDB.AK_memoman_init

def AK_get_block(*args):
  return _kalashnikovDB.AK_get_block(*args)
AK_get_block = _kalashnikovDB.AK_get_block

def AK_refresh_cache():
  return _kalashnikovDB.AK_refresh_cache()
AK_refresh_cache = _kalashnikovDB.AK_refresh_cache

def AK_get_table_addresses(*args):
  return _kalashnikovDB.AK_get_table_addresses(*args)
AK_get_table_addresses = _kalashnikovDB.AK_get_table_addresses

def AK_get_index_addresses(*args):
  return _kalashnikovDB.AK_get_index_addresses(*args)
AK_get_index_addresses = _kalashnikovDB.AK_get_index_addresses

def AK_find_free_space(*args):
  return _kalashnikovDB.AK_find_free_space(*args)
AK_find_free_space = _kalashnikovDB.AK_find_free_space

def AK_init_new_extent(*args):
  return _kalashnikovDB.AK_init_new_extent(*args)
AK_init_new_extent = _kalashnikovDB.AK_init_new_extent

def AK_flush_cache():
  return _kalashnikovDB.AK_flush_cache()
AK_flush_cache = _kalashnikovDB.AK_flush_cache

def AK_memoman_test():
  return _kalashnikovDB.AK_memoman_test()
AK_memoman_test = _kalashnikovDB.AK_memoman_test
class AK_mem_block(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AK_mem_block, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AK_mem_block, name)
    __repr__ = _swig_repr
    __swig_setmethods__["block"] = _kalashnikovDB.AK_mem_block_block_set
    __swig_getmethods__["block"] = _kalashnikovDB.AK_mem_block_block_get
    if _newclass:block = _swig_property(_kalashnikovDB.AK_mem_block_block_get, _kalashnikovDB.AK_mem_block_block_set)
    __swig_setmethods__["dirty"] = _kalashnikovDB.AK_mem_block_dirty_set
    __swig_getmethods__["dirty"] = _kalashnikovDB.AK_mem_block_dirty_get
    if _newclass:dirty = _swig_property(_kalashnikovDB.AK_mem_block_dirty_get, _kalashnikovDB.AK_mem_block_dirty_set)
    __swig_setmethods__["timestamp_read"] = _kalashnikovDB.AK_mem_block_timestamp_read_set
    __swig_getmethods__["timestamp_read"] = _kalashnikovDB.AK_mem_block_timestamp_read_get
    if _newclass:timestamp_read = _swig_property(_kalashnikovDB.AK_mem_block_timestamp_read_get, _kalashnikovDB.AK_mem_block_timestamp_read_set)
    __swig_setmethods__["timestamp_last_change"] = _kalashnikovDB.AK_mem_block_timestamp_last_change_set
    __swig_getmethods__["timestamp_last_change"] = _kalashnikovDB.AK_mem_block_timestamp_last_change_get
    if _newclass:timestamp_last_change = _swig_property(_kalashnikovDB.AK_mem_block_timestamp_last_change_get, _kalashnikovDB.AK_mem_block_timestamp_last_change_set)
    def __init__(self): 
        this = _kalashnikovDB.new_AK_mem_block()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _kalashnikovDB.delete_AK_mem_block
    __del__ = lambda self : None;
AK_mem_block_swigregister = _kalashnikovDB.AK_mem_block_swigregister
AK_mem_block_swigregister(AK_mem_block)

class AK_db_cache(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AK_db_cache, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AK_db_cache, name)
    __repr__ = _swig_repr
    __swig_setmethods__["cache"] = _kalashnikovDB.AK_db_cache_cache_set
    __swig_getmethods__["cache"] = _kalashnikovDB.AK_db_cache_cache_get
    if _newclass:cache = _swig_property(_kalashnikovDB.AK_db_cache_cache_get, _kalashnikovDB.AK_db_cache_cache_set)
    __swig_setmethods__["next_replace"] = _kalashnikovDB.AK_db_cache_next_replace_set
    __swig_getmethods__["next_replace"] = _kalashnikovDB.AK_db_cache_next_replace_get
    if _newclass:next_replace = _swig_property(_kalashnikovDB.AK_db_cache_next_replace_get, _kalashnikovDB.AK_db_cache_next_replace_set)
    def __init__(self): 
        this = _kalashnikovDB.new_AK_db_cache()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _kalashnikovDB.delete_AK_db_cache
    __del__ = lambda self : None;
AK_db_cache_swigregister = _kalashnikovDB.AK_db_cache_swigregister
AK_db_cache_swigregister(AK_db_cache)

class AK_redo_log(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AK_redo_log, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AK_redo_log, name)
    __repr__ = _swig_repr
    __swig_setmethods__["redo_log_cache"] = _kalashnikovDB.AK_redo_log_redo_log_cache_set
    __swig_getmethods__["redo_log_cache"] = _kalashnikovDB.AK_redo_log_redo_log_cache_get
    if _newclass:redo_log_cache = _swig_property(_kalashnikovDB.AK_redo_log_redo_log_cache_get, _kalashnikovDB.AK_redo_log_redo_log_cache_set)
    __swig_setmethods__["expr"] = _kalashnikovDB.AK_redo_log_expr_set
    __swig_getmethods__["expr"] = _kalashnikovDB.AK_redo_log_expr_get
    if _newclass:expr = _swig_property(_kalashnikovDB.AK_redo_log_expr_get, _kalashnikovDB.AK_redo_log_expr_set)
    __swig_setmethods__["next_replace"] = _kalashnikovDB.AK_redo_log_next_replace_set
    __swig_getmethods__["next_replace"] = _kalashnikovDB.AK_redo_log_next_replace_get
    if _newclass:next_replace = _swig_property(_kalashnikovDB.AK_redo_log_next_replace_get, _kalashnikovDB.AK_redo_log_next_replace_set)
    def __init__(self): 
        this = _kalashnikovDB.new_AK_redo_log()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _kalashnikovDB.delete_AK_redo_log
    __del__ = lambda self : None;
AK_redo_log_swigregister = _kalashnikovDB.AK_redo_log_swigregister
AK_redo_log_swigregister(AK_redo_log)

class AK_query_mem_lib(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AK_query_mem_lib, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AK_query_mem_lib, name)
    __repr__ = _swig_repr
    __swig_setmethods__["parsed"] = _kalashnikovDB.AK_query_mem_lib_parsed_set
    __swig_getmethods__["parsed"] = _kalashnikovDB.AK_query_mem_lib_parsed_get
    if _newclass:parsed = _swig_property(_kalashnikovDB.AK_query_mem_lib_parsed_get, _kalashnikovDB.AK_query_mem_lib_parsed_set)
    __swig_setmethods__["next_replace"] = _kalashnikovDB.AK_query_mem_lib_next_replace_set
    __swig_getmethods__["next_replace"] = _kalashnikovDB.AK_query_mem_lib_next_replace_get
    if _newclass:next_replace = _swig_property(_kalashnikovDB.AK_query_mem_lib_next_replace_get, _kalashnikovDB.AK_query_mem_lib_next_replace_set)
    def __init__(self): 
        this = _kalashnikovDB.new_AK_query_mem_lib()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _kalashnikovDB.delete_AK_query_mem_lib
    __del__ = lambda self : None;
AK_query_mem_lib_swigregister = _kalashnikovDB.AK_query_mem_lib_swigregister
AK_query_mem_lib_swigregister(AK_query_mem_lib)

class AK_query_mem_dict(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AK_query_mem_dict, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AK_query_mem_dict, name)
    __repr__ = _swig_repr
    __swig_setmethods__["dictionary"] = _kalashnikovDB.AK_query_mem_dict_dictionary_set
    __swig_getmethods__["dictionary"] = _kalashnikovDB.AK_query_mem_dict_dictionary_get
    if _newclass:dictionary = _swig_property(_kalashnikovDB.AK_query_mem_dict_dictionary_get, _kalashnikovDB.AK_query_mem_dict_dictionary_set)
    __swig_setmethods__["next_replace"] = _kalashnikovDB.AK_query_mem_dict_next_replace_set
    __swig_getmethods__["next_replace"] = _kalashnikovDB.AK_query_mem_dict_next_replace_get
    if _newclass:next_replace = _swig_property(_kalashnikovDB.AK_query_mem_dict_next_replace_get, _kalashnikovDB.AK_query_mem_dict_next_replace_set)
    def __init__(self): 
        this = _kalashnikovDB.new_AK_query_mem_dict()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _kalashnikovDB.delete_AK_query_mem_dict
    __del__ = lambda self : None;
AK_query_mem_dict_swigregister = _kalashnikovDB.AK_query_mem_dict_swigregister
AK_query_mem_dict_swigregister(AK_query_mem_dict)

class AK_query_mem_result(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AK_query_mem_result, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AK_query_mem_result, name)
    __repr__ = _swig_repr
    __swig_setmethods__["results"] = _kalashnikovDB.AK_query_mem_result_results_set
    __swig_getmethods__["results"] = _kalashnikovDB.AK_query_mem_result_results_get
    if _newclass:results = _swig_property(_kalashnikovDB.AK_query_mem_result_results_get, _kalashnikovDB.AK_query_mem_result_results_set)
    __swig_setmethods__["next_replace"] = _kalashnikovDB.AK_query_mem_result_next_replace_set
    __swig_getmethods__["next_replace"] = _kalashnikovDB.AK_query_mem_result_next_replace_get
    if _newclass:next_replace = _swig_property(_kalashnikovDB.AK_query_mem_result_next_replace_get, _kalashnikovDB.AK_query_mem_result_next_replace_set)
    def __init__(self): 
        this = _kalashnikovDB.new_AK_query_mem_result()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _kalashnikovDB.delete_AK_query_mem_result
    __del__ = lambda self : None;
AK_query_mem_result_swigregister = _kalashnikovDB.AK_query_mem_result_swigregister
AK_query_mem_result_swigregister(AK_query_mem_result)

class AK_query_mem(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AK_query_mem, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AK_query_mem, name)
    __repr__ = _swig_repr
    __swig_setmethods__["parsed"] = _kalashnikovDB.AK_query_mem_parsed_set
    __swig_getmethods__["parsed"] = _kalashnikovDB.AK_query_mem_parsed_get
    if _newclass:parsed = _swig_property(_kalashnikovDB.AK_query_mem_parsed_get, _kalashnikovDB.AK_query_mem_parsed_set)
    __swig_setmethods__["dictionary"] = _kalashnikovDB.AK_query_mem_dictionary_set
    __swig_getmethods__["dictionary"] = _kalashnikovDB.AK_query_mem_dictionary_get
    if _newclass:dictionary = _swig_property(_kalashnikovDB.AK_query_mem_dictionary_get, _kalashnikovDB.AK_query_mem_dictionary_set)
    __swig_setmethods__["result"] = _kalashnikovDB.AK_query_mem_result_set
    __swig_getmethods__["result"] = _kalashnikovDB.AK_query_mem_result_get
    if _newclass:result = _swig_property(_kalashnikovDB.AK_query_mem_result_get, _kalashnikovDB.AK_query_mem_result_set)
    def __init__(self): 
        this = _kalashnikovDB.new_AK_query_mem()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _kalashnikovDB.delete_AK_query_mem
    __del__ = lambda self : None;
AK_query_mem_swigregister = _kalashnikovDB.AK_query_mem_swigregister
AK_query_mem_swigregister(AK_query_mem)


def AK_create_create_table_parameter(*args):
  return _kalashnikovDB.AK_create_create_table_parameter(*args)
AK_create_create_table_parameter = _kalashnikovDB.AK_create_create_table_parameter

def AK_create_table(*args):
  return _kalashnikovDB.AK_create_table(*args)
AK_create_table = _kalashnikovDB.AK_create_table

def AK_num_attr(*args):
  return _kalashnikovDB.AK_num_attr(*args)
AK_num_attr = _kalashnikovDB.AK_num_attr

def AK_get_num_records(*args):
  return _kalashnikovDB.AK_get_num_records(*args)
AK_get_num_records = _kalashnikovDB.AK_get_num_records

def AK_get_header(*args):
  return _kalashnikovDB.AK_get_header(*args)
AK_get_header = _kalashnikovDB.AK_get_header

def AK_get_attr_name(*args):
  return _kalashnikovDB.AK_get_attr_name(*args)
AK_get_attr_name = _kalashnikovDB.AK_get_attr_name

def AK_get_attr_index(*args):
  return _kalashnikovDB.AK_get_attr_index(*args)
AK_get_attr_index = _kalashnikovDB.AK_get_attr_index

def AK_get_column(*args):
  return _kalashnikovDB.AK_get_column(*args)
AK_get_column = _kalashnikovDB.AK_get_column

def AK_get_row(*args):
  return _kalashnikovDB.AK_get_row(*args)
AK_get_row = _kalashnikovDB.AK_get_row

def AK_get_tuple(*args):
  return _kalashnikovDB.AK_get_tuple(*args)
AK_get_tuple = _kalashnikovDB.AK_get_tuple

def AK_tuple_to_string(*args):
  return _kalashnikovDB.AK_tuple_to_string(*args)
AK_tuple_to_string = _kalashnikovDB.AK_tuple_to_string

def AK_print_row_spacer(*args):
  return _kalashnikovDB.AK_print_row_spacer(*args)
AK_print_row_spacer = _kalashnikovDB.AK_print_row_spacer

def AK_print_row(*args):
  return _kalashnikovDB.AK_print_row(*args)
AK_print_row = _kalashnikovDB.AK_print_row

def AK_print_table(*args):
  return _kalashnikovDB.AK_print_table(*args)
AK_print_table = _kalashnikovDB.AK_print_table

def AK_print_row_spacer_to_file(*args):
  return _kalashnikovDB.AK_print_row_spacer_to_file(*args)
AK_print_row_spacer_to_file = _kalashnikovDB.AK_print_row_spacer_to_file

def AK_print_row_to_file(*args):
  return _kalashnikovDB.AK_print_row_to_file(*args)
AK_print_row_to_file = _kalashnikovDB.AK_print_row_to_file

def AK_print_table_to_file(*args):
  return _kalashnikovDB.AK_print_table_to_file(*args)
AK_print_table_to_file = _kalashnikovDB.AK_print_table_to_file

def AK_table_empty(*args):
  return _kalashnikovDB.AK_table_empty(*args)
AK_table_empty = _kalashnikovDB.AK_table_empty

def AK_get_table_obj_id(*args):
  return _kalashnikovDB.AK_get_table_obj_id(*args)
AK_get_table_obj_id = _kalashnikovDB.AK_get_table_obj_id

def AK_check_tables_scheme(*args):
  return _kalashnikovDB.AK_check_tables_scheme(*args)
AK_check_tables_scheme = _kalashnikovDB.AK_check_tables_scheme

def AK_rename(*args):
  return _kalashnikovDB.AK_rename(*args)
AK_rename = _kalashnikovDB.AK_rename

def AK_table_test():
  return _kalashnikovDB.AK_table_test()
AK_table_test = _kalashnikovDB.AK_table_test

def AK_op_rename_test():
  return _kalashnikovDB.AK_op_rename_test()
AK_op_rename_test = _kalashnikovDB.AK_op_rename_test
class struct_add(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, struct_add, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, struct_add, name)
    __repr__ = _swig_repr
    __swig_setmethods__["addBlock"] = _kalashnikovDB.struct_add_addBlock_set
    __swig_getmethods__["addBlock"] = _kalashnikovDB.struct_add_addBlock_get
    if _newclass:addBlock = _swig_property(_kalashnikovDB.struct_add_addBlock_get, _kalashnikovDB.struct_add_addBlock_set)
    __swig_setmethods__["indexTd"] = _kalashnikovDB.struct_add_indexTd_set
    __swig_getmethods__["indexTd"] = _kalashnikovDB.struct_add_indexTd_get
    if _newclass:indexTd = _swig_property(_kalashnikovDB.struct_add_indexTd_get, _kalashnikovDB.struct_add_indexTd_set)
    def __init__(self): 
        this = _kalashnikovDB.new_struct_add()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _kalashnikovDB.delete_struct_add
    __del__ = lambda self : None;
struct_add_swigregister = _kalashnikovDB.struct_add_swigregister
struct_add_swigregister(struct_add)

class list_structure_ad(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, list_structure_ad, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, list_structure_ad, name)
    __repr__ = _swig_repr
    __swig_setmethods__["attName"] = _kalashnikovDB.list_structure_ad_attName_set
    __swig_getmethods__["attName"] = _kalashnikovDB.list_structure_ad_attName_get
    if _newclass:attName = _swig_property(_kalashnikovDB.list_structure_ad_attName_get, _kalashnikovDB.list_structure_ad_attName_set)
    __swig_setmethods__["add"] = _kalashnikovDB.list_structure_ad_add_set
    __swig_getmethods__["add"] = _kalashnikovDB.list_structure_ad_add_get
    if _newclass:add = _swig_property(_kalashnikovDB.list_structure_ad_add_get, _kalashnikovDB.list_structure_ad_add_set)
    __swig_setmethods__["next"] = _kalashnikovDB.list_structure_ad_next_set
    __swig_getmethods__["next"] = _kalashnikovDB.list_structure_ad_next_get
    if _newclass:next = _swig_property(_kalashnikovDB.list_structure_ad_next_get, _kalashnikovDB.list_structure_ad_next_set)
    def __init__(self): 
        this = _kalashnikovDB.new_list_structure_ad()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _kalashnikovDB.delete_list_structure_ad
    __del__ = lambda self : None;
list_structure_ad_swigregister = _kalashnikovDB.list_structure_ad_swigregister
list_structure_ad_swigregister(list_structure_ad)


def Ak_InitializelistAd(*args):
  return _kalashnikovDB.Ak_InitializelistAd(*args)
Ak_InitializelistAd = _kalashnikovDB.Ak_InitializelistAd

def Ak_Get_First_elementAd(*args):
  return _kalashnikovDB.Ak_Get_First_elementAd(*args)
Ak_Get_First_elementAd = _kalashnikovDB.Ak_Get_First_elementAd

def Ak_Get_Last_elementAd(*args):
  return _kalashnikovDB.Ak_Get_Last_elementAd(*args)
Ak_Get_Last_elementAd = _kalashnikovDB.Ak_Get_Last_elementAd

def Ak_Get_Next_elementAd(*args):
  return _kalashnikovDB.Ak_Get_Next_elementAd(*args)
Ak_Get_Next_elementAd = _kalashnikovDB.Ak_Get_Next_elementAd

def Ak_Get_Previous_elementAd(*args):
  return _kalashnikovDB.Ak_Get_Previous_elementAd(*args)
Ak_Get_Previous_elementAd = _kalashnikovDB.Ak_Get_Previous_elementAd

def Ak_Get_Position_Of_elementAd(*args):
  return _kalashnikovDB.Ak_Get_Position_Of_elementAd(*args)
Ak_Get_Position_Of_elementAd = _kalashnikovDB.Ak_Get_Position_Of_elementAd

def Ak_Delete_elementAd(*args):
  return _kalashnikovDB.Ak_Delete_elementAd(*args)
Ak_Delete_elementAd = _kalashnikovDB.Ak_Delete_elementAd

def Ak_Delete_All_elementsAd(*args):
  return _kalashnikovDB.Ak_Delete_All_elementsAd(*args)
Ak_Delete_All_elementsAd = _kalashnikovDB.Ak_Delete_All_elementsAd

def Ak_Insert_NewelementAd(*args):
  return _kalashnikovDB.Ak_Insert_NewelementAd(*args)
Ak_Insert_NewelementAd = _kalashnikovDB.Ak_Insert_NewelementAd

def Ak_If_ExistOp(*args):
  return _kalashnikovDB.Ak_If_ExistOp(*args)
Ak_If_ExistOp = _kalashnikovDB.Ak_If_ExistOp

def AK_create_Index(*args):
  return _kalashnikovDB.AK_create_Index(*args)
AK_create_Index = _kalashnikovDB.AK_create_Index

def Ak_print_Header_Test(*args):
  return _kalashnikovDB.Ak_print_Header_Test(*args)
Ak_print_Header_Test = _kalashnikovDB.Ak_print_Header_Test

def Ak_create_Index(*args):
  return _kalashnikovDB.Ak_create_Index(*args)
Ak_create_Index = _kalashnikovDB.Ak_create_Index

def Ak_get_Attribute(*args):
  return _kalashnikovDB.Ak_get_Attribute(*args)
Ak_get_Attribute = _kalashnikovDB.Ak_get_Attribute

def Ak_create_List_Address_Test():
  return _kalashnikovDB.Ak_create_List_Address_Test()
Ak_create_List_Address_Test = _kalashnikovDB.Ak_create_List_Address_Test

def Ak_print_Att_Test(*args):
  return _kalashnikovDB.Ak_print_Att_Test(*args)
Ak_print_Att_Test = _kalashnikovDB.Ak_print_Att_Test

def AK_get_Attribute(*args):
  return _kalashnikovDB.AK_get_Attribute(*args)
AK_get_Attribute = _kalashnikovDB.AK_get_Attribute

def AK_update(*args):
  return _kalashnikovDB.AK_update(*args)
AK_update = _kalashnikovDB.AK_update

def Ak_write_block(*args):
  return _kalashnikovDB.Ak_write_block(*args)
Ak_write_block = _kalashnikovDB.Ak_write_block

def Ak_bitmap_test():
  return _kalashnikovDB.Ak_bitmap_test()
Ak_bitmap_test = _kalashnikovDB.Ak_bitmap_test

def AK_elem_hash_value(*args):
  return _kalashnikovDB.AK_elem_hash_value(*args)
AK_elem_hash_value = _kalashnikovDB.AK_elem_hash_value

def Ak_insert_bucket_to_block(*args):
  return _kalashnikovDB.Ak_insert_bucket_to_block(*args)
Ak_insert_bucket_to_block = _kalashnikovDB.Ak_insert_bucket_to_block

def Ak_update_bucket_in_block(*args):
  return _kalashnikovDB.Ak_update_bucket_in_block(*args)
Ak_update_bucket_in_block = _kalashnikovDB.Ak_update_bucket_in_block

def AK_change_hash_info(*args):
  return _kalashnikovDB.AK_change_hash_info(*args)
AK_change_hash_info = _kalashnikovDB.AK_change_hash_info

def AK_get_hash_info(*args):
  return _kalashnikovDB.AK_get_hash_info(*args)
AK_get_hash_info = _kalashnikovDB.AK_get_hash_info

def Ak_get_nth_main_bucket_add(*args):
  return _kalashnikovDB.Ak_get_nth_main_bucket_add(*args)
Ak_get_nth_main_bucket_add = _kalashnikovDB.Ak_get_nth_main_bucket_add

def AK_insert_in_hash_index(*args):
  return _kalashnikovDB.AK_insert_in_hash_index(*args)
AK_insert_in_hash_index = _kalashnikovDB.AK_insert_in_hash_index

def AK_find_delete_in_hash_index(*args):
  return _kalashnikovDB.AK_find_delete_in_hash_index(*args)
AK_find_delete_in_hash_index = _kalashnikovDB.AK_find_delete_in_hash_index

def AK_find_in_hash_index(*args):
  return _kalashnikovDB.AK_find_in_hash_index(*args)
AK_find_in_hash_index = _kalashnikovDB.AK_find_in_hash_index

def AK_delete_in_hash_index(*args):
  return _kalashnikovDB.AK_delete_in_hash_index(*args)
AK_delete_in_hash_index = _kalashnikovDB.AK_delete_in_hash_index

def AK_create_hash_index(*args):
  return _kalashnikovDB.AK_create_hash_index(*args)
AK_create_hash_index = _kalashnikovDB.AK_create_hash_index

def AK_delete_hash_index(*args):
  return _kalashnikovDB.AK_delete_hash_index(*args)
AK_delete_hash_index = _kalashnikovDB.AK_delete_hash_index

def Ak_hash_test():
  return _kalashnikovDB.Ak_hash_test()
Ak_hash_test = _kalashnikovDB.Ak_hash_test
class hash_info(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, hash_info, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, hash_info, name)
    __repr__ = _swig_repr
    __swig_setmethods__["modulo"] = _kalashnikovDB.hash_info_modulo_set
    __swig_getmethods__["modulo"] = _kalashnikovDB.hash_info_modulo_get
    if _newclass:modulo = _swig_property(_kalashnikovDB.hash_info_modulo_get, _kalashnikovDB.hash_info_modulo_set)
    __swig_setmethods__["main_bucket_num"] = _kalashnikovDB.hash_info_main_bucket_num_set
    __swig_getmethods__["main_bucket_num"] = _kalashnikovDB.hash_info_main_bucket_num_get
    if _newclass:main_bucket_num = _swig_property(_kalashnikovDB.hash_info_main_bucket_num_get, _kalashnikovDB.hash_info_main_bucket_num_set)
    __swig_setmethods__["hash_bucket_num"] = _kalashnikovDB.hash_info_hash_bucket_num_set
    __swig_getmethods__["hash_bucket_num"] = _kalashnikovDB.hash_info_hash_bucket_num_get
    if _newclass:hash_bucket_num = _swig_property(_kalashnikovDB.hash_info_hash_bucket_num_get, _kalashnikovDB.hash_info_hash_bucket_num_set)
    def __init__(self): 
        this = _kalashnikovDB.new_hash_info()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _kalashnikovDB.delete_hash_info
    __del__ = lambda self : None;
hash_info_swigregister = _kalashnikovDB.hash_info_swigregister
hash_info_swigregister(hash_info)

class bucket_elem(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, bucket_elem, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, bucket_elem, name)
    __repr__ = _swig_repr
    __swig_setmethods__["value"] = _kalashnikovDB.bucket_elem_value_set
    __swig_getmethods__["value"] = _kalashnikovDB.bucket_elem_value_get
    if _newclass:value = _swig_property(_kalashnikovDB.bucket_elem_value_get, _kalashnikovDB.bucket_elem_value_set)
    __swig_setmethods__["add"] = _kalashnikovDB.bucket_elem_add_set
    __swig_getmethods__["add"] = _kalashnikovDB.bucket_elem_add_get
    if _newclass:add = _swig_property(_kalashnikovDB.bucket_elem_add_get, _kalashnikovDB.bucket_elem_add_set)
    def __init__(self): 
        this = _kalashnikovDB.new_bucket_elem()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _kalashnikovDB.delete_bucket_elem
    __del__ = lambda self : None;
bucket_elem_swigregister = _kalashnikovDB.bucket_elem_swigregister
bucket_elem_swigregister(bucket_elem)

class main_bucket(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, main_bucket, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, main_bucket, name)
    __repr__ = _swig_repr
    __swig_setmethods__["element"] = _kalashnikovDB.main_bucket_element_set
    __swig_getmethods__["element"] = _kalashnikovDB.main_bucket_element_get
    if _newclass:element = _swig_property(_kalashnikovDB.main_bucket_element_get, _kalashnikovDB.main_bucket_element_set)
    def __init__(self): 
        this = _kalashnikovDB.new_main_bucket()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _kalashnikovDB.delete_main_bucket
    __del__ = lambda self : None;
main_bucket_swigregister = _kalashnikovDB.main_bucket_swigregister
main_bucket_swigregister(main_bucket)

class hash_bucket(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, hash_bucket, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, hash_bucket, name)
    __repr__ = _swig_repr
    __swig_setmethods__["bucket_level"] = _kalashnikovDB.hash_bucket_bucket_level_set
    __swig_getmethods__["bucket_level"] = _kalashnikovDB.hash_bucket_bucket_level_get
    if _newclass:bucket_level = _swig_property(_kalashnikovDB.hash_bucket_bucket_level_get, _kalashnikovDB.hash_bucket_bucket_level_set)
    __swig_setmethods__["element"] = _kalashnikovDB.hash_bucket_element_set
    __swig_getmethods__["element"] = _kalashnikovDB.hash_bucket_element_get
    if _newclass:element = _swig_property(_kalashnikovDB.hash_bucket_element_get, _kalashnikovDB.hash_bucket_element_set)
    def __init__(self): 
        this = _kalashnikovDB.new_hash_bucket()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _kalashnikovDB.delete_hash_bucket
    __del__ = lambda self : None;
hash_bucket_swigregister = _kalashnikovDB.hash_bucket_swigregister
hash_bucket_swigregister(hash_bucket)


def Ak_btree_test():
  return _kalashnikovDB.Ak_btree_test()
Ak_btree_test = _kalashnikovDB.Ak_btree_test

def Ak_get_total_headers(*args):
  return _kalashnikovDB.Ak_get_total_headers(*args)
Ak_get_total_headers = _kalashnikovDB.Ak_get_total_headers

def Ak_get_header_number(*args):
  return _kalashnikovDB.Ak_get_header_number(*args)
Ak_get_header_number = _kalashnikovDB.Ak_get_header_number

def Ak_get_num_of_tuples(*args):
  return _kalashnikovDB.Ak_get_num_of_tuples(*args)
Ak_get_num_of_tuples = _kalashnikovDB.Ak_get_num_of_tuples

def AK_sort_segment(*args):
  return _kalashnikovDB.AK_sort_segment(*args)
AK_sort_segment = _kalashnikovDB.AK_sort_segment

def Ak_reset_block(*args):
  return _kalashnikovDB.Ak_reset_block(*args)
Ak_reset_block = _kalashnikovDB.Ak_reset_block

def AK_block_sort(*args):
  return _kalashnikovDB.AK_block_sort(*args)
AK_block_sort = _kalashnikovDB.AK_block_sort

def Ak_filesort_test():
  return _kalashnikovDB.Ak_filesort_test()
Ak_filesort_test = _kalashnikovDB.Ak_filesort_test
DATA_ROW_SIZE = _kalashnikovDB.DATA_ROW_SIZE
DATA_TUPLE_SIZE = _kalashnikovDB.DATA_TUPLE_SIZE

def AK_search_unsorted(*args):
  return _kalashnikovDB.AK_search_unsorted(*args)
AK_search_unsorted = _kalashnikovDB.AK_search_unsorted

def AK_deallocate_search_result(*args):
  return _kalashnikovDB.AK_deallocate_search_result(*args)
AK_deallocate_search_result = _kalashnikovDB.AK_deallocate_search_result

def Ak_filesearch_test():
  return _kalashnikovDB.Ak_filesearch_test()
Ak_filesearch_test = _kalashnikovDB.Ak_filesearch_test
SEARCH_NULL = _kalashnikovDB.SEARCH_NULL
SEARCH_ALL = _kalashnikovDB.SEARCH_ALL
SEARCH_PARTICULAR = _kalashnikovDB.SEARCH_PARTICULAR
SEARCH_RANGE = _kalashnikovDB.SEARCH_RANGE
class search_params(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, search_params, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, search_params, name)
    __repr__ = _swig_repr
    __swig_setmethods__["szAttribute"] = _kalashnikovDB.search_params_szAttribute_set
    __swig_getmethods__["szAttribute"] = _kalashnikovDB.search_params_szAttribute_get
    if _newclass:szAttribute = _swig_property(_kalashnikovDB.search_params_szAttribute_get, _kalashnikovDB.search_params_szAttribute_set)
    __swig_setmethods__["pData_lower"] = _kalashnikovDB.search_params_pData_lower_set
    __swig_getmethods__["pData_lower"] = _kalashnikovDB.search_params_pData_lower_get
    if _newclass:pData_lower = _swig_property(_kalashnikovDB.search_params_pData_lower_get, _kalashnikovDB.search_params_pData_lower_set)
    __swig_setmethods__["pData_upper"] = _kalashnikovDB.search_params_pData_upper_set
    __swig_getmethods__["pData_upper"] = _kalashnikovDB.search_params_pData_upper_get
    if _newclass:pData_upper = _swig_property(_kalashnikovDB.search_params_pData_upper_get, _kalashnikovDB.search_params_pData_upper_set)
    __swig_setmethods__["iSearchType"] = _kalashnikovDB.search_params_iSearchType_set
    __swig_getmethods__["iSearchType"] = _kalashnikovDB.search_params_iSearchType_get
    if _newclass:iSearchType = _swig_property(_kalashnikovDB.search_params_iSearchType_get, _kalashnikovDB.search_params_iSearchType_set)
    def __init__(self): 
        this = _kalashnikovDB.new_search_params()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _kalashnikovDB.delete_search_params
    __del__ = lambda self : None;
search_params_swigregister = _kalashnikovDB.search_params_swigregister
search_params_swigregister(search_params)

class search_result(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, search_result, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, search_result, name)
    __repr__ = _swig_repr
    __swig_setmethods__["aiTuple_addresses"] = _kalashnikovDB.search_result_aiTuple_addresses_set
    __swig_getmethods__["aiTuple_addresses"] = _kalashnikovDB.search_result_aiTuple_addresses_get
    if _newclass:aiTuple_addresses = _swig_property(_kalashnikovDB.search_result_aiTuple_addresses_get, _kalashnikovDB.search_result_aiTuple_addresses_set)
    __swig_setmethods__["aiBlocks"] = _kalashnikovDB.search_result_aiBlocks_set
    __swig_getmethods__["aiBlocks"] = _kalashnikovDB.search_result_aiBlocks_get
    if _newclass:aiBlocks = _swig_property(_kalashnikovDB.search_result_aiBlocks_get, _kalashnikovDB.search_result_aiBlocks_set)
    __swig_setmethods__["iNum_tuple_addresses"] = _kalashnikovDB.search_result_iNum_tuple_addresses_set
    __swig_getmethods__["iNum_tuple_addresses"] = _kalashnikovDB.search_result_iNum_tuple_addresses_get
    if _newclass:iNum_tuple_addresses = _swig_property(_kalashnikovDB.search_result_iNum_tuple_addresses_get, _kalashnikovDB.search_result_iNum_tuple_addresses_set)
    __swig_setmethods__["aiSearch_attributes"] = _kalashnikovDB.search_result_aiSearch_attributes_set
    __swig_getmethods__["aiSearch_attributes"] = _kalashnikovDB.search_result_aiSearch_attributes_get
    if _newclass:aiSearch_attributes = _swig_property(_kalashnikovDB.search_result_aiSearch_attributes_get, _kalashnikovDB.search_result_aiSearch_attributes_set)
    __swig_setmethods__["iNum_search_attributes"] = _kalashnikovDB.search_result_iNum_search_attributes_set
    __swig_getmethods__["iNum_search_attributes"] = _kalashnikovDB.search_result_iNum_search_attributes_get
    if _newclass:iNum_search_attributes = _swig_property(_kalashnikovDB.search_result_iNum_search_attributes_get, _kalashnikovDB.search_result_iNum_search_attributes_set)
    __swig_setmethods__["iNum_tuple_attributes"] = _kalashnikovDB.search_result_iNum_tuple_attributes_set
    __swig_getmethods__["iNum_tuple_attributes"] = _kalashnikovDB.search_result_iNum_tuple_attributes_get
    if _newclass:iNum_tuple_attributes = _swig_property(_kalashnikovDB.search_result_iNum_tuple_attributes_get, _kalashnikovDB.search_result_iNum_tuple_attributes_set)
    def __init__(self): 
        this = _kalashnikovDB.new_search_result()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _kalashnikovDB.delete_search_result
    __del__ = lambda self : None;
search_result_swigregister = _kalashnikovDB.search_result_swigregister
search_result_swigregister(search_result)


def Ak_Insert_New_Element_For_Update(*args):
  return _kalashnikovDB.Ak_Insert_New_Element_For_Update(*args)
Ak_Insert_New_Element_For_Update = _kalashnikovDB.Ak_Insert_New_Element_For_Update

def Ak_Insert_New_Element(*args):
  return _kalashnikovDB.Ak_Insert_New_Element(*args)
Ak_Insert_New_Element = _kalashnikovDB.Ak_Insert_New_Element

def Ak_insert_row_to_block(*args):
  return _kalashnikovDB.Ak_insert_row_to_block(*args)
Ak_insert_row_to_block = _kalashnikovDB.Ak_insert_row_to_block

def Ak_insert_row(*args):
  return _kalashnikovDB.Ak_insert_row(*args)
Ak_insert_row = _kalashnikovDB.Ak_insert_row

def Ak_update_delete_row_from_block(*args):
  return _kalashnikovDB.Ak_update_delete_row_from_block(*args)
Ak_update_delete_row_from_block = _kalashnikovDB.Ak_update_delete_row_from_block

def Ak_delete_update_segment(*args):
  return _kalashnikovDB.Ak_delete_update_segment(*args)
Ak_delete_update_segment = _kalashnikovDB.Ak_delete_update_segment

def Ak_delete_row(*args):
  return _kalashnikovDB.Ak_delete_row(*args)
Ak_delete_row = _kalashnikovDB.Ak_delete_row

def Ak_update_row(*args):
  return _kalashnikovDB.Ak_update_row(*args)
Ak_update_row = _kalashnikovDB.Ak_update_row

def Ak_fileio_test():
  return _kalashnikovDB.Ak_fileio_test()
Ak_fileio_test = _kalashnikovDB.Ak_fileio_test

def AK_initialize_new_segment(*args):
  return _kalashnikovDB.AK_initialize_new_segment(*args)
AK_initialize_new_segment = _kalashnikovDB.AK_initialize_new_segment

def Ak_files_test():
  return _kalashnikovDB.Ak_files_test()
Ak_files_test = _kalashnikovDB.Ak_files_test

def AK_create_theta_join_header(*args):
  return _kalashnikovDB.AK_create_theta_join_header(*args)
AK_create_theta_join_header = _kalashnikovDB.AK_create_theta_join_header

def AK_check_constraints(*args):
  return _kalashnikovDB.AK_check_constraints(*args)
AK_check_constraints = _kalashnikovDB.AK_check_constraints

def AK_theta_join(*args):
  return _kalashnikovDB.AK_theta_join(*args)
AK_theta_join = _kalashnikovDB.AK_theta_join

def AK_op_theta_join_test():
  return _kalashnikovDB.AK_op_theta_join_test()
AK_op_theta_join_test = _kalashnikovDB.AK_op_theta_join_test

def AK_product(*args):
  return _kalashnikovDB.AK_product(*args)
AK_product = _kalashnikovDB.AK_product

def AK_op_product_test():
  return _kalashnikovDB.AK_op_product_test()
AK_op_product_test = _kalashnikovDB.AK_op_product_test

def AK_header_size(*args):
  return _kalashnikovDB.AK_header_size(*args)
AK_header_size = _kalashnikovDB.AK_header_size

def AK_agg_input_init(*args):
  return _kalashnikovDB.AK_agg_input_init(*args)
AK_agg_input_init = _kalashnikovDB.AK_agg_input_init

def AK_agg_input_add(*args):
  return _kalashnikovDB.AK_agg_input_add(*args)
AK_agg_input_add = _kalashnikovDB.AK_agg_input_add

def AK_agg_input_add_to_beginning(*args):
  return _kalashnikovDB.AK_agg_input_add_to_beginning(*args)
AK_agg_input_add_to_beginning = _kalashnikovDB.AK_agg_input_add_to_beginning

def AK_agg_input_fix(*args):
  return _kalashnikovDB.AK_agg_input_fix(*args)
AK_agg_input_fix = _kalashnikovDB.AK_agg_input_fix

def AK_aggregation(*args):
  return _kalashnikovDB.AK_aggregation(*args)
AK_aggregation = _kalashnikovDB.AK_aggregation

def Ak_aggregation_test():
  return _kalashnikovDB.Ak_aggregation_test()
Ak_aggregation_test = _kalashnikovDB.Ak_aggregation_test
AGG_TASK_GROUP = _kalashnikovDB.AGG_TASK_GROUP
AGG_TASK_COUNT = _kalashnikovDB.AGG_TASK_COUNT
AGG_TASK_SUM = _kalashnikovDB.AGG_TASK_SUM
AGG_TASK_MAX = _kalashnikovDB.AGG_TASK_MAX
AGG_TASK_MIN = _kalashnikovDB.AGG_TASK_MIN
AGG_TASK_AVG = _kalashnikovDB.AGG_TASK_AVG
AGG_TASK_AVG_COUNT = _kalashnikovDB.AGG_TASK_AVG_COUNT
AGG_TASK_AVG_SUM = _kalashnikovDB.AGG_TASK_AVG_SUM
class AK_agg_value(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AK_agg_value, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AK_agg_value, name)
    __repr__ = _swig_repr
    __swig_setmethods__["att_name"] = _kalashnikovDB.AK_agg_value_att_name_set
    __swig_getmethods__["att_name"] = _kalashnikovDB.AK_agg_value_att_name_get
    if _newclass:att_name = _swig_property(_kalashnikovDB.AK_agg_value_att_name_get, _kalashnikovDB.AK_agg_value_att_name_set)
    __swig_setmethods__["data"] = _kalashnikovDB.AK_agg_value_data_set
    __swig_getmethods__["data"] = _kalashnikovDB.AK_agg_value_data_get
    if _newclass:data = _swig_property(_kalashnikovDB.AK_agg_value_data_get, _kalashnikovDB.AK_agg_value_data_set)
    __swig_setmethods__["agg_task"] = _kalashnikovDB.AK_agg_value_agg_task_set
    __swig_getmethods__["agg_task"] = _kalashnikovDB.AK_agg_value_agg_task_get
    if _newclass:agg_task = _swig_property(_kalashnikovDB.AK_agg_value_agg_task_get, _kalashnikovDB.AK_agg_value_agg_task_set)
    def __init__(self): 
        this = _kalashnikovDB.new_AK_agg_value()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _kalashnikovDB.delete_AK_agg_value
    __del__ = lambda self : None;
AK_agg_value_swigregister = _kalashnikovDB.AK_agg_value_swigregister
AK_agg_value_swigregister(AK_agg_value)

class AK_agg_input(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AK_agg_input, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AK_agg_input, name)
    __repr__ = _swig_repr
    __swig_setmethods__["attributes"] = _kalashnikovDB.AK_agg_input_attributes_set
    __swig_getmethods__["attributes"] = _kalashnikovDB.AK_agg_input_attributes_get
    if _newclass:attributes = _swig_property(_kalashnikovDB.AK_agg_input_attributes_get, _kalashnikovDB.AK_agg_input_attributes_set)
    __swig_setmethods__["tasks"] = _kalashnikovDB.AK_agg_input_tasks_set
    __swig_getmethods__["tasks"] = _kalashnikovDB.AK_agg_input_tasks_get
    if _newclass:tasks = _swig_property(_kalashnikovDB.AK_agg_input_tasks_get, _kalashnikovDB.AK_agg_input_tasks_set)
    __swig_setmethods__["counter"] = _kalashnikovDB.AK_agg_input_counter_set
    __swig_getmethods__["counter"] = _kalashnikovDB.AK_agg_input_counter_get
    if _newclass:counter = _swig_property(_kalashnikovDB.AK_agg_input_counter_get, _kalashnikovDB.AK_agg_input_counter_set)
    def __init__(self): 
        this = _kalashnikovDB.new_AK_agg_input()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _kalashnikovDB.delete_AK_agg_input
    __del__ = lambda self : None;
AK_agg_input_swigregister = _kalashnikovDB.AK_agg_input_swigregister
AK_agg_input_swigregister(AK_agg_input)


def AK_union(*args):
  return _kalashnikovDB.AK_union(*args)
AK_union = _kalashnikovDB.AK_union

def AK_op_union_test():
  return _kalashnikovDB.AK_op_union_test()
AK_op_union_test = _kalashnikovDB.AK_op_union_test

def AK_selection(*args):
  return _kalashnikovDB.AK_selection(*args)
AK_selection = _kalashnikovDB.AK_selection

def AK_op_selection_test():
  return _kalashnikovDB.AK_op_selection_test()
AK_op_selection_test = _kalashnikovDB.AK_op_selection_test

def AK_op_selection_test2():
  return _kalashnikovDB.AK_op_selection_test2()
AK_op_selection_test2 = _kalashnikovDB.AK_op_selection_test2

def AK_op_selection_test_redolog():
  return _kalashnikovDB.AK_op_selection_test_redolog()
AK_op_selection_test_redolog = _kalashnikovDB.AK_op_selection_test_redolog
DROP_TABLE = _kalashnikovDB.DROP_TABLE

def AK_drop(*args):
  return _kalashnikovDB.AK_drop(*args)
AK_drop = _kalashnikovDB.AK_drop

def AK_drop_test():
  return _kalashnikovDB.AK_drop_test()
AK_drop_test = _kalashnikovDB.AK_drop_test
class drop_arguments(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, drop_arguments, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, drop_arguments, name)
    __repr__ = _swig_repr
    __swig_setmethods__["value"] = _kalashnikovDB.drop_arguments_value_set
    __swig_getmethods__["value"] = _kalashnikovDB.drop_arguments_value_get
    if _newclass:value = _swig_property(_kalashnikovDB.drop_arguments_value_get, _kalashnikovDB.drop_arguments_value_set)
    __swig_setmethods__["next"] = _kalashnikovDB.drop_arguments_next_set
    __swig_getmethods__["next"] = _kalashnikovDB.drop_arguments_next_get
    if _newclass:next = _swig_property(_kalashnikovDB.drop_arguments_next_get, _kalashnikovDB.drop_arguments_next_set)
    def __init__(self): 
        this = _kalashnikovDB.new_drop_arguments()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _kalashnikovDB.delete_drop_arguments
    __del__ = lambda self : None;
drop_arguments_swigregister = _kalashnikovDB.drop_arguments_swigregister
drop_arguments_swigregister(drop_arguments)


def AK_get_view_obj_id(*args):
  return _kalashnikovDB.AK_get_view_obj_id(*args)
AK_get_view_obj_id = _kalashnikovDB.AK_get_view_obj_id

def AK_get_view_query(*args):
  return _kalashnikovDB.AK_get_view_query(*args)
AK_get_view_query = _kalashnikovDB.AK_get_view_query

def AK_get_rel_exp(*args):
  return _kalashnikovDB.AK_get_rel_exp(*args)
AK_get_rel_exp = _kalashnikovDB.AK_get_rel_exp

def AK_view_add(*args):
  return _kalashnikovDB.AK_view_add(*args)
AK_view_add = _kalashnikovDB.AK_view_add

def AK_view_remove_by_obj_id(*args):
  return _kalashnikovDB.AK_view_remove_by_obj_id(*args)
AK_view_remove_by_obj_id = _kalashnikovDB.AK_view_remove_by_obj_id

def AK_view_remove_by_name(*args):
  return _kalashnikovDB.AK_view_remove_by_name(*args)
AK_view_remove_by_name = _kalashnikovDB.AK_view_remove_by_name

def AK_view_rename(*args):
  return _kalashnikovDB.AK_view_rename(*args)
AK_view_rename = _kalashnikovDB.AK_view_rename

def AK_view_change_query(*args):
  return _kalashnikovDB.AK_view_change_query(*args)
AK_view_change_query = _kalashnikovDB.AK_view_change_query

def AK_view_test():
  return _kalashnikovDB.AK_view_test()
AK_view_test = _kalashnikovDB.AK_view_test

def AK_temp_create_table(*args):
  return _kalashnikovDB.AK_temp_create_table(*args)
AK_temp_create_table = _kalashnikovDB.AK_temp_create_table

def AK_create_block_header(*args):
  return _kalashnikovDB.AK_create_block_header(*args)
AK_create_block_header = _kalashnikovDB.AK_create_block_header

def AK_copy_block_projection(*args):
  return _kalashnikovDB.AK_copy_block_projection(*args)
AK_copy_block_projection = _kalashnikovDB.AK_copy_block_projection

def AK_projection(*args):
  return _kalashnikovDB.AK_projection(*args)
AK_projection = _kalashnikovDB.AK_projection

def AK_op_projection_test():
  return _kalashnikovDB.AK_op_projection_test()
AK_op_projection_test = _kalashnikovDB.AK_op_projection_test

def AK_create_join_block_header(*args):
  return _kalashnikovDB.AK_create_join_block_header(*args)
AK_create_join_block_header = _kalashnikovDB.AK_create_join_block_header

def AK_merge_block_join(*args):
  return _kalashnikovDB.AK_merge_block_join(*args)
AK_merge_block_join = _kalashnikovDB.AK_merge_block_join

def AK_copy_blocks_join(*args):
  return _kalashnikovDB.AK_copy_blocks_join(*args)
AK_copy_blocks_join = _kalashnikovDB.AK_copy_blocks_join

def AK_join(*args):
  return _kalashnikovDB.AK_join(*args)
AK_join = _kalashnikovDB.AK_join

def AK_op_join_test():
  return _kalashnikovDB.AK_op_join_test()
AK_op_join_test = _kalashnikovDB.AK_op_join_test

def AK_intersect(*args):
  return _kalashnikovDB.AK_intersect(*args)
AK_intersect = _kalashnikovDB.AK_intersect

def Ak_op_intersect_test():
  return _kalashnikovDB.Ak_op_intersect_test()
Ak_op_intersect_test = _kalashnikovDB.Ak_op_intersect_test
class intersect_attr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, intersect_attr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, intersect_attr, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _kalashnikovDB.intersect_attr_type_set
    __swig_getmethods__["type"] = _kalashnikovDB.intersect_attr_type_get
    if _newclass:type = _swig_property(_kalashnikovDB.intersect_attr_type_get, _kalashnikovDB.intersect_attr_type_set)
    __swig_setmethods__["att_name"] = _kalashnikovDB.intersect_attr_att_name_set
    __swig_getmethods__["att_name"] = _kalashnikovDB.intersect_attr_att_name_get
    if _newclass:att_name = _swig_property(_kalashnikovDB.intersect_attr_att_name_get, _kalashnikovDB.intersect_attr_att_name_set)
    def __init__(self): 
        this = _kalashnikovDB.new_intersect_attr()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _kalashnikovDB.delete_intersect_attr
    __del__ = lambda self : None;
intersect_attr_swigregister = _kalashnikovDB.intersect_attr_swigregister
intersect_attr_swigregister(intersect_attr)


def AK_difference(*args):
  return _kalashnikovDB.AK_difference(*args)
AK_difference = _kalashnikovDB.AK_difference

def Ak_op_difference_test():
  return _kalashnikovDB.Ak_op_difference_test()
Ak_op_difference_test = _kalashnikovDB.Ak_op_difference_test

def AK_rel_eq_assoc(*args):
  return _kalashnikovDB.AK_rel_eq_assoc(*args)
AK_rel_eq_assoc = _kalashnikovDB.AK_rel_eq_assoc

def AK_rel_eq_get_atrributes_char(*args):
  return _kalashnikovDB.AK_rel_eq_get_atrributes_char(*args)
AK_rel_eq_get_atrributes_char = _kalashnikovDB.AK_rel_eq_get_atrributes_char

def AK_rel_eq_cond_attributes(*args):
  return _kalashnikovDB.AK_rel_eq_cond_attributes(*args)
AK_rel_eq_cond_attributes = _kalashnikovDB.AK_rel_eq_cond_attributes

def AK_rel_eq_share_attributes(*args):
  return _kalashnikovDB.AK_rel_eq_share_attributes(*args)
AK_rel_eq_share_attributes = _kalashnikovDB.AK_rel_eq_share_attributes

def AK_rel_eq_commute_with_theta_join(*args):
  return _kalashnikovDB.AK_rel_eq_commute_with_theta_join(*args)
AK_rel_eq_commute_with_theta_join = _kalashnikovDB.AK_rel_eq_commute_with_theta_join

def AK_rel_eq_split_condition(*args):
  return _kalashnikovDB.AK_rel_eq_split_condition(*args)
AK_rel_eq_split_condition = _kalashnikovDB.AK_rel_eq_split_condition

def AK_rel_eq_selection(*args):
  return _kalashnikovDB.AK_rel_eq_selection(*args)
AK_rel_eq_selection = _kalashnikovDB.AK_rel_eq_selection

def AK_rel_eq_projection_attributes(*args):
  return _kalashnikovDB.AK_rel_eq_projection_attributes(*args)
AK_rel_eq_projection_attributes = _kalashnikovDB.AK_rel_eq_projection_attributes

def AK_rel_eq_projection(*args):
  return _kalashnikovDB.AK_rel_eq_projection(*args)
AK_rel_eq_projection = _kalashnikovDB.AK_rel_eq_projection

def AK_rel_eq_get_attributes(*args):
  return _kalashnikovDB.AK_rel_eq_get_attributes(*args)
AK_rel_eq_get_attributes = _kalashnikovDB.AK_rel_eq_get_attributes

def AK_print_optimized_query(*args):
  return _kalashnikovDB.AK_print_optimized_query(*args)
AK_print_optimized_query = _kalashnikovDB.AK_print_optimized_query

def AK_execute_rel_eq(*args):
  return _kalashnikovDB.AK_execute_rel_eq(*args)
AK_execute_rel_eq = _kalashnikovDB.AK_execute_rel_eq

def AK_query_optimization(*args):
  return _kalashnikovDB.AK_query_optimization(*args)
AK_query_optimization = _kalashnikovDB.AK_query_optimization

def AK_query_optimization_test():
  return _kalashnikovDB.AK_query_optimization_test()
AK_query_optimization_test = _kalashnikovDB.AK_query_optimization_test
MAX_PERMUTATION = _kalashnikovDB.MAX_PERMUTATION

def AK_print_rel_eq_comut(*args):
  return _kalashnikovDB.AK_print_rel_eq_comut(*args)
AK_print_rel_eq_comut = _kalashnikovDB.AK_print_rel_eq_comut

def AK_rel_eq_comut(*args):
  return _kalashnikovDB.AK_rel_eq_comut(*args)
AK_rel_eq_comut = _kalashnikovDB.AK_rel_eq_comut

def AK_rel_eq_comut_test():
  return _kalashnikovDB.AK_rel_eq_comut_test()
AK_rel_eq_comut_test = _kalashnikovDB.AK_rel_eq_comut_test

def AK_compare(*args):
  return _kalashnikovDB.AK_compare(*args)
AK_compare = _kalashnikovDB.AK_compare

def AK_print_rel_eq_assoc(*args):
  return _kalashnikovDB.AK_print_rel_eq_assoc(*args)
AK_print_rel_eq_assoc = _kalashnikovDB.AK_print_rel_eq_assoc

def AK_rel_eq_assoc_test():
  return _kalashnikovDB.AK_rel_eq_assoc_test()
AK_rel_eq_assoc_test = _kalashnikovDB.AK_rel_eq_assoc_test
class cost_eval_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cost_eval_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cost_eval_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["value"] = _kalashnikovDB.cost_eval_t_value_set
    __swig_getmethods__["value"] = _kalashnikovDB.cost_eval_t_value_get
    if _newclass:value = _swig_property(_kalashnikovDB.cost_eval_t_value_get, _kalashnikovDB.cost_eval_t_value_set)
    __swig_setmethods__["data"] = _kalashnikovDB.cost_eval_t_data_set
    __swig_getmethods__["data"] = _kalashnikovDB.cost_eval_t_data_get
    if _newclass:data = _swig_property(_kalashnikovDB.cost_eval_t_data_get, _kalashnikovDB.cost_eval_t_data_set)
    def __init__(self): 
        this = _kalashnikovDB.new_cost_eval_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _kalashnikovDB.delete_cost_eval_t
    __del__ = lambda self : None;
cost_eval_t_swigregister = _kalashnikovDB.cost_eval_t_swigregister
cost_eval_t_swigregister(cost_eval_t)


def AK_rel_eq_is_attr_subset(*args):
  return _kalashnikovDB.AK_rel_eq_is_attr_subset(*args)
AK_rel_eq_is_attr_subset = _kalashnikovDB.AK_rel_eq_is_attr_subset

def AK_print_rel_eq_selection(*args):
  return _kalashnikovDB.AK_print_rel_eq_selection(*args)
AK_print_rel_eq_selection = _kalashnikovDB.AK_print_rel_eq_selection

def AK_rel_eq_selection_test():
  return _kalashnikovDB.AK_rel_eq_selection_test()
AK_rel_eq_selection_test = _kalashnikovDB.AK_rel_eq_selection_test

def AK_rel_eq_is_subset(*args):
  return _kalashnikovDB.AK_rel_eq_is_subset(*args)
AK_rel_eq_is_subset = _kalashnikovDB.AK_rel_eq_is_subset

def AK_rel_eq_can_commute(*args):
  return _kalashnikovDB.AK_rel_eq_can_commute(*args)
AK_rel_eq_can_commute = _kalashnikovDB.AK_rel_eq_can_commute

def AK_rel_eq_collect_cond_attributes(*args):
  return _kalashnikovDB.AK_rel_eq_collect_cond_attributes(*args)
AK_rel_eq_collect_cond_attributes = _kalashnikovDB.AK_rel_eq_collect_cond_attributes

def AK_rel_eq_remove_duplicates(*args):
  return _kalashnikovDB.AK_rel_eq_remove_duplicates(*args)
AK_rel_eq_remove_duplicates = _kalashnikovDB.AK_rel_eq_remove_duplicates

def AK_print_rel_eq_projection(*args):
  return _kalashnikovDB.AK_print_rel_eq_projection(*args)
AK_print_rel_eq_projection = _kalashnikovDB.AK_print_rel_eq_projection

def AK_rel_eq_projection_test():
  return _kalashnikovDB.AK_rel_eq_projection_test()
AK_rel_eq_projection_test = _kalashnikovDB.AK_rel_eq_projection_test

def AK_check_arithmetic_statement(*args):
  return _kalashnikovDB.AK_check_arithmetic_statement(*args)
AK_check_arithmetic_statement = _kalashnikovDB.AK_check_arithmetic_statement

def AK_check_if_row_satisfies_expression(*args):
  return _kalashnikovDB.AK_check_if_row_satisfies_expression(*args)
AK_check_if_row_satisfies_expression = _kalashnikovDB.AK_check_if_row_satisfies_expression

def Ak_expression_check_test():
  return _kalashnikovDB.Ak_expression_check_test()
Ak_expression_check_test = _kalashnikovDB.Ak_expression_check_test

def AK_get_id():
  return _kalashnikovDB.AK_get_id()
AK_get_id = _kalashnikovDB.AK_get_id

def Ak_id_test():
  return _kalashnikovDB.Ak_id_test()
Ak_id_test = _kalashnikovDB.Ak_id_test
ID_START_VALUE = _kalashnikovDB.ID_START_VALUE

def AK_set_constraint_not_null(*args):
  return _kalashnikovDB.AK_set_constraint_not_null(*args)
AK_set_constraint_not_null = _kalashnikovDB.AK_set_constraint_not_null

def AK_read_constraint_not_null(*args):
  return _kalashnikovDB.AK_read_constraint_not_null(*args)
AK_read_constraint_not_null = _kalashnikovDB.AK_read_constraint_not_null

def AK_is_number(*args):
  return _kalashnikovDB.AK_is_number(*args)
AK_is_number = _kalashnikovDB.AK_is_number

def AK_null_test():
  return _kalashnikovDB.AK_null_test()
AK_null_test = _kalashnikovDB.AK_null_test

def AK_set_constraint_between(*args):
  return _kalashnikovDB.AK_set_constraint_between(*args)
AK_set_constraint_between = _kalashnikovDB.AK_set_constraint_between

def AK_read_constraint_between(*args):
  return _kalashnikovDB.AK_read_constraint_between(*args)
AK_read_constraint_between = _kalashnikovDB.AK_read_constraint_between

def Ak_constraint_between_test():
  return _kalashnikovDB.Ak_constraint_between_test()
Ak_constraint_between_test = _kalashnikovDB.Ak_constraint_between_test

def AK_add_reference(*args):
  return _kalashnikovDB.AK_add_reference(*args)
AK_add_reference = _kalashnikovDB.AK_add_reference

def AK_get_reference(*args):
  return _kalashnikovDB.AK_get_reference(*args)
AK_get_reference = _kalashnikovDB.AK_get_reference

def AK_reference_check_attribute(*args):
  return _kalashnikovDB.AK_reference_check_attribute(*args)
AK_reference_check_attribute = _kalashnikovDB.AK_reference_check_attribute

def AK_reference_check_if_update_needed(*args):
  return _kalashnikovDB.AK_reference_check_if_update_needed(*args)
AK_reference_check_if_update_needed = _kalashnikovDB.AK_reference_check_if_update_needed

def AK_reference_check_restricion(*args):
  return _kalashnikovDB.AK_reference_check_restricion(*args)
AK_reference_check_restricion = _kalashnikovDB.AK_reference_check_restricion

def AK_reference_update(*args):
  return _kalashnikovDB.AK_reference_update(*args)
AK_reference_update = _kalashnikovDB.AK_reference_update

def AK_reference_check_entry(*args):
  return _kalashnikovDB.AK_reference_check_entry(*args)
AK_reference_check_entry = _kalashnikovDB.AK_reference_check_entry

def AK_reference_test():
  return _kalashnikovDB.AK_reference_test()
AK_reference_test = _kalashnikovDB.AK_reference_test
REF_TYPE_NONE = _kalashnikovDB.REF_TYPE_NONE
REF_TYPE_SET_NULL = _kalashnikovDB.REF_TYPE_SET_NULL
REF_TYPE_NO_ACTION = _kalashnikovDB.REF_TYPE_NO_ACTION
REF_TYPE_CASCADE = _kalashnikovDB.REF_TYPE_CASCADE
REF_TYPE_RESTRICT = _kalashnikovDB.REF_TYPE_RESTRICT
REF_TYPE_SET_DEFAULT = _kalashnikovDB.REF_TYPE_SET_DEFAULT
MAX_REFERENCE_ATTRIBUTES = _kalashnikovDB.MAX_REFERENCE_ATTRIBUTES
MAX_CHILD_CONSTRAINTS = _kalashnikovDB.MAX_CHILD_CONSTRAINTS
class AK_ref_item(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AK_ref_item, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AK_ref_item, name)
    __repr__ = _swig_repr
    __swig_setmethods__["table"] = _kalashnikovDB.AK_ref_item_table_set
    __swig_getmethods__["table"] = _kalashnikovDB.AK_ref_item_table_get
    if _newclass:table = _swig_property(_kalashnikovDB.AK_ref_item_table_get, _kalashnikovDB.AK_ref_item_table_set)
    __swig_setmethods__["attributes"] = _kalashnikovDB.AK_ref_item_attributes_set
    __swig_getmethods__["attributes"] = _kalashnikovDB.AK_ref_item_attributes_get
    if _newclass:attributes = _swig_property(_kalashnikovDB.AK_ref_item_attributes_get, _kalashnikovDB.AK_ref_item_attributes_set)
    __swig_setmethods__["parent"] = _kalashnikovDB.AK_ref_item_parent_set
    __swig_getmethods__["parent"] = _kalashnikovDB.AK_ref_item_parent_get
    if _newclass:parent = _swig_property(_kalashnikovDB.AK_ref_item_parent_get, _kalashnikovDB.AK_ref_item_parent_set)
    __swig_setmethods__["parent_attributes"] = _kalashnikovDB.AK_ref_item_parent_attributes_set
    __swig_getmethods__["parent_attributes"] = _kalashnikovDB.AK_ref_item_parent_attributes_get
    if _newclass:parent_attributes = _swig_property(_kalashnikovDB.AK_ref_item_parent_attributes_get, _kalashnikovDB.AK_ref_item_parent_attributes_set)
    __swig_setmethods__["attributes_number"] = _kalashnikovDB.AK_ref_item_attributes_number_set
    __swig_getmethods__["attributes_number"] = _kalashnikovDB.AK_ref_item_attributes_number_get
    if _newclass:attributes_number = _swig_property(_kalashnikovDB.AK_ref_item_attributes_number_get, _kalashnikovDB.AK_ref_item_attributes_number_set)
    __swig_setmethods__["constraint"] = _kalashnikovDB.AK_ref_item_constraint_set
    __swig_getmethods__["constraint"] = _kalashnikovDB.AK_ref_item_constraint_get
    if _newclass:constraint = _swig_property(_kalashnikovDB.AK_ref_item_constraint_get, _kalashnikovDB.AK_ref_item_constraint_set)
    __swig_setmethods__["type"] = _kalashnikovDB.AK_ref_item_type_set
    __swig_getmethods__["type"] = _kalashnikovDB.AK_ref_item_type_get
    if _newclass:type = _swig_property(_kalashnikovDB.AK_ref_item_type_get, _kalashnikovDB.AK_ref_item_type_set)
    def __init__(self): 
        this = _kalashnikovDB.new_AK_ref_item()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _kalashnikovDB.delete_AK_ref_item
    __del__ = lambda self : None;
AK_ref_item_swigregister = _kalashnikovDB.AK_ref_item_swigregister
AK_ref_item_swigregister(AK_ref_item)

AK_LOCK_RELEASED = _kalashnikovDB.AK_LOCK_RELEASED
AK_TRANSACTION_FINISHED = _kalashnikovDB.AK_TRANSACTION_FINISHED
AK_ALL_TRANSACTION_FINISHED = _kalashnikovDB.AK_ALL_TRANSACTION_FINISHED
class observable_transaction(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, observable_transaction, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, observable_transaction, name)
    __repr__ = _swig_repr
    __swig_setmethods__["AK_transaction_register_observer"] = _kalashnikovDB.observable_transaction_AK_transaction_register_observer_set
    __swig_getmethods__["AK_transaction_register_observer"] = _kalashnikovDB.observable_transaction_AK_transaction_register_observer_get
    if _newclass:AK_transaction_register_observer = _swig_property(_kalashnikovDB.observable_transaction_AK_transaction_register_observer_get, _kalashnikovDB.observable_transaction_AK_transaction_register_observer_set)
    __swig_setmethods__["AK_transaction_unregister_observer"] = _kalashnikovDB.observable_transaction_AK_transaction_unregister_observer_set
    __swig_getmethods__["AK_transaction_unregister_observer"] = _kalashnikovDB.observable_transaction_AK_transaction_unregister_observer_get
    if _newclass:AK_transaction_unregister_observer = _swig_property(_kalashnikovDB.observable_transaction_AK_transaction_unregister_observer_get, _kalashnikovDB.observable_transaction_AK_transaction_unregister_observer_set)
    __swig_setmethods__["AK_lock_released"] = _kalashnikovDB.observable_transaction_AK_lock_released_set
    __swig_getmethods__["AK_lock_released"] = _kalashnikovDB.observable_transaction_AK_lock_released_get
    if _newclass:AK_lock_released = _swig_property(_kalashnikovDB.observable_transaction_AK_lock_released_get, _kalashnikovDB.observable_transaction_AK_lock_released_set)
    __swig_setmethods__["AK_transaction_finished"] = _kalashnikovDB.observable_transaction_AK_transaction_finished_set
    __swig_getmethods__["AK_transaction_finished"] = _kalashnikovDB.observable_transaction_AK_transaction_finished_get
    if _newclass:AK_transaction_finished = _swig_property(_kalashnikovDB.observable_transaction_AK_transaction_finished_get, _kalashnikovDB.observable_transaction_AK_transaction_finished_set)
    __swig_setmethods__["AK_all_transactions_finished"] = _kalashnikovDB.observable_transaction_AK_all_transactions_finished_set
    __swig_getmethods__["AK_all_transactions_finished"] = _kalashnikovDB.observable_transaction_AK_all_transactions_finished_get
    if _newclass:AK_all_transactions_finished = _swig_property(_kalashnikovDB.observable_transaction_AK_all_transactions_finished_get, _kalashnikovDB.observable_transaction_AK_all_transactions_finished_set)
    __swig_setmethods__["observable"] = _kalashnikovDB.observable_transaction_observable_set
    __swig_getmethods__["observable"] = _kalashnikovDB.observable_transaction_observable_get
    if _newclass:observable = _swig_property(_kalashnikovDB.observable_transaction_observable_get, _kalashnikovDB.observable_transaction_observable_set)
    def __init__(self): 
        this = _kalashnikovDB.new_observable_transaction()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _kalashnikovDB.delete_observable_transaction
    __del__ = lambda self : None;
observable_transaction_swigregister = _kalashnikovDB.observable_transaction_swigregister
observable_transaction_swigregister(observable_transaction)

class observer_lock(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, observer_lock, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, observer_lock, name)
    __repr__ = _swig_repr
    __swig_setmethods__["observer"] = _kalashnikovDB.observer_lock_observer_set
    __swig_getmethods__["observer"] = _kalashnikovDB.observer_lock_observer_get
    if _newclass:observer = _swig_property(_kalashnikovDB.observer_lock_observer_get, _kalashnikovDB.observer_lock_observer_set)
    def __init__(self): 
        this = _kalashnikovDB.new_observer_lock()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _kalashnikovDB.delete_observer_lock
    __del__ = lambda self : None;
observer_lock_swigregister = _kalashnikovDB.observer_lock_swigregister
observer_lock_swigregister(observer_lock)

class transaction_locks_list_elem(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, transaction_locks_list_elem, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, transaction_locks_list_elem, name)
    __repr__ = _swig_repr
    __swig_setmethods__["TransactionId"] = _kalashnikovDB.transaction_locks_list_elem_TransactionId_set
    __swig_getmethods__["TransactionId"] = _kalashnikovDB.transaction_locks_list_elem_TransactionId_get
    if _newclass:TransactionId = _swig_property(_kalashnikovDB.transaction_locks_list_elem_TransactionId_get, _kalashnikovDB.transaction_locks_list_elem_TransactionId_set)
    __swig_setmethods__["lock_type"] = _kalashnikovDB.transaction_locks_list_elem_lock_type_set
    __swig_getmethods__["lock_type"] = _kalashnikovDB.transaction_locks_list_elem_lock_type_get
    if _newclass:lock_type = _swig_property(_kalashnikovDB.transaction_locks_list_elem_lock_type_get, _kalashnikovDB.transaction_locks_list_elem_lock_type_set)
    __swig_setmethods__["isWaiting"] = _kalashnikovDB.transaction_locks_list_elem_isWaiting_set
    __swig_getmethods__["isWaiting"] = _kalashnikovDB.transaction_locks_list_elem_isWaiting_get
    if _newclass:isWaiting = _swig_property(_kalashnikovDB.transaction_locks_list_elem_isWaiting_get, _kalashnikovDB.transaction_locks_list_elem_isWaiting_set)
    __swig_setmethods__["nextLock"] = _kalashnikovDB.transaction_locks_list_elem_nextLock_set
    __swig_getmethods__["nextLock"] = _kalashnikovDB.transaction_locks_list_elem_nextLock_get
    if _newclass:nextLock = _swig_property(_kalashnikovDB.transaction_locks_list_elem_nextLock_get, _kalashnikovDB.transaction_locks_list_elem_nextLock_set)
    __swig_setmethods__["prevLock"] = _kalashnikovDB.transaction_locks_list_elem_prevLock_set
    __swig_getmethods__["prevLock"] = _kalashnikovDB.transaction_locks_list_elem_prevLock_get
    if _newclass:prevLock = _swig_property(_kalashnikovDB.transaction_locks_list_elem_prevLock_get, _kalashnikovDB.transaction_locks_list_elem_prevLock_set)
    def __init__(self): 
        this = _kalashnikovDB.new_transaction_locks_list_elem()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _kalashnikovDB.delete_transaction_locks_list_elem
    __del__ = lambda self : None;
transaction_locks_list_elem_swigregister = _kalashnikovDB.transaction_locks_list_elem_swigregister
transaction_locks_list_elem_swigregister(transaction_locks_list_elem)

class transaction_list_elem(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, transaction_list_elem, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, transaction_list_elem, name)
    __repr__ = _swig_repr
    __swig_setmethods__["address"] = _kalashnikovDB.transaction_list_elem_address_set
    __swig_getmethods__["address"] = _kalashnikovDB.transaction_list_elem_address_get
    if _newclass:address = _swig_property(_kalashnikovDB.transaction_list_elem_address_get, _kalashnikovDB.transaction_list_elem_address_set)
    __swig_setmethods__["lock_type"] = _kalashnikovDB.transaction_list_elem_lock_type_set
    __swig_getmethods__["lock_type"] = _kalashnikovDB.transaction_list_elem_lock_type_get
    if _newclass:lock_type = _swig_property(_kalashnikovDB.transaction_list_elem_lock_type_get, _kalashnikovDB.transaction_list_elem_lock_type_set)
    __swig_setmethods__["isWaiting"] = _kalashnikovDB.transaction_list_elem_isWaiting_set
    __swig_getmethods__["isWaiting"] = _kalashnikovDB.transaction_list_elem_isWaiting_get
    if _newclass:isWaiting = _swig_property(_kalashnikovDB.transaction_list_elem_isWaiting_get, _kalashnikovDB.transaction_list_elem_isWaiting_set)
    __swig_setmethods__["DLLLocksHead"] = _kalashnikovDB.transaction_list_elem_DLLLocksHead_set
    __swig_getmethods__["DLLLocksHead"] = _kalashnikovDB.transaction_list_elem_DLLLocksHead_get
    if _newclass:DLLLocksHead = _swig_property(_kalashnikovDB.transaction_list_elem_DLLLocksHead_get, _kalashnikovDB.transaction_list_elem_DLLLocksHead_set)
    __swig_setmethods__["nextBucket"] = _kalashnikovDB.transaction_list_elem_nextBucket_set
    __swig_getmethods__["nextBucket"] = _kalashnikovDB.transaction_list_elem_nextBucket_get
    if _newclass:nextBucket = _swig_property(_kalashnikovDB.transaction_list_elem_nextBucket_get, _kalashnikovDB.transaction_list_elem_nextBucket_set)
    __swig_setmethods__["prevBucket"] = _kalashnikovDB.transaction_list_elem_prevBucket_set
    __swig_getmethods__["prevBucket"] = _kalashnikovDB.transaction_list_elem_prevBucket_get
    if _newclass:prevBucket = _swig_property(_kalashnikovDB.transaction_list_elem_prevBucket_get, _kalashnikovDB.transaction_list_elem_prevBucket_set)
    __swig_setmethods__["observer_lock"] = _kalashnikovDB.transaction_list_elem_observer_lock_set
    __swig_getmethods__["observer_lock"] = _kalashnikovDB.transaction_list_elem_observer_lock_get
    if _newclass:observer_lock = _swig_property(_kalashnikovDB.transaction_list_elem_observer_lock_get, _kalashnikovDB.transaction_list_elem_observer_lock_set)
    def __init__(self): 
        this = _kalashnikovDB.new_transaction_list_elem()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _kalashnikovDB.delete_transaction_list_elem
    __del__ = lambda self : None;
transaction_list_elem_swigregister = _kalashnikovDB.transaction_list_elem_swigregister
transaction_list_elem_swigregister(transaction_list_elem)

class transaction_list_head(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, transaction_list_head, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, transaction_list_head, name)
    __repr__ = _swig_repr
    __swig_setmethods__["DLLHead"] = _kalashnikovDB.transaction_list_head_DLLHead_set
    __swig_getmethods__["DLLHead"] = _kalashnikovDB.transaction_list_head_DLLHead_get
    if _newclass:DLLHead = _swig_property(_kalashnikovDB.transaction_list_head_DLLHead_get, _kalashnikovDB.transaction_list_head_DLLHead_set)
    def __init__(self): 
        this = _kalashnikovDB.new_transaction_list_head()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _kalashnikovDB.delete_transaction_list_head
    __del__ = lambda self : None;
transaction_list_head_swigregister = _kalashnikovDB.transaction_list_head_swigregister
transaction_list_head_swigregister(transaction_list_head)

class memoryAddresses(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, memoryAddresses, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, memoryAddresses, name)
    __repr__ = _swig_repr
    __swig_setmethods__["adresa"] = _kalashnikovDB.memoryAddresses_adresa_set
    __swig_getmethods__["adresa"] = _kalashnikovDB.memoryAddresses_adresa_get
    if _newclass:adresa = _swig_property(_kalashnikovDB.memoryAddresses_adresa_get, _kalashnikovDB.memoryAddresses_adresa_set)
    __swig_setmethods__["nextElement"] = _kalashnikovDB.memoryAddresses_nextElement_set
    __swig_getmethods__["nextElement"] = _kalashnikovDB.memoryAddresses_nextElement_get
    if _newclass:nextElement = _swig_property(_kalashnikovDB.memoryAddresses_nextElement_get, _kalashnikovDB.memoryAddresses_nextElement_set)
    def __init__(self): 
        this = _kalashnikovDB.new_memoryAddresses()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _kalashnikovDB.delete_memoryAddresses
    __del__ = lambda self : None;
memoryAddresses_swigregister = _kalashnikovDB.memoryAddresses_swigregister
memoryAddresses_swigregister(memoryAddresses)

class transactionData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, transactionData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, transactionData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["lengthOfArray"] = _kalashnikovDB.transactionData_lengthOfArray_set
    __swig_getmethods__["lengthOfArray"] = _kalashnikovDB.transactionData_lengthOfArray_get
    if _newclass:lengthOfArray = _swig_property(_kalashnikovDB.transactionData_lengthOfArray_get, _kalashnikovDB.transactionData_lengthOfArray_set)
    __swig_setmethods__["array"] = _kalashnikovDB.transactionData_array_set
    __swig_getmethods__["array"] = _kalashnikovDB.transactionData_array_get
    if _newclass:array = _swig_property(_kalashnikovDB.transactionData_array_get, _kalashnikovDB.transactionData_array_set)
    def __init__(self): 
        this = _kalashnikovDB.new_transactionData()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _kalashnikovDB.delete_transactionData
    __del__ = lambda self : None;
transactionData_swigregister = _kalashnikovDB.transactionData_swigregister
transactionData_swigregister(transactionData)

class threadContainer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, threadContainer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, threadContainer, name)
    __repr__ = _swig_repr
    __swig_setmethods__["thread"] = _kalashnikovDB.threadContainer_thread_set
    __swig_getmethods__["thread"] = _kalashnikovDB.threadContainer_thread_get
    if _newclass:thread = _swig_property(_kalashnikovDB.threadContainer_thread_get, _kalashnikovDB.threadContainer_thread_set)
    __swig_setmethods__["nextThread"] = _kalashnikovDB.threadContainer_nextThread_set
    __swig_getmethods__["nextThread"] = _kalashnikovDB.threadContainer_nextThread_get
    if _newclass:nextThread = _swig_property(_kalashnikovDB.threadContainer_nextThread_get, _kalashnikovDB.threadContainer_nextThread_set)
    def __init__(self): 
        this = _kalashnikovDB.new_threadContainer()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _kalashnikovDB.delete_threadContainer
    __del__ = lambda self : None;
threadContainer_swigregister = _kalashnikovDB.threadContainer_swigregister
threadContainer_swigregister(threadContainer)


def AK_memory_block_hash(*args):
  return _kalashnikovDB.AK_memory_block_hash(*args)
AK_memory_block_hash = _kalashnikovDB.AK_memory_block_hash

def AK_search_existing_link_for_hook(*args):
  return _kalashnikovDB.AK_search_existing_link_for_hook(*args)
AK_search_existing_link_for_hook = _kalashnikovDB.AK_search_existing_link_for_hook

def AK_search_empty_link_for_hook(*args):
  return _kalashnikovDB.AK_search_empty_link_for_hook(*args)
AK_search_empty_link_for_hook = _kalashnikovDB.AK_search_empty_link_for_hook

def AK_add_hash_entry_list(*args):
  return _kalashnikovDB.AK_add_hash_entry_list(*args)
AK_add_hash_entry_list = _kalashnikovDB.AK_add_hash_entry_list

def AK_delete_hash_entry_list(*args):
  return _kalashnikovDB.AK_delete_hash_entry_list(*args)
AK_delete_hash_entry_list = _kalashnikovDB.AK_delete_hash_entry_list

def AK_search_lock_entry_list_by_key(*args):
  return _kalashnikovDB.AK_search_lock_entry_list_by_key(*args)
AK_search_lock_entry_list_by_key = _kalashnikovDB.AK_search_lock_entry_list_by_key

def AK_delete_lock_entry_list(*args):
  return _kalashnikovDB.AK_delete_lock_entry_list(*args)
AK_delete_lock_entry_list = _kalashnikovDB.AK_delete_lock_entry_list

def AK_isLock_waiting(*args):
  return _kalashnikovDB.AK_isLock_waiting(*args)
AK_isLock_waiting = _kalashnikovDB.AK_isLock_waiting

def AK_add_lock(*args):
  return _kalashnikovDB.AK_add_lock(*args)
AK_add_lock = _kalashnikovDB.AK_add_lock

def AK_create_lock(*args):
  return _kalashnikovDB.AK_create_lock(*args)
AK_create_lock = _kalashnikovDB.AK_create_lock

def AK_acquire_lock(*args):
  return _kalashnikovDB.AK_acquire_lock(*args)
AK_acquire_lock = _kalashnikovDB.AK_acquire_lock

def AK_release_locks(*args):
  return _kalashnikovDB.AK_release_locks(*args)
AK_release_locks = _kalashnikovDB.AK_release_locks

def AK_get_memory_blocks(*args):
  return _kalashnikovDB.AK_get_memory_blocks(*args)
AK_get_memory_blocks = _kalashnikovDB.AK_get_memory_blocks

def AK_execute_commands(*args):
  return _kalashnikovDB.AK_execute_commands(*args)
AK_execute_commands = _kalashnikovDB.AK_execute_commands

def AK_execute_transaction(*args):
  return _kalashnikovDB.AK_execute_transaction(*args)
AK_execute_transaction = _kalashnikovDB.AK_execute_transaction

def AK_transaction_manager(*args):
  return _kalashnikovDB.AK_transaction_manager(*args)
AK_transaction_manager = _kalashnikovDB.AK_transaction_manager

def AK_test_Transaction():
  return _kalashnikovDB.AK_test_Transaction()
AK_test_Transaction = _kalashnikovDB.AK_test_Transaction

def AK_create_new_transaction_thread(*args):
  return _kalashnikovDB.AK_create_new_transaction_thread(*args)
AK_create_new_transaction_thread = _kalashnikovDB.AK_create_new_transaction_thread

def AK_remove_transaction_thread(*args):
  return _kalashnikovDB.AK_remove_transaction_thread(*args)
AK_remove_transaction_thread = _kalashnikovDB.AK_remove_transaction_thread

def handle_transaction_notify(*args):
  return _kalashnikovDB.handle_transaction_notify(*args)
handle_transaction_notify = _kalashnikovDB.handle_transaction_notify

def AK_on_observable_notify(*args):
  return _kalashnikovDB.AK_on_observable_notify(*args)
AK_on_observable_notify = _kalashnikovDB.AK_on_observable_notify

def AK_on_transaction_end(*args):
  return _kalashnikovDB.AK_on_transaction_end(*args)
AK_on_transaction_end = _kalashnikovDB.AK_on_transaction_end

def AK_on_lock_release():
  return _kalashnikovDB.AK_on_lock_release()
AK_on_lock_release = _kalashnikovDB.AK_on_lock_release

def AK_on_all_transactions_end():
  return _kalashnikovDB.AK_on_all_transactions_end()
AK_on_all_transactions_end = _kalashnikovDB.AK_on_all_transactions_end

def AK_handle_observable_transaction_action(*args):
  return _kalashnikovDB.AK_handle_observable_transaction_action(*args)
AK_handle_observable_transaction_action = _kalashnikovDB.AK_handle_observable_transaction_action

def AK_lock_released():
  return _kalashnikovDB.AK_lock_released()
AK_lock_released = _kalashnikovDB.AK_lock_released

def AK_transaction_finished():
  return _kalashnikovDB.AK_transaction_finished()
AK_transaction_finished = _kalashnikovDB.AK_transaction_finished

def AK_all_transactions_finished():
  return _kalashnikovDB.AK_all_transactions_finished()
AK_all_transactions_finished = _kalashnikovDB.AK_all_transactions_finished

def AK_transaction_register_observer(*args):
  return _kalashnikovDB.AK_transaction_register_observer(*args)
AK_transaction_register_observer = _kalashnikovDB.AK_transaction_register_observer

def AK_transaction_unregister_observer(*args):
  return _kalashnikovDB.AK_transaction_unregister_observer(*args)
AK_transaction_unregister_observer = _kalashnikovDB.AK_transaction_unregister_observer

def AK_init_observable_transaction():
  return _kalashnikovDB.AK_init_observable_transaction()
AK_init_observable_transaction = _kalashnikovDB.AK_init_observable_transaction

def AK_init_observer_lock():
  return _kalashnikovDB.AK_init_observer_lock()
AK_init_observer_lock = _kalashnikovDB.AK_init_observer_lock

def AK_register_observer(*args):
  return _kalashnikovDB.AK_register_observer(*args)
AK_register_observer = _kalashnikovDB.AK_register_observer

def AK_unregister_observer(*args):
  return _kalashnikovDB.AK_unregister_observer(*args)
AK_unregister_observer = _kalashnikovDB.AK_unregister_observer

def AK_notify_observer(*args):
  return _kalashnikovDB.AK_notify_observer(*args)
AK_notify_observer = _kalashnikovDB.AK_notify_observer

def AK_notify_observers(*args):
  return _kalashnikovDB.AK_notify_observers(*args)
AK_notify_observers = _kalashnikovDB.AK_notify_observers

def AK_get_observer_by_id(*args):
  return _kalashnikovDB.AK_get_observer_by_id(*args)
AK_get_observer_by_id = _kalashnikovDB.AK_get_observer_by_id

def AK_init_observable(*args):
  return _kalashnikovDB.AK_init_observable(*args)
AK_init_observable = _kalashnikovDB.AK_init_observable

def AK_destroy_observer(*args):
  return _kalashnikovDB.AK_destroy_observer(*args)
AK_destroy_observer = _kalashnikovDB.AK_destroy_observer

def AK_notify(*args):
  return _kalashnikovDB.AK_notify(*args)
AK_notify = _kalashnikovDB.AK_notify

def AK_init_observer(*args):
  return _kalashnikovDB.AK_init_observer(*args)
AK_init_observer = _kalashnikovDB.AK_init_observer
ERROR = _kalashnikovDB.ERROR
INFO = _kalashnikovDB.INFO
WARMING = _kalashnikovDB.WARMING
class NotifyDetails(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NotifyDetails, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NotifyDetails, name)
    __repr__ = _swig_repr
    __swig_setmethods__["message"] = _kalashnikovDB.NotifyDetails_message_set
    __swig_getmethods__["message"] = _kalashnikovDB.NotifyDetails_message_get
    if _newclass:message = _swig_property(_kalashnikovDB.NotifyDetails_message_get, _kalashnikovDB.NotifyDetails_message_set)
    __swig_setmethods__["type"] = _kalashnikovDB.NotifyDetails_type_set
    __swig_getmethods__["type"] = _kalashnikovDB.NotifyDetails_type_get
    if _newclass:type = _swig_property(_kalashnikovDB.NotifyDetails_type_get, _kalashnikovDB.NotifyDetails_type_set)
    def __init__(self): 
        this = _kalashnikovDB.new_NotifyDetails()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _kalashnikovDB.delete_NotifyDetails
    __del__ = lambda self : None;
NotifyDetails_swigregister = _kalashnikovDB.NotifyDetails_swigregister
NotifyDetails_swigregister(NotifyDetails)

class TypeObservable(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TypeObservable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TypeObservable, name)
    __repr__ = _swig_repr
    __swig_setmethods__["notifyDetails"] = _kalashnikovDB.TypeObservable_notifyDetails_set
    __swig_getmethods__["notifyDetails"] = _kalashnikovDB.TypeObservable_notifyDetails_get
    if _newclass:notifyDetails = _swig_property(_kalashnikovDB.TypeObservable_notifyDetails_get, _kalashnikovDB.TypeObservable_notifyDetails_set)
    __swig_setmethods__["AK_get_message"] = _kalashnikovDB.TypeObservable_AK_get_message_set
    __swig_getmethods__["AK_get_message"] = _kalashnikovDB.TypeObservable_AK_get_message_get
    if _newclass:AK_get_message = _swig_property(_kalashnikovDB.TypeObservable_AK_get_message_get, _kalashnikovDB.TypeObservable_AK_get_message_set)
    __swig_setmethods__["AK_custom_register_observer"] = _kalashnikovDB.TypeObservable_AK_custom_register_observer_set
    __swig_getmethods__["AK_custom_register_observer"] = _kalashnikovDB.TypeObservable_AK_custom_register_observer_get
    if _newclass:AK_custom_register_observer = _swig_property(_kalashnikovDB.TypeObservable_AK_custom_register_observer_get, _kalashnikovDB.TypeObservable_AK_custom_register_observer_set)
    __swig_setmethods__["AK_custom_unregister_observer"] = _kalashnikovDB.TypeObservable_AK_custom_unregister_observer_set
    __swig_getmethods__["AK_custom_unregister_observer"] = _kalashnikovDB.TypeObservable_AK_custom_unregister_observer_get
    if _newclass:AK_custom_unregister_observer = _swig_property(_kalashnikovDB.TypeObservable_AK_custom_unregister_observer_get, _kalashnikovDB.TypeObservable_AK_custom_unregister_observer_set)
    __swig_setmethods__["AK_set_notify_info_details"] = _kalashnikovDB.TypeObservable_AK_set_notify_info_details_set
    __swig_getmethods__["AK_set_notify_info_details"] = _kalashnikovDB.TypeObservable_AK_set_notify_info_details_get
    if _newclass:AK_set_notify_info_details = _swig_property(_kalashnikovDB.TypeObservable_AK_set_notify_info_details_get, _kalashnikovDB.TypeObservable_AK_set_notify_info_details_set)
    __swig_setmethods__["observable"] = _kalashnikovDB.TypeObservable_observable_set
    __swig_getmethods__["observable"] = _kalashnikovDB.TypeObservable_observable_get
    if _newclass:observable = _swig_property(_kalashnikovDB.TypeObservable_observable_get, _kalashnikovDB.TypeObservable_observable_set)
    def __init__(self): 
        this = _kalashnikovDB.new_TypeObservable()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _kalashnikovDB.delete_TypeObservable
    __del__ = lambda self : None;
TypeObservable_swigregister = _kalashnikovDB.TypeObservable_swigregister
TypeObservable_swigregister(TypeObservable)


def AK_get_message(*args):
  return _kalashnikovDB.AK_get_message(*args)
AK_get_message = _kalashnikovDB.AK_get_message

def AK_custom_register_observer(*args):
  return _kalashnikovDB.AK_custom_register_observer(*args)
AK_custom_register_observer = _kalashnikovDB.AK_custom_register_observer

def AK_custom_unregister_observer(*args):
  return _kalashnikovDB.AK_custom_unregister_observer(*args)
AK_custom_unregister_observer = _kalashnikovDB.AK_custom_unregister_observer

def AK_set_notify_info_details(*args):
  return _kalashnikovDB.AK_set_notify_info_details(*args)
AK_set_notify_info_details = _kalashnikovDB.AK_set_notify_info_details

def AK_custom_action(*args):
  return _kalashnikovDB.AK_custom_action(*args)
AK_custom_action = _kalashnikovDB.AK_custom_action

def init_observable_type():
  return _kalashnikovDB.init_observable_type()
init_observable_type = _kalashnikovDB.init_observable_type
class TypeObserver(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TypeObserver, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TypeObserver, name)
    __repr__ = _swig_repr
    __swig_setmethods__["observable"] = _kalashnikovDB.TypeObserver_observable_set
    __swig_getmethods__["observable"] = _kalashnikovDB.TypeObserver_observable_get
    if _newclass:observable = _swig_property(_kalashnikovDB.TypeObserver_observable_get, _kalashnikovDB.TypeObserver_observable_set)
    __swig_setmethods__["observer"] = _kalashnikovDB.TypeObserver_observer_set
    __swig_getmethods__["observer"] = _kalashnikovDB.TypeObserver_observer_get
    if _newclass:observer = _swig_property(_kalashnikovDB.TypeObserver_observer_get, _kalashnikovDB.TypeObserver_observer_set)
    def __init__(self): 
        this = _kalashnikovDB.new_TypeObserver()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _kalashnikovDB.delete_TypeObserver
    __del__ = lambda self : None;
TypeObserver_swigregister = _kalashnikovDB.TypeObserver_swigregister
TypeObserver_swigregister(TypeObserver)


def handle_ak_custom_type(*args):
  return _kalashnikovDB.handle_ak_custom_type(*args)
handle_ak_custom_type = _kalashnikovDB.handle_ak_custom_type

def custom_observer_event_handler(*args):
  return _kalashnikovDB.custom_observer_event_handler(*args)
custom_observer_event_handler = _kalashnikovDB.custom_observer_event_handler

def init_observer_type(*args):
  return _kalashnikovDB.init_observer_type(*args)
init_observer_type = _kalashnikovDB.init_observer_type

def init_observer_type_second():
  return _kalashnikovDB.init_observer_type_second()
init_observer_type_second = _kalashnikovDB.init_observer_type_second

def AK_observable_test():
  return _kalashnikovDB.AK_observable_test()
AK_observable_test = _kalashnikovDB.AK_observable_test
AK_TRANSACTION = _kalashnikovDB.AK_TRANSACTION
AK_TRIGGER = _kalashnikovDB.AK_TRIGGER
AK_CUSTOM_FIRST = _kalashnikovDB.AK_CUSTOM_FIRST
AK_CUSTOM_SECOND = _kalashnikovDB.AK_CUSTOM_SECOND
class Observer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Observer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Observer, name)
    __repr__ = _swig_repr
    __swig_setmethods__["observer_id"] = _kalashnikovDB.Observer_observer_id_set
    __swig_getmethods__["observer_id"] = _kalashnikovDB.Observer_observer_id_get
    if _newclass:observer_id = _swig_property(_kalashnikovDB.Observer_observer_id_get, _kalashnikovDB.Observer_observer_id_set)
    __swig_setmethods__["AK_observer_type"] = _kalashnikovDB.Observer_AK_observer_type_set
    __swig_getmethods__["AK_observer_type"] = _kalashnikovDB.Observer_AK_observer_type_get
    if _newclass:AK_observer_type = _swig_property(_kalashnikovDB.Observer_AK_observer_type_get, _kalashnikovDB.Observer_AK_observer_type_set)
    __swig_setmethods__["AK_observer_type_event_handler"] = _kalashnikovDB.Observer_AK_observer_type_event_handler_set
    __swig_getmethods__["AK_observer_type_event_handler"] = _kalashnikovDB.Observer_AK_observer_type_event_handler_get
    if _newclass:AK_observer_type_event_handler = _swig_property(_kalashnikovDB.Observer_AK_observer_type_event_handler_get, _kalashnikovDB.Observer_AK_observer_type_event_handler_set)
    __swig_setmethods__["AK_notify"] = _kalashnikovDB.Observer_AK_notify_set
    __swig_getmethods__["AK_notify"] = _kalashnikovDB.Observer_AK_notify_get
    if _newclass:AK_notify = _swig_property(_kalashnikovDB.Observer_AK_notify_get, _kalashnikovDB.Observer_AK_notify_set)
    __swig_setmethods__["AK_destroy_observer"] = _kalashnikovDB.Observer_AK_destroy_observer_set
    __swig_getmethods__["AK_destroy_observer"] = _kalashnikovDB.Observer_AK_destroy_observer_get
    if _newclass:AK_destroy_observer = _swig_property(_kalashnikovDB.Observer_AK_destroy_observer_get, _kalashnikovDB.Observer_AK_destroy_observer_set)
    def __init__(self): 
        this = _kalashnikovDB.new_Observer()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _kalashnikovDB.delete_Observer
    __del__ = lambda self : None;
Observer_swigregister = _kalashnikovDB.Observer_swigregister
Observer_swigregister(Observer)

class Observable(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Observable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Observable, name)
    __repr__ = _swig_repr
    __swig_setmethods__["observers"] = _kalashnikovDB.Observable_observers_set
    __swig_getmethods__["observers"] = _kalashnikovDB.Observable_observers_get
    if _newclass:observers = _swig_property(_kalashnikovDB.Observable_observers_get, _kalashnikovDB.Observable_observers_set)
    __swig_setmethods__["observer_id_counter"] = _kalashnikovDB.Observable_observer_id_counter_set
    __swig_getmethods__["observer_id_counter"] = _kalashnikovDB.Observable_observer_id_counter_get
    if _newclass:observer_id_counter = _swig_property(_kalashnikovDB.Observable_observer_id_counter_get, _kalashnikovDB.Observable_observer_id_counter_set)
    __swig_setmethods__["AK_observable_type"] = _kalashnikovDB.Observable_AK_observable_type_set
    __swig_getmethods__["AK_observable_type"] = _kalashnikovDB.Observable_AK_observable_type_get
    if _newclass:AK_observable_type = _swig_property(_kalashnikovDB.Observable_AK_observable_type_get, _kalashnikovDB.Observable_AK_observable_type_set)
    __swig_setmethods__["AK_ObservableType_Def"] = _kalashnikovDB.Observable_AK_ObservableType_Def_set
    __swig_getmethods__["AK_ObservableType_Def"] = _kalashnikovDB.Observable_AK_ObservableType_Def_get
    if _newclass:AK_ObservableType_Def = _swig_property(_kalashnikovDB.Observable_AK_ObservableType_Def_get, _kalashnikovDB.Observable_AK_ObservableType_Def_set)
    __swig_setmethods__["AK_destroy_observable"] = _kalashnikovDB.Observable_AK_destroy_observable_set
    __swig_getmethods__["AK_destroy_observable"] = _kalashnikovDB.Observable_AK_destroy_observable_get
    if _newclass:AK_destroy_observable = _swig_property(_kalashnikovDB.Observable_AK_destroy_observable_get, _kalashnikovDB.Observable_AK_destroy_observable_set)
    __swig_setmethods__["AK_register_observer"] = _kalashnikovDB.Observable_AK_register_observer_set
    __swig_getmethods__["AK_register_observer"] = _kalashnikovDB.Observable_AK_register_observer_get
    if _newclass:AK_register_observer = _swig_property(_kalashnikovDB.Observable_AK_register_observer_get, _kalashnikovDB.Observable_AK_register_observer_set)
    __swig_setmethods__["AK_unregister_observer"] = _kalashnikovDB.Observable_AK_unregister_observer_set
    __swig_getmethods__["AK_unregister_observer"] = _kalashnikovDB.Observable_AK_unregister_observer_get
    if _newclass:AK_unregister_observer = _swig_property(_kalashnikovDB.Observable_AK_unregister_observer_get, _kalashnikovDB.Observable_AK_unregister_observer_set)
    __swig_setmethods__["AK_notify_observer"] = _kalashnikovDB.Observable_AK_notify_observer_set
    __swig_getmethods__["AK_notify_observer"] = _kalashnikovDB.Observable_AK_notify_observer_get
    if _newclass:AK_notify_observer = _swig_property(_kalashnikovDB.Observable_AK_notify_observer_get, _kalashnikovDB.Observable_AK_notify_observer_set)
    __swig_setmethods__["AK_notify_observers"] = _kalashnikovDB.Observable_AK_notify_observers_set
    __swig_getmethods__["AK_notify_observers"] = _kalashnikovDB.Observable_AK_notify_observers_get
    if _newclass:AK_notify_observers = _swig_property(_kalashnikovDB.Observable_AK_notify_observers_get, _kalashnikovDB.Observable_AK_notify_observers_set)
    __swig_setmethods__["AK_run_custom_action"] = _kalashnikovDB.Observable_AK_run_custom_action_set
    __swig_getmethods__["AK_run_custom_action"] = _kalashnikovDB.Observable_AK_run_custom_action_get
    if _newclass:AK_run_custom_action = _swig_property(_kalashnikovDB.Observable_AK_run_custom_action_get, _kalashnikovDB.Observable_AK_run_custom_action_set)
    __swig_setmethods__["AK_get_observer_by_id"] = _kalashnikovDB.Observable_AK_get_observer_by_id_set
    __swig_getmethods__["AK_get_observer_by_id"] = _kalashnikovDB.Observable_AK_get_observer_by_id_get
    if _newclass:AK_get_observer_by_id = _swig_property(_kalashnikovDB.Observable_AK_get_observer_by_id_get, _kalashnikovDB.Observable_AK_get_observer_by_id_set)
    def __init__(self): 
        this = _kalashnikovDB.new_Observable()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _kalashnikovDB.delete_Observable
    __del__ = lambda self : None;
Observable_swigregister = _kalashnikovDB.Observable_swigregister
Observable_swigregister(Observable)


def create_header_test(*args):
  return _kalashnikovDB.create_header_test(*args)
create_header_test = _kalashnikovDB.create_header_test

def insert_data_test(*args):
  return _kalashnikovDB.insert_data_test(*args)
insert_data_test = _kalashnikovDB.insert_data_test

def selection_test(*args):
  return _kalashnikovDB.selection_test(*args)
selection_test = _kalashnikovDB.selection_test

def get_column_test(*args):
  return _kalashnikovDB.get_column_test(*args)
get_column_test = _kalashnikovDB.get_column_test

def get_row_test(*args):
  return _kalashnikovDB.get_row_test(*args)
get_row_test = _kalashnikovDB.get_row_test

def AK_create_test_tables():
  return _kalashnikovDB.AK_create_test_tables()
AK_create_test_tables = _kalashnikovDB.AK_create_test_tables

def AK_trigger_save_conditions(*args):
  return _kalashnikovDB.AK_trigger_save_conditions(*args)
AK_trigger_save_conditions = _kalashnikovDB.AK_trigger_save_conditions

def AK_trigger_add(*args):
  return _kalashnikovDB.AK_trigger_add(*args)
AK_trigger_add = _kalashnikovDB.AK_trigger_add

def AK_trigger_get_id(*args):
  return _kalashnikovDB.AK_trigger_get_id(*args)
AK_trigger_get_id = _kalashnikovDB.AK_trigger_get_id

def AK_trigger_remove_by_name(*args):
  return _kalashnikovDB.AK_trigger_remove_by_name(*args)
AK_trigger_remove_by_name = _kalashnikovDB.AK_trigger_remove_by_name

def AK_trigger_remove_by_obj_id(*args):
  return _kalashnikovDB.AK_trigger_remove_by_obj_id(*args)
AK_trigger_remove_by_obj_id = _kalashnikovDB.AK_trigger_remove_by_obj_id

def AK_trigger_edit(*args):
  return _kalashnikovDB.AK_trigger_edit(*args)
AK_trigger_edit = _kalashnikovDB.AK_trigger_edit

def AK_trigger_get_conditions(*args):
  return _kalashnikovDB.AK_trigger_get_conditions(*args)
AK_trigger_get_conditions = _kalashnikovDB.AK_trigger_get_conditions

def AK_trigger_test():
  return _kalashnikovDB.AK_trigger_test()
AK_trigger_test = _kalashnikovDB.AK_trigger_test

def help():
  return _kalashnikovDB.help()
help = _kalashnikovDB.help

def show_test():
  return _kalashnikovDB.show_test()
show_test = _kalashnikovDB.show_test

def choose_test():
  return _kalashnikovDB.choose_test()
choose_test = _kalashnikovDB.choose_test
class function(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, function, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, function, name)
    __repr__ = _swig_repr
    __swig_setmethods__["name"] = _kalashnikovDB.function_name_set
    __swig_getmethods__["name"] = _kalashnikovDB.function_name_get
    if _newclass:name = _swig_property(_kalashnikovDB.function_name_get, _kalashnikovDB.function_name_set)
    __swig_setmethods__["func"] = _kalashnikovDB.function_func_set
    __swig_getmethods__["func"] = _kalashnikovDB.function_func_get
    if _newclass:func = _swig_property(_kalashnikovDB.function_func_get, _kalashnikovDB.function_func_set)
    def __init__(self): 
        this = _kalashnikovDB.new_function()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _kalashnikovDB.delete_function
    __del__ = lambda self : None;
function_swigregister = _kalashnikovDB.function_swigregister
function_swigregister(function)


def main(*args):
  return _kalashnikovDB.main(*args)
main = _kalashnikovDB.main

def AK_command(*args):
  return _kalashnikovDB.AK_command(*args)
AK_command = _kalashnikovDB.AK_command

def AK_test_command():
  return _kalashnikovDB.AK_test_command()
AK_test_command = _kalashnikovDB.AK_test_command
ASCIILINESZ = _kalashnikovDB.ASCIILINESZ
LINE_UNPROCESSED = _kalashnikovDB.LINE_UNPROCESSED
LINE_ERROR = _kalashnikovDB.LINE_ERROR
LINE_EMPTY = _kalashnikovDB.LINE_EMPTY
LINE_COMMENT = _kalashnikovDB.LINE_COMMENT
LINE_SECTION = _kalashnikovDB.LINE_SECTION
LINE_VALUE = _kalashnikovDB.LINE_VALUE

def strlwc(*args):
  return _kalashnikovDB.strlwc(*args)
strlwc = _kalashnikovDB.strlwc

def strstrip(*args):
  return _kalashnikovDB.strstrip(*args)
strstrip = _kalashnikovDB.strstrip

def iniparser_getnsec(*args):
  return _kalashnikovDB.iniparser_getnsec(*args)
iniparser_getnsec = _kalashnikovDB.iniparser_getnsec

def iniparser_getsecname(*args):
  return _kalashnikovDB.iniparser_getsecname(*args)
iniparser_getsecname = _kalashnikovDB.iniparser_getsecname

def iniparser_dump(*args):
  return _kalashnikovDB.iniparser_dump(*args)
iniparser_dump = _kalashnikovDB.iniparser_dump

def iniparser_dump_ini(*args):
  return _kalashnikovDB.iniparser_dump_ini(*args)
iniparser_dump_ini = _kalashnikovDB.iniparser_dump_ini

def iniparser_dumpsection_ini(*args):
  return _kalashnikovDB.iniparser_dumpsection_ini(*args)
iniparser_dumpsection_ini = _kalashnikovDB.iniparser_dumpsection_ini

def iniparser_getsecnkeys(*args):
  return _kalashnikovDB.iniparser_getsecnkeys(*args)
iniparser_getsecnkeys = _kalashnikovDB.iniparser_getsecnkeys

def iniparser_getseckeys(*args):
  return _kalashnikovDB.iniparser_getseckeys(*args)
iniparser_getseckeys = _kalashnikovDB.iniparser_getseckeys

def iniparser_getstring(*args):
  return _kalashnikovDB.iniparser_getstring(*args)
iniparser_getstring = _kalashnikovDB.iniparser_getstring

def iniparser_getint(*args):
  return _kalashnikovDB.iniparser_getint(*args)
iniparser_getint = _kalashnikovDB.iniparser_getint

def iniparser_getdouble(*args):
  return _kalashnikovDB.iniparser_getdouble(*args)
iniparser_getdouble = _kalashnikovDB.iniparser_getdouble

def iniparser_getboolean(*args):
  return _kalashnikovDB.iniparser_getboolean(*args)
iniparser_getboolean = _kalashnikovDB.iniparser_getboolean

def iniparser_find_entry(*args):
  return _kalashnikovDB.iniparser_find_entry(*args)
iniparser_find_entry = _kalashnikovDB.iniparser_find_entry

def iniparser_set(*args):
  return _kalashnikovDB.iniparser_set(*args)
iniparser_set = _kalashnikovDB.iniparser_set

def iniparser_unset(*args):
  return _kalashnikovDB.iniparser_unset(*args)
iniparser_unset = _kalashnikovDB.iniparser_unset

def iniparser_line(*args):
  return _kalashnikovDB.iniparser_line(*args)
iniparser_line = _kalashnikovDB.iniparser_line

def iniparser_load(*args):
  return _kalashnikovDB.iniparser_load(*args)
iniparser_load = _kalashnikovDB.iniparser_load

def iniparser_freedict(*args):
  return _kalashnikovDB.iniparser_freedict(*args)
iniparser_freedict = _kalashnikovDB.iniparser_freedict

def AK_inflate_config():
  return _kalashnikovDB.AK_inflate_config()
AK_inflate_config = _kalashnikovDB.AK_inflate_config
MAXVALSZ = _kalashnikovDB.MAXVALSZ
DICTMINSZ = _kalashnikovDB.DICTMINSZ

def mem_double(*args):
  return _kalashnikovDB.mem_double(*args)
mem_double = _kalashnikovDB.mem_double

def xstrdup(*args):
  return _kalashnikovDB.xstrdup(*args)
xstrdup = _kalashnikovDB.xstrdup

def dictionary_hash(*args):
  return _kalashnikovDB.dictionary_hash(*args)
dictionary_hash = _kalashnikovDB.dictionary_hash

def dictionary_new(*args):
  return _kalashnikovDB.dictionary_new(*args)
dictionary_new = _kalashnikovDB.dictionary_new

def dictionary_del(*args):
  return _kalashnikovDB.dictionary_del(*args)
dictionary_del = _kalashnikovDB.dictionary_del

def dictionary_get(*args):
  return _kalashnikovDB.dictionary_get(*args)
dictionary_get = _kalashnikovDB.dictionary_get

def dictionary_set(*args):
  return _kalashnikovDB.dictionary_set(*args)
dictionary_set = _kalashnikovDB.dictionary_set

def dictionary_unset(*args):
  return _kalashnikovDB.dictionary_unset(*args)
dictionary_unset = _kalashnikovDB.dictionary_unset

def dictionary_dump(*args):
  return _kalashnikovDB.dictionary_dump(*args)
dictionary_dump = _kalashnikovDB.dictionary_dump
class dictionary(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, dictionary, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, dictionary, name)
    __repr__ = _swig_repr
    __swig_setmethods__["n"] = _kalashnikovDB.dictionary_n_set
    __swig_getmethods__["n"] = _kalashnikovDB.dictionary_n_get
    if _newclass:n = _swig_property(_kalashnikovDB.dictionary_n_get, _kalashnikovDB.dictionary_n_set)
    __swig_setmethods__["size"] = _kalashnikovDB.dictionary_size_set
    __swig_getmethods__["size"] = _kalashnikovDB.dictionary_size_get
    if _newclass:size = _swig_property(_kalashnikovDB.dictionary_size_get, _kalashnikovDB.dictionary_size_set)
    __swig_setmethods__["val"] = _kalashnikovDB.dictionary_val_set
    __swig_getmethods__["val"] = _kalashnikovDB.dictionary_val_get
    if _newclass:val = _swig_property(_kalashnikovDB.dictionary_val_get, _kalashnikovDB.dictionary_val_set)
    __swig_setmethods__["key"] = _kalashnikovDB.dictionary_key_set
    __swig_getmethods__["key"] = _kalashnikovDB.dictionary_key_get
    if _newclass:key = _swig_property(_kalashnikovDB.dictionary_key_get, _kalashnikovDB.dictionary_key_set)
    __swig_setmethods__["hash"] = _kalashnikovDB.dictionary_hash_set
    __swig_getmethods__["hash"] = _kalashnikovDB.dictionary_hash_get
    if _newclass:hash = _swig_property(_kalashnikovDB.dictionary_hash_get, _kalashnikovDB.dictionary_hash_set)
    def __init__(self): 
        this = _kalashnikovDB.new_dictionary()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _kalashnikovDB.delete_dictionary
    __del__ = lambda self : None;
dictionary_swigregister = _kalashnikovDB.dictionary_swigregister
dictionary_swigregister(dictionary)


def AK_get_function_obj_id(*args):
  return _kalashnikovDB.AK_get_function_obj_id(*args)
AK_get_function_obj_id = _kalashnikovDB.AK_get_function_obj_id

def AK_check_function_arguments(*args):
  return _kalashnikovDB.AK_check_function_arguments(*args)
AK_check_function_arguments = _kalashnikovDB.AK_check_function_arguments

def AK_function_add(*args):
  return _kalashnikovDB.AK_function_add(*args)
AK_function_add = _kalashnikovDB.AK_function_add

def AK_function_arguments_add(*args):
  return _kalashnikovDB.AK_function_arguments_add(*args)
AK_function_arguments_add = _kalashnikovDB.AK_function_arguments_add

def AK_function_remove_by_obj_id(*args):
  return _kalashnikovDB.AK_function_remove_by_obj_id(*args)
AK_function_remove_by_obj_id = _kalashnikovDB.AK_function_remove_by_obj_id

def AK_function_arguments_remove_by_obj_id(*args):
  return _kalashnikovDB.AK_function_arguments_remove_by_obj_id(*args)
AK_function_arguments_remove_by_obj_id = _kalashnikovDB.AK_function_arguments_remove_by_obj_id

def AK_function_remove_by_name(*args):
  return _kalashnikovDB.AK_function_remove_by_name(*args)
AK_function_remove_by_name = _kalashnikovDB.AK_function_remove_by_name

def AK_function_rename(*args):
  return _kalashnikovDB.AK_function_rename(*args)
AK_function_rename = _kalashnikovDB.AK_function_rename

def AK_function_change_return_type(*args):
  return _kalashnikovDB.AK_function_change_return_type(*args)
AK_function_change_return_type = _kalashnikovDB.AK_function_change_return_type

def AK_function_test():
  return _kalashnikovDB.AK_function_test()
AK_function_test = _kalashnikovDB.AK_function_test

def AK_sequence_add(*args):
  return _kalashnikovDB.AK_sequence_add(*args)
AK_sequence_add = _kalashnikovDB.AK_sequence_add

def AK_sequence_remove(*args):
  return _kalashnikovDB.AK_sequence_remove(*args)
AK_sequence_remove = _kalashnikovDB.AK_sequence_remove

def AK_sequence_current_value(*args):
  return _kalashnikovDB.AK_sequence_current_value(*args)
AK_sequence_current_value = _kalashnikovDB.AK_sequence_current_value

def AK_sequence_next_value(*args):
  return _kalashnikovDB.AK_sequence_next_value(*args)
AK_sequence_next_value = _kalashnikovDB.AK_sequence_next_value

def AK_sequence_rename(*args):
  return _kalashnikovDB.AK_sequence_rename(*args)
AK_sequence_rename = _kalashnikovDB.AK_sequence_rename

def AK_sequence_modify(*args):
  return _kalashnikovDB.AK_sequence_modify(*args)
AK_sequence_modify = _kalashnikovDB.AK_sequence_modify

def AK_sequence_test():
  return _kalashnikovDB.AK_sequence_test()
AK_sequence_test = _kalashnikovDB.AK_sequence_test

def AK_clean_redolog():
  return _kalashnikovDB.AK_clean_redolog()
AK_clean_redolog = _kalashnikovDB.AK_clean_redolog

def AK_add_to_redolog(*args):
  return _kalashnikovDB.AK_add_to_redolog(*args)
AK_add_to_redolog = _kalashnikovDB.AK_add_to_redolog

def AK_is_in_redolog(*args):
  return _kalashnikovDB.AK_is_in_redolog(*args)
AK_is_in_redolog = _kalashnikovDB.AK_is_in_redolog

def AK_printout_redolog():
  return _kalashnikovDB.AK_printout_redolog()
AK_printout_redolog = _kalashnikovDB.AK_printout_redolog
# This file is compatible with both classic and new-style classes.


